
LVTN.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000094f8  08000110  08000110  00010110  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000148  08009608  08009608  00019608  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08009750  08009750  00020010  2**0
                  CONTENTS
  4 .ARM          00000000  08009750  08009750  00020010  2**0
                  CONTENTS
  5 .preinit_array 00000000  08009750  08009750  00020010  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08009750  08009750  00019750  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08009754  08009754  00019754  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000010  20000000  08009758  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00001c04  20000010  08009768  00020010  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20001c14  08009768  00021c14  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  00020010  2**0
                  CONTENTS, READONLY
 12 .debug_info   00015651  00000000  00000000  00020039  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 0000358e  00000000  00000000  0003568a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001228  00000000  00000000  00038c18  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 000010f0  00000000  00000000  00039e40  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00019e41  00000000  00000000  0003af30  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00014731  00000000  00000000  00054d71  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00093bce  00000000  00000000  000694a2  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  000fd070  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00004c60  00000000  00000000  000fd0c0  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000110 <__do_global_dtors_aux>:
 8000110:	b510      	push	{r4, lr}
 8000112:	4c05      	ldr	r4, [pc, #20]	; (8000128 <__do_global_dtors_aux+0x18>)
 8000114:	7823      	ldrb	r3, [r4, #0]
 8000116:	b933      	cbnz	r3, 8000126 <__do_global_dtors_aux+0x16>
 8000118:	4b04      	ldr	r3, [pc, #16]	; (800012c <__do_global_dtors_aux+0x1c>)
 800011a:	b113      	cbz	r3, 8000122 <__do_global_dtors_aux+0x12>
 800011c:	4804      	ldr	r0, [pc, #16]	; (8000130 <__do_global_dtors_aux+0x20>)
 800011e:	f3af 8000 	nop.w
 8000122:	2301      	movs	r3, #1
 8000124:	7023      	strb	r3, [r4, #0]
 8000126:	bd10      	pop	{r4, pc}
 8000128:	20000010 	.word	0x20000010
 800012c:	00000000 	.word	0x00000000
 8000130:	080095f0 	.word	0x080095f0

08000134 <frame_dummy>:
 8000134:	b508      	push	{r3, lr}
 8000136:	4b03      	ldr	r3, [pc, #12]	; (8000144 <frame_dummy+0x10>)
 8000138:	b11b      	cbz	r3, 8000142 <frame_dummy+0xe>
 800013a:	4903      	ldr	r1, [pc, #12]	; (8000148 <frame_dummy+0x14>)
 800013c:	4803      	ldr	r0, [pc, #12]	; (800014c <frame_dummy+0x18>)
 800013e:	f3af 8000 	nop.w
 8000142:	bd08      	pop	{r3, pc}
 8000144:	00000000 	.word	0x00000000
 8000148:	20000014 	.word	0x20000014
 800014c:	080095f0 	.word	0x080095f0

08000150 <__aeabi_drsub>:
 8000150:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000154:	e002      	b.n	800015c <__adddf3>
 8000156:	bf00      	nop

08000158 <__aeabi_dsub>:
 8000158:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0800015c <__adddf3>:
 800015c:	b530      	push	{r4, r5, lr}
 800015e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000162:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000166:	ea94 0f05 	teq	r4, r5
 800016a:	bf08      	it	eq
 800016c:	ea90 0f02 	teqeq	r0, r2
 8000170:	bf1f      	itttt	ne
 8000172:	ea54 0c00 	orrsne.w	ip, r4, r0
 8000176:	ea55 0c02 	orrsne.w	ip, r5, r2
 800017a:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 800017e:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000182:	f000 80e2 	beq.w	800034a <__adddf3+0x1ee>
 8000186:	ea4f 5454 	mov.w	r4, r4, lsr #21
 800018a:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 800018e:	bfb8      	it	lt
 8000190:	426d      	neglt	r5, r5
 8000192:	dd0c      	ble.n	80001ae <__adddf3+0x52>
 8000194:	442c      	add	r4, r5
 8000196:	ea80 0202 	eor.w	r2, r0, r2
 800019a:	ea81 0303 	eor.w	r3, r1, r3
 800019e:	ea82 0000 	eor.w	r0, r2, r0
 80001a2:	ea83 0101 	eor.w	r1, r3, r1
 80001a6:	ea80 0202 	eor.w	r2, r0, r2
 80001aa:	ea81 0303 	eor.w	r3, r1, r3
 80001ae:	2d36      	cmp	r5, #54	; 0x36
 80001b0:	bf88      	it	hi
 80001b2:	bd30      	pophi	{r4, r5, pc}
 80001b4:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80001b8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80001bc:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 80001c0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80001c4:	d002      	beq.n	80001cc <__adddf3+0x70>
 80001c6:	4240      	negs	r0, r0
 80001c8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80001cc:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 80001d0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80001d4:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 80001d8:	d002      	beq.n	80001e0 <__adddf3+0x84>
 80001da:	4252      	negs	r2, r2
 80001dc:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 80001e0:	ea94 0f05 	teq	r4, r5
 80001e4:	f000 80a7 	beq.w	8000336 <__adddf3+0x1da>
 80001e8:	f1a4 0401 	sub.w	r4, r4, #1
 80001ec:	f1d5 0e20 	rsbs	lr, r5, #32
 80001f0:	db0d      	blt.n	800020e <__adddf3+0xb2>
 80001f2:	fa02 fc0e 	lsl.w	ip, r2, lr
 80001f6:	fa22 f205 	lsr.w	r2, r2, r5
 80001fa:	1880      	adds	r0, r0, r2
 80001fc:	f141 0100 	adc.w	r1, r1, #0
 8000200:	fa03 f20e 	lsl.w	r2, r3, lr
 8000204:	1880      	adds	r0, r0, r2
 8000206:	fa43 f305 	asr.w	r3, r3, r5
 800020a:	4159      	adcs	r1, r3
 800020c:	e00e      	b.n	800022c <__adddf3+0xd0>
 800020e:	f1a5 0520 	sub.w	r5, r5, #32
 8000212:	f10e 0e20 	add.w	lr, lr, #32
 8000216:	2a01      	cmp	r2, #1
 8000218:	fa03 fc0e 	lsl.w	ip, r3, lr
 800021c:	bf28      	it	cs
 800021e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000222:	fa43 f305 	asr.w	r3, r3, r5
 8000226:	18c0      	adds	r0, r0, r3
 8000228:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800022c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000230:	d507      	bpl.n	8000242 <__adddf3+0xe6>
 8000232:	f04f 0e00 	mov.w	lr, #0
 8000236:	f1dc 0c00 	rsbs	ip, ip, #0
 800023a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800023e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000242:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000246:	d31b      	bcc.n	8000280 <__adddf3+0x124>
 8000248:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800024c:	d30c      	bcc.n	8000268 <__adddf3+0x10c>
 800024e:	0849      	lsrs	r1, r1, #1
 8000250:	ea5f 0030 	movs.w	r0, r0, rrx
 8000254:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000258:	f104 0401 	add.w	r4, r4, #1
 800025c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000260:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 8000264:	f080 809a 	bcs.w	800039c <__adddf3+0x240>
 8000268:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 800026c:	bf08      	it	eq
 800026e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000272:	f150 0000 	adcs.w	r0, r0, #0
 8000276:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800027a:	ea41 0105 	orr.w	r1, r1, r5
 800027e:	bd30      	pop	{r4, r5, pc}
 8000280:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 8000284:	4140      	adcs	r0, r0
 8000286:	eb41 0101 	adc.w	r1, r1, r1
 800028a:	3c01      	subs	r4, #1
 800028c:	bf28      	it	cs
 800028e:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 8000292:	d2e9      	bcs.n	8000268 <__adddf3+0x10c>
 8000294:	f091 0f00 	teq	r1, #0
 8000298:	bf04      	itt	eq
 800029a:	4601      	moveq	r1, r0
 800029c:	2000      	moveq	r0, #0
 800029e:	fab1 f381 	clz	r3, r1
 80002a2:	bf08      	it	eq
 80002a4:	3320      	addeq	r3, #32
 80002a6:	f1a3 030b 	sub.w	r3, r3, #11
 80002aa:	f1b3 0220 	subs.w	r2, r3, #32
 80002ae:	da0c      	bge.n	80002ca <__adddf3+0x16e>
 80002b0:	320c      	adds	r2, #12
 80002b2:	dd08      	ble.n	80002c6 <__adddf3+0x16a>
 80002b4:	f102 0c14 	add.w	ip, r2, #20
 80002b8:	f1c2 020c 	rsb	r2, r2, #12
 80002bc:	fa01 f00c 	lsl.w	r0, r1, ip
 80002c0:	fa21 f102 	lsr.w	r1, r1, r2
 80002c4:	e00c      	b.n	80002e0 <__adddf3+0x184>
 80002c6:	f102 0214 	add.w	r2, r2, #20
 80002ca:	bfd8      	it	le
 80002cc:	f1c2 0c20 	rsble	ip, r2, #32
 80002d0:	fa01 f102 	lsl.w	r1, r1, r2
 80002d4:	fa20 fc0c 	lsr.w	ip, r0, ip
 80002d8:	bfdc      	itt	le
 80002da:	ea41 010c 	orrle.w	r1, r1, ip
 80002de:	4090      	lslle	r0, r2
 80002e0:	1ae4      	subs	r4, r4, r3
 80002e2:	bfa2      	ittt	ge
 80002e4:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 80002e8:	4329      	orrge	r1, r5
 80002ea:	bd30      	popge	{r4, r5, pc}
 80002ec:	ea6f 0404 	mvn.w	r4, r4
 80002f0:	3c1f      	subs	r4, #31
 80002f2:	da1c      	bge.n	800032e <__adddf3+0x1d2>
 80002f4:	340c      	adds	r4, #12
 80002f6:	dc0e      	bgt.n	8000316 <__adddf3+0x1ba>
 80002f8:	f104 0414 	add.w	r4, r4, #20
 80002fc:	f1c4 0220 	rsb	r2, r4, #32
 8000300:	fa20 f004 	lsr.w	r0, r0, r4
 8000304:	fa01 f302 	lsl.w	r3, r1, r2
 8000308:	ea40 0003 	orr.w	r0, r0, r3
 800030c:	fa21 f304 	lsr.w	r3, r1, r4
 8000310:	ea45 0103 	orr.w	r1, r5, r3
 8000314:	bd30      	pop	{r4, r5, pc}
 8000316:	f1c4 040c 	rsb	r4, r4, #12
 800031a:	f1c4 0220 	rsb	r2, r4, #32
 800031e:	fa20 f002 	lsr.w	r0, r0, r2
 8000322:	fa01 f304 	lsl.w	r3, r1, r4
 8000326:	ea40 0003 	orr.w	r0, r0, r3
 800032a:	4629      	mov	r1, r5
 800032c:	bd30      	pop	{r4, r5, pc}
 800032e:	fa21 f004 	lsr.w	r0, r1, r4
 8000332:	4629      	mov	r1, r5
 8000334:	bd30      	pop	{r4, r5, pc}
 8000336:	f094 0f00 	teq	r4, #0
 800033a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800033e:	bf06      	itte	eq
 8000340:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000344:	3401      	addeq	r4, #1
 8000346:	3d01      	subne	r5, #1
 8000348:	e74e      	b.n	80001e8 <__adddf3+0x8c>
 800034a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800034e:	bf18      	it	ne
 8000350:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000354:	d029      	beq.n	80003aa <__adddf3+0x24e>
 8000356:	ea94 0f05 	teq	r4, r5
 800035a:	bf08      	it	eq
 800035c:	ea90 0f02 	teqeq	r0, r2
 8000360:	d005      	beq.n	800036e <__adddf3+0x212>
 8000362:	ea54 0c00 	orrs.w	ip, r4, r0
 8000366:	bf04      	itt	eq
 8000368:	4619      	moveq	r1, r3
 800036a:	4610      	moveq	r0, r2
 800036c:	bd30      	pop	{r4, r5, pc}
 800036e:	ea91 0f03 	teq	r1, r3
 8000372:	bf1e      	ittt	ne
 8000374:	2100      	movne	r1, #0
 8000376:	2000      	movne	r0, #0
 8000378:	bd30      	popne	{r4, r5, pc}
 800037a:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 800037e:	d105      	bne.n	800038c <__adddf3+0x230>
 8000380:	0040      	lsls	r0, r0, #1
 8000382:	4149      	adcs	r1, r1
 8000384:	bf28      	it	cs
 8000386:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 800038a:	bd30      	pop	{r4, r5, pc}
 800038c:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 8000390:	bf3c      	itt	cc
 8000392:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 8000396:	bd30      	popcc	{r4, r5, pc}
 8000398:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 800039c:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80003a0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80003a4:	f04f 0000 	mov.w	r0, #0
 80003a8:	bd30      	pop	{r4, r5, pc}
 80003aa:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80003ae:	bf1a      	itte	ne
 80003b0:	4619      	movne	r1, r3
 80003b2:	4610      	movne	r0, r2
 80003b4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80003b8:	bf1c      	itt	ne
 80003ba:	460b      	movne	r3, r1
 80003bc:	4602      	movne	r2, r0
 80003be:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80003c2:	bf06      	itte	eq
 80003c4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80003c8:	ea91 0f03 	teqeq	r1, r3
 80003cc:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 80003d0:	bd30      	pop	{r4, r5, pc}
 80003d2:	bf00      	nop

080003d4 <__aeabi_ui2d>:
 80003d4:	f090 0f00 	teq	r0, #0
 80003d8:	bf04      	itt	eq
 80003da:	2100      	moveq	r1, #0
 80003dc:	4770      	bxeq	lr
 80003de:	b530      	push	{r4, r5, lr}
 80003e0:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80003e4:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80003e8:	f04f 0500 	mov.w	r5, #0
 80003ec:	f04f 0100 	mov.w	r1, #0
 80003f0:	e750      	b.n	8000294 <__adddf3+0x138>
 80003f2:	bf00      	nop

080003f4 <__aeabi_i2d>:
 80003f4:	f090 0f00 	teq	r0, #0
 80003f8:	bf04      	itt	eq
 80003fa:	2100      	moveq	r1, #0
 80003fc:	4770      	bxeq	lr
 80003fe:	b530      	push	{r4, r5, lr}
 8000400:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000404:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000408:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800040c:	bf48      	it	mi
 800040e:	4240      	negmi	r0, r0
 8000410:	f04f 0100 	mov.w	r1, #0
 8000414:	e73e      	b.n	8000294 <__adddf3+0x138>
 8000416:	bf00      	nop

08000418 <__aeabi_f2d>:
 8000418:	0042      	lsls	r2, r0, #1
 800041a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800041e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000422:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000426:	bf1f      	itttt	ne
 8000428:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800042c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000430:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000434:	4770      	bxne	lr
 8000436:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800043a:	bf08      	it	eq
 800043c:	4770      	bxeq	lr
 800043e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000442:	bf04      	itt	eq
 8000444:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000448:	4770      	bxeq	lr
 800044a:	b530      	push	{r4, r5, lr}
 800044c:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000450:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000454:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000458:	e71c      	b.n	8000294 <__adddf3+0x138>
 800045a:	bf00      	nop

0800045c <__aeabi_ul2d>:
 800045c:	ea50 0201 	orrs.w	r2, r0, r1
 8000460:	bf08      	it	eq
 8000462:	4770      	bxeq	lr
 8000464:	b530      	push	{r4, r5, lr}
 8000466:	f04f 0500 	mov.w	r5, #0
 800046a:	e00a      	b.n	8000482 <__aeabi_l2d+0x16>

0800046c <__aeabi_l2d>:
 800046c:	ea50 0201 	orrs.w	r2, r0, r1
 8000470:	bf08      	it	eq
 8000472:	4770      	bxeq	lr
 8000474:	b530      	push	{r4, r5, lr}
 8000476:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 800047a:	d502      	bpl.n	8000482 <__aeabi_l2d+0x16>
 800047c:	4240      	negs	r0, r0
 800047e:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000482:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000486:	f104 0432 	add.w	r4, r4, #50	; 0x32
 800048a:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 800048e:	f43f aed8 	beq.w	8000242 <__adddf3+0xe6>
 8000492:	f04f 0203 	mov.w	r2, #3
 8000496:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800049a:	bf18      	it	ne
 800049c:	3203      	addne	r2, #3
 800049e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80004a2:	bf18      	it	ne
 80004a4:	3203      	addne	r2, #3
 80004a6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80004aa:	f1c2 0320 	rsb	r3, r2, #32
 80004ae:	fa00 fc03 	lsl.w	ip, r0, r3
 80004b2:	fa20 f002 	lsr.w	r0, r0, r2
 80004b6:	fa01 fe03 	lsl.w	lr, r1, r3
 80004ba:	ea40 000e 	orr.w	r0, r0, lr
 80004be:	fa21 f102 	lsr.w	r1, r1, r2
 80004c2:	4414      	add	r4, r2
 80004c4:	e6bd      	b.n	8000242 <__adddf3+0xe6>
 80004c6:	bf00      	nop

080004c8 <__aeabi_dmul>:
 80004c8:	b570      	push	{r4, r5, r6, lr}
 80004ca:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80004ce:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 80004d2:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80004d6:	bf1d      	ittte	ne
 80004d8:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80004dc:	ea94 0f0c 	teqne	r4, ip
 80004e0:	ea95 0f0c 	teqne	r5, ip
 80004e4:	f000 f8de 	bleq	80006a4 <__aeabi_dmul+0x1dc>
 80004e8:	442c      	add	r4, r5
 80004ea:	ea81 0603 	eor.w	r6, r1, r3
 80004ee:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 80004f2:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 80004f6:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 80004fa:	bf18      	it	ne
 80004fc:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000500:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000504:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000508:	d038      	beq.n	800057c <__aeabi_dmul+0xb4>
 800050a:	fba0 ce02 	umull	ip, lr, r0, r2
 800050e:	f04f 0500 	mov.w	r5, #0
 8000512:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000516:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800051a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800051e:	f04f 0600 	mov.w	r6, #0
 8000522:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000526:	f09c 0f00 	teq	ip, #0
 800052a:	bf18      	it	ne
 800052c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000530:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000534:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000538:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800053c:	d204      	bcs.n	8000548 <__aeabi_dmul+0x80>
 800053e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000542:	416d      	adcs	r5, r5
 8000544:	eb46 0606 	adc.w	r6, r6, r6
 8000548:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800054c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000550:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000554:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000558:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800055c:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000560:	bf88      	it	hi
 8000562:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000566:	d81e      	bhi.n	80005a6 <__aeabi_dmul+0xde>
 8000568:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 800056c:	bf08      	it	eq
 800056e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 8000572:	f150 0000 	adcs.w	r0, r0, #0
 8000576:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800057a:	bd70      	pop	{r4, r5, r6, pc}
 800057c:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 8000580:	ea46 0101 	orr.w	r1, r6, r1
 8000584:	ea40 0002 	orr.w	r0, r0, r2
 8000588:	ea81 0103 	eor.w	r1, r1, r3
 800058c:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000590:	bfc2      	ittt	gt
 8000592:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000596:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 800059a:	bd70      	popgt	{r4, r5, r6, pc}
 800059c:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80005a0:	f04f 0e00 	mov.w	lr, #0
 80005a4:	3c01      	subs	r4, #1
 80005a6:	f300 80ab 	bgt.w	8000700 <__aeabi_dmul+0x238>
 80005aa:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80005ae:	bfde      	ittt	le
 80005b0:	2000      	movle	r0, #0
 80005b2:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 80005b6:	bd70      	pople	{r4, r5, r6, pc}
 80005b8:	f1c4 0400 	rsb	r4, r4, #0
 80005bc:	3c20      	subs	r4, #32
 80005be:	da35      	bge.n	800062c <__aeabi_dmul+0x164>
 80005c0:	340c      	adds	r4, #12
 80005c2:	dc1b      	bgt.n	80005fc <__aeabi_dmul+0x134>
 80005c4:	f104 0414 	add.w	r4, r4, #20
 80005c8:	f1c4 0520 	rsb	r5, r4, #32
 80005cc:	fa00 f305 	lsl.w	r3, r0, r5
 80005d0:	fa20 f004 	lsr.w	r0, r0, r4
 80005d4:	fa01 f205 	lsl.w	r2, r1, r5
 80005d8:	ea40 0002 	orr.w	r0, r0, r2
 80005dc:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 80005e0:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80005e4:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80005e8:	fa21 f604 	lsr.w	r6, r1, r4
 80005ec:	eb42 0106 	adc.w	r1, r2, r6
 80005f0:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80005f4:	bf08      	it	eq
 80005f6:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80005fa:	bd70      	pop	{r4, r5, r6, pc}
 80005fc:	f1c4 040c 	rsb	r4, r4, #12
 8000600:	f1c4 0520 	rsb	r5, r4, #32
 8000604:	fa00 f304 	lsl.w	r3, r0, r4
 8000608:	fa20 f005 	lsr.w	r0, r0, r5
 800060c:	fa01 f204 	lsl.w	r2, r1, r4
 8000610:	ea40 0002 	orr.w	r0, r0, r2
 8000614:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000618:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800061c:	f141 0100 	adc.w	r1, r1, #0
 8000620:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000624:	bf08      	it	eq
 8000626:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800062a:	bd70      	pop	{r4, r5, r6, pc}
 800062c:	f1c4 0520 	rsb	r5, r4, #32
 8000630:	fa00 f205 	lsl.w	r2, r0, r5
 8000634:	ea4e 0e02 	orr.w	lr, lr, r2
 8000638:	fa20 f304 	lsr.w	r3, r0, r4
 800063c:	fa01 f205 	lsl.w	r2, r1, r5
 8000640:	ea43 0302 	orr.w	r3, r3, r2
 8000644:	fa21 f004 	lsr.w	r0, r1, r4
 8000648:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800064c:	fa21 f204 	lsr.w	r2, r1, r4
 8000650:	ea20 0002 	bic.w	r0, r0, r2
 8000654:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000658:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800065c:	bf08      	it	eq
 800065e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000662:	bd70      	pop	{r4, r5, r6, pc}
 8000664:	f094 0f00 	teq	r4, #0
 8000668:	d10f      	bne.n	800068a <__aeabi_dmul+0x1c2>
 800066a:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 800066e:	0040      	lsls	r0, r0, #1
 8000670:	eb41 0101 	adc.w	r1, r1, r1
 8000674:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000678:	bf08      	it	eq
 800067a:	3c01      	subeq	r4, #1
 800067c:	d0f7      	beq.n	800066e <__aeabi_dmul+0x1a6>
 800067e:	ea41 0106 	orr.w	r1, r1, r6
 8000682:	f095 0f00 	teq	r5, #0
 8000686:	bf18      	it	ne
 8000688:	4770      	bxne	lr
 800068a:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 800068e:	0052      	lsls	r2, r2, #1
 8000690:	eb43 0303 	adc.w	r3, r3, r3
 8000694:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 8000698:	bf08      	it	eq
 800069a:	3d01      	subeq	r5, #1
 800069c:	d0f7      	beq.n	800068e <__aeabi_dmul+0x1c6>
 800069e:	ea43 0306 	orr.w	r3, r3, r6
 80006a2:	4770      	bx	lr
 80006a4:	ea94 0f0c 	teq	r4, ip
 80006a8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80006ac:	bf18      	it	ne
 80006ae:	ea95 0f0c 	teqne	r5, ip
 80006b2:	d00c      	beq.n	80006ce <__aeabi_dmul+0x206>
 80006b4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80006b8:	bf18      	it	ne
 80006ba:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80006be:	d1d1      	bne.n	8000664 <__aeabi_dmul+0x19c>
 80006c0:	ea81 0103 	eor.w	r1, r1, r3
 80006c4:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80006c8:	f04f 0000 	mov.w	r0, #0
 80006cc:	bd70      	pop	{r4, r5, r6, pc}
 80006ce:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80006d2:	bf06      	itte	eq
 80006d4:	4610      	moveq	r0, r2
 80006d6:	4619      	moveq	r1, r3
 80006d8:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80006dc:	d019      	beq.n	8000712 <__aeabi_dmul+0x24a>
 80006de:	ea94 0f0c 	teq	r4, ip
 80006e2:	d102      	bne.n	80006ea <__aeabi_dmul+0x222>
 80006e4:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 80006e8:	d113      	bne.n	8000712 <__aeabi_dmul+0x24a>
 80006ea:	ea95 0f0c 	teq	r5, ip
 80006ee:	d105      	bne.n	80006fc <__aeabi_dmul+0x234>
 80006f0:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 80006f4:	bf1c      	itt	ne
 80006f6:	4610      	movne	r0, r2
 80006f8:	4619      	movne	r1, r3
 80006fa:	d10a      	bne.n	8000712 <__aeabi_dmul+0x24a>
 80006fc:	ea81 0103 	eor.w	r1, r1, r3
 8000700:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000704:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000708:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800070c:	f04f 0000 	mov.w	r0, #0
 8000710:	bd70      	pop	{r4, r5, r6, pc}
 8000712:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000716:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800071a:	bd70      	pop	{r4, r5, r6, pc}

0800071c <__aeabi_ddiv>:
 800071c:	b570      	push	{r4, r5, r6, lr}
 800071e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000722:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000726:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800072a:	bf1d      	ittte	ne
 800072c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000730:	ea94 0f0c 	teqne	r4, ip
 8000734:	ea95 0f0c 	teqne	r5, ip
 8000738:	f000 f8a7 	bleq	800088a <__aeabi_ddiv+0x16e>
 800073c:	eba4 0405 	sub.w	r4, r4, r5
 8000740:	ea81 0e03 	eor.w	lr, r1, r3
 8000744:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000748:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800074c:	f000 8088 	beq.w	8000860 <__aeabi_ddiv+0x144>
 8000750:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000754:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000758:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800075c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000760:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000764:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000768:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 800076c:	ea4f 2600 	mov.w	r6, r0, lsl #8
 8000770:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 8000774:	429d      	cmp	r5, r3
 8000776:	bf08      	it	eq
 8000778:	4296      	cmpeq	r6, r2
 800077a:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 800077e:	f504 7440 	add.w	r4, r4, #768	; 0x300
 8000782:	d202      	bcs.n	800078a <__aeabi_ddiv+0x6e>
 8000784:	085b      	lsrs	r3, r3, #1
 8000786:	ea4f 0232 	mov.w	r2, r2, rrx
 800078a:	1ab6      	subs	r6, r6, r2
 800078c:	eb65 0503 	sbc.w	r5, r5, r3
 8000790:	085b      	lsrs	r3, r3, #1
 8000792:	ea4f 0232 	mov.w	r2, r2, rrx
 8000796:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 800079a:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 800079e:	ebb6 0e02 	subs.w	lr, r6, r2
 80007a2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007a6:	bf22      	ittt	cs
 80007a8:	1ab6      	subcs	r6, r6, r2
 80007aa:	4675      	movcs	r5, lr
 80007ac:	ea40 000c 	orrcs.w	r0, r0, ip
 80007b0:	085b      	lsrs	r3, r3, #1
 80007b2:	ea4f 0232 	mov.w	r2, r2, rrx
 80007b6:	ebb6 0e02 	subs.w	lr, r6, r2
 80007ba:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007be:	bf22      	ittt	cs
 80007c0:	1ab6      	subcs	r6, r6, r2
 80007c2:	4675      	movcs	r5, lr
 80007c4:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80007c8:	085b      	lsrs	r3, r3, #1
 80007ca:	ea4f 0232 	mov.w	r2, r2, rrx
 80007ce:	ebb6 0e02 	subs.w	lr, r6, r2
 80007d2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007d6:	bf22      	ittt	cs
 80007d8:	1ab6      	subcs	r6, r6, r2
 80007da:	4675      	movcs	r5, lr
 80007dc:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 80007e0:	085b      	lsrs	r3, r3, #1
 80007e2:	ea4f 0232 	mov.w	r2, r2, rrx
 80007e6:	ebb6 0e02 	subs.w	lr, r6, r2
 80007ea:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007ee:	bf22      	ittt	cs
 80007f0:	1ab6      	subcs	r6, r6, r2
 80007f2:	4675      	movcs	r5, lr
 80007f4:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 80007f8:	ea55 0e06 	orrs.w	lr, r5, r6
 80007fc:	d018      	beq.n	8000830 <__aeabi_ddiv+0x114>
 80007fe:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000802:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000806:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800080a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800080e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000812:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000816:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800081a:	d1c0      	bne.n	800079e <__aeabi_ddiv+0x82>
 800081c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000820:	d10b      	bne.n	800083a <__aeabi_ddiv+0x11e>
 8000822:	ea41 0100 	orr.w	r1, r1, r0
 8000826:	f04f 0000 	mov.w	r0, #0
 800082a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800082e:	e7b6      	b.n	800079e <__aeabi_ddiv+0x82>
 8000830:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000834:	bf04      	itt	eq
 8000836:	4301      	orreq	r1, r0
 8000838:	2000      	moveq	r0, #0
 800083a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800083e:	bf88      	it	hi
 8000840:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000844:	f63f aeaf 	bhi.w	80005a6 <__aeabi_dmul+0xde>
 8000848:	ebb5 0c03 	subs.w	ip, r5, r3
 800084c:	bf04      	itt	eq
 800084e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000852:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000856:	f150 0000 	adcs.w	r0, r0, #0
 800085a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800085e:	bd70      	pop	{r4, r5, r6, pc}
 8000860:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 8000864:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000868:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 800086c:	bfc2      	ittt	gt
 800086e:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000872:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000876:	bd70      	popgt	{r4, r5, r6, pc}
 8000878:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 800087c:	f04f 0e00 	mov.w	lr, #0
 8000880:	3c01      	subs	r4, #1
 8000882:	e690      	b.n	80005a6 <__aeabi_dmul+0xde>
 8000884:	ea45 0e06 	orr.w	lr, r5, r6
 8000888:	e68d      	b.n	80005a6 <__aeabi_dmul+0xde>
 800088a:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800088e:	ea94 0f0c 	teq	r4, ip
 8000892:	bf08      	it	eq
 8000894:	ea95 0f0c 	teqeq	r5, ip
 8000898:	f43f af3b 	beq.w	8000712 <__aeabi_dmul+0x24a>
 800089c:	ea94 0f0c 	teq	r4, ip
 80008a0:	d10a      	bne.n	80008b8 <__aeabi_ddiv+0x19c>
 80008a2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80008a6:	f47f af34 	bne.w	8000712 <__aeabi_dmul+0x24a>
 80008aa:	ea95 0f0c 	teq	r5, ip
 80008ae:	f47f af25 	bne.w	80006fc <__aeabi_dmul+0x234>
 80008b2:	4610      	mov	r0, r2
 80008b4:	4619      	mov	r1, r3
 80008b6:	e72c      	b.n	8000712 <__aeabi_dmul+0x24a>
 80008b8:	ea95 0f0c 	teq	r5, ip
 80008bc:	d106      	bne.n	80008cc <__aeabi_ddiv+0x1b0>
 80008be:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80008c2:	f43f aefd 	beq.w	80006c0 <__aeabi_dmul+0x1f8>
 80008c6:	4610      	mov	r0, r2
 80008c8:	4619      	mov	r1, r3
 80008ca:	e722      	b.n	8000712 <__aeabi_dmul+0x24a>
 80008cc:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80008d0:	bf18      	it	ne
 80008d2:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80008d6:	f47f aec5 	bne.w	8000664 <__aeabi_dmul+0x19c>
 80008da:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 80008de:	f47f af0d 	bne.w	80006fc <__aeabi_dmul+0x234>
 80008e2:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 80008e6:	f47f aeeb 	bne.w	80006c0 <__aeabi_dmul+0x1f8>
 80008ea:	e712      	b.n	8000712 <__aeabi_dmul+0x24a>

080008ec <__aeabi_d2f>:
 80008ec:	ea4f 0241 	mov.w	r2, r1, lsl #1
 80008f0:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 80008f4:	bf24      	itt	cs
 80008f6:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 80008fa:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 80008fe:	d90d      	bls.n	800091c <__aeabi_d2f+0x30>
 8000900:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000904:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000908:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 800090c:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000910:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000914:	bf08      	it	eq
 8000916:	f020 0001 	biceq.w	r0, r0, #1
 800091a:	4770      	bx	lr
 800091c:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000920:	d121      	bne.n	8000966 <__aeabi_d2f+0x7a>
 8000922:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000926:	bfbc      	itt	lt
 8000928:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 800092c:	4770      	bxlt	lr
 800092e:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000932:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000936:	f1c2 0218 	rsb	r2, r2, #24
 800093a:	f1c2 0c20 	rsb	ip, r2, #32
 800093e:	fa10 f30c 	lsls.w	r3, r0, ip
 8000942:	fa20 f002 	lsr.w	r0, r0, r2
 8000946:	bf18      	it	ne
 8000948:	f040 0001 	orrne.w	r0, r0, #1
 800094c:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000950:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000954:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000958:	ea40 000c 	orr.w	r0, r0, ip
 800095c:	fa23 f302 	lsr.w	r3, r3, r2
 8000960:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000964:	e7cc      	b.n	8000900 <__aeabi_d2f+0x14>
 8000966:	ea7f 5362 	mvns.w	r3, r2, asr #21
 800096a:	d107      	bne.n	800097c <__aeabi_d2f+0x90>
 800096c:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000970:	bf1e      	ittt	ne
 8000972:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000976:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 800097a:	4770      	bxne	lr
 800097c:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000980:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000984:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000988:	4770      	bx	lr
 800098a:	bf00      	nop

0800098c <__aeabi_frsub>:
 800098c:	f080 4000 	eor.w	r0, r0, #2147483648	; 0x80000000
 8000990:	e002      	b.n	8000998 <__addsf3>
 8000992:	bf00      	nop

08000994 <__aeabi_fsub>:
 8000994:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000

08000998 <__addsf3>:
 8000998:	0042      	lsls	r2, r0, #1
 800099a:	bf1f      	itttt	ne
 800099c:	ea5f 0341 	movsne.w	r3, r1, lsl #1
 80009a0:	ea92 0f03 	teqne	r2, r3
 80009a4:	ea7f 6c22 	mvnsne.w	ip, r2, asr #24
 80009a8:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 80009ac:	d06a      	beq.n	8000a84 <__addsf3+0xec>
 80009ae:	ea4f 6212 	mov.w	r2, r2, lsr #24
 80009b2:	ebd2 6313 	rsbs	r3, r2, r3, lsr #24
 80009b6:	bfc1      	itttt	gt
 80009b8:	18d2      	addgt	r2, r2, r3
 80009ba:	4041      	eorgt	r1, r0
 80009bc:	4048      	eorgt	r0, r1
 80009be:	4041      	eorgt	r1, r0
 80009c0:	bfb8      	it	lt
 80009c2:	425b      	neglt	r3, r3
 80009c4:	2b19      	cmp	r3, #25
 80009c6:	bf88      	it	hi
 80009c8:	4770      	bxhi	lr
 80009ca:	f010 4f00 	tst.w	r0, #2147483648	; 0x80000000
 80009ce:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 80009d2:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
 80009d6:	bf18      	it	ne
 80009d8:	4240      	negne	r0, r0
 80009da:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80009de:	f441 0100 	orr.w	r1, r1, #8388608	; 0x800000
 80009e2:	f021 417f 	bic.w	r1, r1, #4278190080	; 0xff000000
 80009e6:	bf18      	it	ne
 80009e8:	4249      	negne	r1, r1
 80009ea:	ea92 0f03 	teq	r2, r3
 80009ee:	d03f      	beq.n	8000a70 <__addsf3+0xd8>
 80009f0:	f1a2 0201 	sub.w	r2, r2, #1
 80009f4:	fa41 fc03 	asr.w	ip, r1, r3
 80009f8:	eb10 000c 	adds.w	r0, r0, ip
 80009fc:	f1c3 0320 	rsb	r3, r3, #32
 8000a00:	fa01 f103 	lsl.w	r1, r1, r3
 8000a04:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
 8000a08:	d502      	bpl.n	8000a10 <__addsf3+0x78>
 8000a0a:	4249      	negs	r1, r1
 8000a0c:	eb60 0040 	sbc.w	r0, r0, r0, lsl #1
 8000a10:	f5b0 0f00 	cmp.w	r0, #8388608	; 0x800000
 8000a14:	d313      	bcc.n	8000a3e <__addsf3+0xa6>
 8000a16:	f1b0 7f80 	cmp.w	r0, #16777216	; 0x1000000
 8000a1a:	d306      	bcc.n	8000a2a <__addsf3+0x92>
 8000a1c:	0840      	lsrs	r0, r0, #1
 8000a1e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000a22:	f102 0201 	add.w	r2, r2, #1
 8000a26:	2afe      	cmp	r2, #254	; 0xfe
 8000a28:	d251      	bcs.n	8000ace <__addsf3+0x136>
 8000a2a:	f1b1 4f00 	cmp.w	r1, #2147483648	; 0x80000000
 8000a2e:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000a32:	bf08      	it	eq
 8000a34:	f020 0001 	biceq.w	r0, r0, #1
 8000a38:	ea40 0003 	orr.w	r0, r0, r3
 8000a3c:	4770      	bx	lr
 8000a3e:	0049      	lsls	r1, r1, #1
 8000a40:	eb40 0000 	adc.w	r0, r0, r0
 8000a44:	3a01      	subs	r2, #1
 8000a46:	bf28      	it	cs
 8000a48:	f5b0 0f00 	cmpcs.w	r0, #8388608	; 0x800000
 8000a4c:	d2ed      	bcs.n	8000a2a <__addsf3+0x92>
 8000a4e:	fab0 fc80 	clz	ip, r0
 8000a52:	f1ac 0c08 	sub.w	ip, ip, #8
 8000a56:	ebb2 020c 	subs.w	r2, r2, ip
 8000a5a:	fa00 f00c 	lsl.w	r0, r0, ip
 8000a5e:	bfaa      	itet	ge
 8000a60:	eb00 50c2 	addge.w	r0, r0, r2, lsl #23
 8000a64:	4252      	neglt	r2, r2
 8000a66:	4318      	orrge	r0, r3
 8000a68:	bfbc      	itt	lt
 8000a6a:	40d0      	lsrlt	r0, r2
 8000a6c:	4318      	orrlt	r0, r3
 8000a6e:	4770      	bx	lr
 8000a70:	f092 0f00 	teq	r2, #0
 8000a74:	f481 0100 	eor.w	r1, r1, #8388608	; 0x800000
 8000a78:	bf06      	itte	eq
 8000a7a:	f480 0000 	eoreq.w	r0, r0, #8388608	; 0x800000
 8000a7e:	3201      	addeq	r2, #1
 8000a80:	3b01      	subne	r3, #1
 8000a82:	e7b5      	b.n	80009f0 <__addsf3+0x58>
 8000a84:	ea4f 0341 	mov.w	r3, r1, lsl #1
 8000a88:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 8000a8c:	bf18      	it	ne
 8000a8e:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000a92:	d021      	beq.n	8000ad8 <__addsf3+0x140>
 8000a94:	ea92 0f03 	teq	r2, r3
 8000a98:	d004      	beq.n	8000aa4 <__addsf3+0x10c>
 8000a9a:	f092 0f00 	teq	r2, #0
 8000a9e:	bf08      	it	eq
 8000aa0:	4608      	moveq	r0, r1
 8000aa2:	4770      	bx	lr
 8000aa4:	ea90 0f01 	teq	r0, r1
 8000aa8:	bf1c      	itt	ne
 8000aaa:	2000      	movne	r0, #0
 8000aac:	4770      	bxne	lr
 8000aae:	f012 4f7f 	tst.w	r2, #4278190080	; 0xff000000
 8000ab2:	d104      	bne.n	8000abe <__addsf3+0x126>
 8000ab4:	0040      	lsls	r0, r0, #1
 8000ab6:	bf28      	it	cs
 8000ab8:	f040 4000 	orrcs.w	r0, r0, #2147483648	; 0x80000000
 8000abc:	4770      	bx	lr
 8000abe:	f112 7200 	adds.w	r2, r2, #33554432	; 0x2000000
 8000ac2:	bf3c      	itt	cc
 8000ac4:	f500 0000 	addcc.w	r0, r0, #8388608	; 0x800000
 8000ac8:	4770      	bxcc	lr
 8000aca:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
 8000ace:	f043 40fe 	orr.w	r0, r3, #2130706432	; 0x7f000000
 8000ad2:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000ad6:	4770      	bx	lr
 8000ad8:	ea7f 6222 	mvns.w	r2, r2, asr #24
 8000adc:	bf16      	itet	ne
 8000ade:	4608      	movne	r0, r1
 8000ae0:	ea7f 6323 	mvnseq.w	r3, r3, asr #24
 8000ae4:	4601      	movne	r1, r0
 8000ae6:	0242      	lsls	r2, r0, #9
 8000ae8:	bf06      	itte	eq
 8000aea:	ea5f 2341 	movseq.w	r3, r1, lsl #9
 8000aee:	ea90 0f01 	teqeq	r0, r1
 8000af2:	f440 0080 	orrne.w	r0, r0, #4194304	; 0x400000
 8000af6:	4770      	bx	lr

08000af8 <__aeabi_ui2f>:
 8000af8:	f04f 0300 	mov.w	r3, #0
 8000afc:	e004      	b.n	8000b08 <__aeabi_i2f+0x8>
 8000afe:	bf00      	nop

08000b00 <__aeabi_i2f>:
 8000b00:	f010 4300 	ands.w	r3, r0, #2147483648	; 0x80000000
 8000b04:	bf48      	it	mi
 8000b06:	4240      	negmi	r0, r0
 8000b08:	ea5f 0c00 	movs.w	ip, r0
 8000b0c:	bf08      	it	eq
 8000b0e:	4770      	bxeq	lr
 8000b10:	f043 4396 	orr.w	r3, r3, #1258291200	; 0x4b000000
 8000b14:	4601      	mov	r1, r0
 8000b16:	f04f 0000 	mov.w	r0, #0
 8000b1a:	e01c      	b.n	8000b56 <__aeabi_l2f+0x2a>

08000b1c <__aeabi_ul2f>:
 8000b1c:	ea50 0201 	orrs.w	r2, r0, r1
 8000b20:	bf08      	it	eq
 8000b22:	4770      	bxeq	lr
 8000b24:	f04f 0300 	mov.w	r3, #0
 8000b28:	e00a      	b.n	8000b40 <__aeabi_l2f+0x14>
 8000b2a:	bf00      	nop

08000b2c <__aeabi_l2f>:
 8000b2c:	ea50 0201 	orrs.w	r2, r0, r1
 8000b30:	bf08      	it	eq
 8000b32:	4770      	bxeq	lr
 8000b34:	f011 4300 	ands.w	r3, r1, #2147483648	; 0x80000000
 8000b38:	d502      	bpl.n	8000b40 <__aeabi_l2f+0x14>
 8000b3a:	4240      	negs	r0, r0
 8000b3c:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000b40:	ea5f 0c01 	movs.w	ip, r1
 8000b44:	bf02      	ittt	eq
 8000b46:	4684      	moveq	ip, r0
 8000b48:	4601      	moveq	r1, r0
 8000b4a:	2000      	moveq	r0, #0
 8000b4c:	f043 43b6 	orr.w	r3, r3, #1526726656	; 0x5b000000
 8000b50:	bf08      	it	eq
 8000b52:	f1a3 5380 	subeq.w	r3, r3, #268435456	; 0x10000000
 8000b56:	f5a3 0300 	sub.w	r3, r3, #8388608	; 0x800000
 8000b5a:	fabc f28c 	clz	r2, ip
 8000b5e:	3a08      	subs	r2, #8
 8000b60:	eba3 53c2 	sub.w	r3, r3, r2, lsl #23
 8000b64:	db10      	blt.n	8000b88 <__aeabi_l2f+0x5c>
 8000b66:	fa01 fc02 	lsl.w	ip, r1, r2
 8000b6a:	4463      	add	r3, ip
 8000b6c:	fa00 fc02 	lsl.w	ip, r0, r2
 8000b70:	f1c2 0220 	rsb	r2, r2, #32
 8000b74:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 8000b78:	fa20 f202 	lsr.w	r2, r0, r2
 8000b7c:	eb43 0002 	adc.w	r0, r3, r2
 8000b80:	bf08      	it	eq
 8000b82:	f020 0001 	biceq.w	r0, r0, #1
 8000b86:	4770      	bx	lr
 8000b88:	f102 0220 	add.w	r2, r2, #32
 8000b8c:	fa01 fc02 	lsl.w	ip, r1, r2
 8000b90:	f1c2 0220 	rsb	r2, r2, #32
 8000b94:	ea50 004c 	orrs.w	r0, r0, ip, lsl #1
 8000b98:	fa21 f202 	lsr.w	r2, r1, r2
 8000b9c:	eb43 0002 	adc.w	r0, r3, r2
 8000ba0:	bf08      	it	eq
 8000ba2:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 8000ba6:	4770      	bx	lr

08000ba8 <__aeabi_fmul>:
 8000ba8:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000bac:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
 8000bb0:	bf1e      	ittt	ne
 8000bb2:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
 8000bb6:	ea92 0f0c 	teqne	r2, ip
 8000bba:	ea93 0f0c 	teqne	r3, ip
 8000bbe:	d06f      	beq.n	8000ca0 <__aeabi_fmul+0xf8>
 8000bc0:	441a      	add	r2, r3
 8000bc2:	ea80 0c01 	eor.w	ip, r0, r1
 8000bc6:	0240      	lsls	r0, r0, #9
 8000bc8:	bf18      	it	ne
 8000bca:	ea5f 2141 	movsne.w	r1, r1, lsl #9
 8000bce:	d01e      	beq.n	8000c0e <__aeabi_fmul+0x66>
 8000bd0:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8000bd4:	ea43 1050 	orr.w	r0, r3, r0, lsr #5
 8000bd8:	ea43 1151 	orr.w	r1, r3, r1, lsr #5
 8000bdc:	fba0 3101 	umull	r3, r1, r0, r1
 8000be0:	f00c 4000 	and.w	r0, ip, #2147483648	; 0x80000000
 8000be4:	f5b1 0f00 	cmp.w	r1, #8388608	; 0x800000
 8000be8:	bf3e      	ittt	cc
 8000bea:	0049      	lslcc	r1, r1, #1
 8000bec:	ea41 71d3 	orrcc.w	r1, r1, r3, lsr #31
 8000bf0:	005b      	lslcc	r3, r3, #1
 8000bf2:	ea40 0001 	orr.w	r0, r0, r1
 8000bf6:	f162 027f 	sbc.w	r2, r2, #127	; 0x7f
 8000bfa:	2afd      	cmp	r2, #253	; 0xfd
 8000bfc:	d81d      	bhi.n	8000c3a <__aeabi_fmul+0x92>
 8000bfe:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8000c02:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000c06:	bf08      	it	eq
 8000c08:	f020 0001 	biceq.w	r0, r0, #1
 8000c0c:	4770      	bx	lr
 8000c0e:	f090 0f00 	teq	r0, #0
 8000c12:	f00c 4c00 	and.w	ip, ip, #2147483648	; 0x80000000
 8000c16:	bf08      	it	eq
 8000c18:	0249      	lsleq	r1, r1, #9
 8000c1a:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
 8000c1e:	ea40 2051 	orr.w	r0, r0, r1, lsr #9
 8000c22:	3a7f      	subs	r2, #127	; 0x7f
 8000c24:	bfc2      	ittt	gt
 8000c26:	f1d2 03ff 	rsbsgt	r3, r2, #255	; 0xff
 8000c2a:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
 8000c2e:	4770      	bxgt	lr
 8000c30:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000c34:	f04f 0300 	mov.w	r3, #0
 8000c38:	3a01      	subs	r2, #1
 8000c3a:	dc5d      	bgt.n	8000cf8 <__aeabi_fmul+0x150>
 8000c3c:	f112 0f19 	cmn.w	r2, #25
 8000c40:	bfdc      	itt	le
 8000c42:	f000 4000 	andle.w	r0, r0, #2147483648	; 0x80000000
 8000c46:	4770      	bxle	lr
 8000c48:	f1c2 0200 	rsb	r2, r2, #0
 8000c4c:	0041      	lsls	r1, r0, #1
 8000c4e:	fa21 f102 	lsr.w	r1, r1, r2
 8000c52:	f1c2 0220 	rsb	r2, r2, #32
 8000c56:	fa00 fc02 	lsl.w	ip, r0, r2
 8000c5a:	ea5f 0031 	movs.w	r0, r1, rrx
 8000c5e:	f140 0000 	adc.w	r0, r0, #0
 8000c62:	ea53 034c 	orrs.w	r3, r3, ip, lsl #1
 8000c66:	bf08      	it	eq
 8000c68:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 8000c6c:	4770      	bx	lr
 8000c6e:	f092 0f00 	teq	r2, #0
 8000c72:	f000 4c00 	and.w	ip, r0, #2147483648	; 0x80000000
 8000c76:	bf02      	ittt	eq
 8000c78:	0040      	lsleq	r0, r0, #1
 8000c7a:	f410 0f00 	tsteq.w	r0, #8388608	; 0x800000
 8000c7e:	3a01      	subeq	r2, #1
 8000c80:	d0f9      	beq.n	8000c76 <__aeabi_fmul+0xce>
 8000c82:	ea40 000c 	orr.w	r0, r0, ip
 8000c86:	f093 0f00 	teq	r3, #0
 8000c8a:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000c8e:	bf02      	ittt	eq
 8000c90:	0049      	lsleq	r1, r1, #1
 8000c92:	f411 0f00 	tsteq.w	r1, #8388608	; 0x800000
 8000c96:	3b01      	subeq	r3, #1
 8000c98:	d0f9      	beq.n	8000c8e <__aeabi_fmul+0xe6>
 8000c9a:	ea41 010c 	orr.w	r1, r1, ip
 8000c9e:	e78f      	b.n	8000bc0 <__aeabi_fmul+0x18>
 8000ca0:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
 8000ca4:	ea92 0f0c 	teq	r2, ip
 8000ca8:	bf18      	it	ne
 8000caa:	ea93 0f0c 	teqne	r3, ip
 8000cae:	d00a      	beq.n	8000cc6 <__aeabi_fmul+0x11e>
 8000cb0:	f030 4c00 	bics.w	ip, r0, #2147483648	; 0x80000000
 8000cb4:	bf18      	it	ne
 8000cb6:	f031 4c00 	bicsne.w	ip, r1, #2147483648	; 0x80000000
 8000cba:	d1d8      	bne.n	8000c6e <__aeabi_fmul+0xc6>
 8000cbc:	ea80 0001 	eor.w	r0, r0, r1
 8000cc0:	f000 4000 	and.w	r0, r0, #2147483648	; 0x80000000
 8000cc4:	4770      	bx	lr
 8000cc6:	f090 0f00 	teq	r0, #0
 8000cca:	bf17      	itett	ne
 8000ccc:	f090 4f00 	teqne	r0, #2147483648	; 0x80000000
 8000cd0:	4608      	moveq	r0, r1
 8000cd2:	f091 0f00 	teqne	r1, #0
 8000cd6:	f091 4f00 	teqne	r1, #2147483648	; 0x80000000
 8000cda:	d014      	beq.n	8000d06 <__aeabi_fmul+0x15e>
 8000cdc:	ea92 0f0c 	teq	r2, ip
 8000ce0:	d101      	bne.n	8000ce6 <__aeabi_fmul+0x13e>
 8000ce2:	0242      	lsls	r2, r0, #9
 8000ce4:	d10f      	bne.n	8000d06 <__aeabi_fmul+0x15e>
 8000ce6:	ea93 0f0c 	teq	r3, ip
 8000cea:	d103      	bne.n	8000cf4 <__aeabi_fmul+0x14c>
 8000cec:	024b      	lsls	r3, r1, #9
 8000cee:	bf18      	it	ne
 8000cf0:	4608      	movne	r0, r1
 8000cf2:	d108      	bne.n	8000d06 <__aeabi_fmul+0x15e>
 8000cf4:	ea80 0001 	eor.w	r0, r0, r1
 8000cf8:	f000 4000 	and.w	r0, r0, #2147483648	; 0x80000000
 8000cfc:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000d00:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000d04:	4770      	bx	lr
 8000d06:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000d0a:	f440 0040 	orr.w	r0, r0, #12582912	; 0xc00000
 8000d0e:	4770      	bx	lr

08000d10 <__aeabi_fdiv>:
 8000d10:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000d14:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
 8000d18:	bf1e      	ittt	ne
 8000d1a:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
 8000d1e:	ea92 0f0c 	teqne	r2, ip
 8000d22:	ea93 0f0c 	teqne	r3, ip
 8000d26:	d069      	beq.n	8000dfc <__aeabi_fdiv+0xec>
 8000d28:	eba2 0203 	sub.w	r2, r2, r3
 8000d2c:	ea80 0c01 	eor.w	ip, r0, r1
 8000d30:	0249      	lsls	r1, r1, #9
 8000d32:	ea4f 2040 	mov.w	r0, r0, lsl #9
 8000d36:	d037      	beq.n	8000da8 <__aeabi_fdiv+0x98>
 8000d38:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 8000d3c:	ea43 1111 	orr.w	r1, r3, r1, lsr #4
 8000d40:	ea43 1310 	orr.w	r3, r3, r0, lsr #4
 8000d44:	f00c 4000 	and.w	r0, ip, #2147483648	; 0x80000000
 8000d48:	428b      	cmp	r3, r1
 8000d4a:	bf38      	it	cc
 8000d4c:	005b      	lslcc	r3, r3, #1
 8000d4e:	f142 027d 	adc.w	r2, r2, #125	; 0x7d
 8000d52:	f44f 0c00 	mov.w	ip, #8388608	; 0x800000
 8000d56:	428b      	cmp	r3, r1
 8000d58:	bf24      	itt	cs
 8000d5a:	1a5b      	subcs	r3, r3, r1
 8000d5c:	ea40 000c 	orrcs.w	r0, r0, ip
 8000d60:	ebb3 0f51 	cmp.w	r3, r1, lsr #1
 8000d64:	bf24      	itt	cs
 8000d66:	eba3 0351 	subcs.w	r3, r3, r1, lsr #1
 8000d6a:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000d6e:	ebb3 0f91 	cmp.w	r3, r1, lsr #2
 8000d72:	bf24      	itt	cs
 8000d74:	eba3 0391 	subcs.w	r3, r3, r1, lsr #2
 8000d78:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000d7c:	ebb3 0fd1 	cmp.w	r3, r1, lsr #3
 8000d80:	bf24      	itt	cs
 8000d82:	eba3 03d1 	subcs.w	r3, r3, r1, lsr #3
 8000d86:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000d8a:	011b      	lsls	r3, r3, #4
 8000d8c:	bf18      	it	ne
 8000d8e:	ea5f 1c1c 	movsne.w	ip, ip, lsr #4
 8000d92:	d1e0      	bne.n	8000d56 <__aeabi_fdiv+0x46>
 8000d94:	2afd      	cmp	r2, #253	; 0xfd
 8000d96:	f63f af50 	bhi.w	8000c3a <__aeabi_fmul+0x92>
 8000d9a:	428b      	cmp	r3, r1
 8000d9c:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000da0:	bf08      	it	eq
 8000da2:	f020 0001 	biceq.w	r0, r0, #1
 8000da6:	4770      	bx	lr
 8000da8:	f00c 4c00 	and.w	ip, ip, #2147483648	; 0x80000000
 8000dac:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
 8000db0:	327f      	adds	r2, #127	; 0x7f
 8000db2:	bfc2      	ittt	gt
 8000db4:	f1d2 03ff 	rsbsgt	r3, r2, #255	; 0xff
 8000db8:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
 8000dbc:	4770      	bxgt	lr
 8000dbe:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000dc2:	f04f 0300 	mov.w	r3, #0
 8000dc6:	3a01      	subs	r2, #1
 8000dc8:	e737      	b.n	8000c3a <__aeabi_fmul+0x92>
 8000dca:	f092 0f00 	teq	r2, #0
 8000dce:	f000 4c00 	and.w	ip, r0, #2147483648	; 0x80000000
 8000dd2:	bf02      	ittt	eq
 8000dd4:	0040      	lsleq	r0, r0, #1
 8000dd6:	f410 0f00 	tsteq.w	r0, #8388608	; 0x800000
 8000dda:	3a01      	subeq	r2, #1
 8000ddc:	d0f9      	beq.n	8000dd2 <__aeabi_fdiv+0xc2>
 8000dde:	ea40 000c 	orr.w	r0, r0, ip
 8000de2:	f093 0f00 	teq	r3, #0
 8000de6:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000dea:	bf02      	ittt	eq
 8000dec:	0049      	lsleq	r1, r1, #1
 8000dee:	f411 0f00 	tsteq.w	r1, #8388608	; 0x800000
 8000df2:	3b01      	subeq	r3, #1
 8000df4:	d0f9      	beq.n	8000dea <__aeabi_fdiv+0xda>
 8000df6:	ea41 010c 	orr.w	r1, r1, ip
 8000dfa:	e795      	b.n	8000d28 <__aeabi_fdiv+0x18>
 8000dfc:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
 8000e00:	ea92 0f0c 	teq	r2, ip
 8000e04:	d108      	bne.n	8000e18 <__aeabi_fdiv+0x108>
 8000e06:	0242      	lsls	r2, r0, #9
 8000e08:	f47f af7d 	bne.w	8000d06 <__aeabi_fmul+0x15e>
 8000e0c:	ea93 0f0c 	teq	r3, ip
 8000e10:	f47f af70 	bne.w	8000cf4 <__aeabi_fmul+0x14c>
 8000e14:	4608      	mov	r0, r1
 8000e16:	e776      	b.n	8000d06 <__aeabi_fmul+0x15e>
 8000e18:	ea93 0f0c 	teq	r3, ip
 8000e1c:	d104      	bne.n	8000e28 <__aeabi_fdiv+0x118>
 8000e1e:	024b      	lsls	r3, r1, #9
 8000e20:	f43f af4c 	beq.w	8000cbc <__aeabi_fmul+0x114>
 8000e24:	4608      	mov	r0, r1
 8000e26:	e76e      	b.n	8000d06 <__aeabi_fmul+0x15e>
 8000e28:	f030 4c00 	bics.w	ip, r0, #2147483648	; 0x80000000
 8000e2c:	bf18      	it	ne
 8000e2e:	f031 4c00 	bicsne.w	ip, r1, #2147483648	; 0x80000000
 8000e32:	d1ca      	bne.n	8000dca <__aeabi_fdiv+0xba>
 8000e34:	f030 4200 	bics.w	r2, r0, #2147483648	; 0x80000000
 8000e38:	f47f af5c 	bne.w	8000cf4 <__aeabi_fmul+0x14c>
 8000e3c:	f031 4300 	bics.w	r3, r1, #2147483648	; 0x80000000
 8000e40:	f47f af3c 	bne.w	8000cbc <__aeabi_fmul+0x114>
 8000e44:	e75f      	b.n	8000d06 <__aeabi_fmul+0x15e>
 8000e46:	bf00      	nop

08000e48 <RingAdd>:


/* Ring Buffer functions */
// This function must be called only after disabling USART RX interrupt or inside of the RX interrupt
void RingAdd(modbusRingBuffer_t *xRingBuffer, uint8_t u8Val)
{
 8000e48:	b480      	push	{r7}
 8000e4a:	b083      	sub	sp, #12
 8000e4c:	af00      	add	r7, sp, #0
 8000e4e:	6078      	str	r0, [r7, #4]
 8000e50:	460b      	mov	r3, r1
 8000e52:	70fb      	strb	r3, [r7, #3]

	xRingBuffer->uxBuffer[xRingBuffer->u8end] = u8Val;
 8000e54:	687b      	ldr	r3, [r7, #4]
 8000e56:	f893 3081 	ldrb.w	r3, [r3, #129]	; 0x81
 8000e5a:	4619      	mov	r1, r3
 8000e5c:	687b      	ldr	r3, [r7, #4]
 8000e5e:	78fa      	ldrb	r2, [r7, #3]
 8000e60:	545a      	strb	r2, [r3, r1]
	xRingBuffer->u8end = (xRingBuffer->u8end + 1) % MAX_BUFFER;
 8000e62:	687b      	ldr	r3, [r7, #4]
 8000e64:	f893 3081 	ldrb.w	r3, [r3, #129]	; 0x81
 8000e68:	3301      	adds	r3, #1
 8000e6a:	425a      	negs	r2, r3
 8000e6c:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8000e70:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 8000e74:	bf58      	it	pl
 8000e76:	4253      	negpl	r3, r2
 8000e78:	b2da      	uxtb	r2, r3
 8000e7a:	687b      	ldr	r3, [r7, #4]
 8000e7c:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81
	if (xRingBuffer->u8available == MAX_BUFFER)
 8000e80:	687b      	ldr	r3, [r7, #4]
 8000e82:	f893 3082 	ldrb.w	r3, [r3, #130]	; 0x82
 8000e86:	2b80      	cmp	r3, #128	; 0x80
 8000e88:	d113      	bne.n	8000eb2 <RingAdd+0x6a>
	{
		xRingBuffer->overflow = true;
 8000e8a:	687b      	ldr	r3, [r7, #4]
 8000e8c:	2201      	movs	r2, #1
 8000e8e:	f883 2083 	strb.w	r2, [r3, #131]	; 0x83
		xRingBuffer->u8start = (xRingBuffer->u8start + 1) % MAX_BUFFER;
 8000e92:	687b      	ldr	r3, [r7, #4]
 8000e94:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 8000e98:	3301      	adds	r3, #1
 8000e9a:	425a      	negs	r2, r3
 8000e9c:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8000ea0:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 8000ea4:	bf58      	it	pl
 8000ea6:	4253      	negpl	r3, r2
 8000ea8:	b2da      	uxtb	r2, r3
 8000eaa:	687b      	ldr	r3, [r7, #4]
 8000eac:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80
	{
		xRingBuffer->overflow = false;
		xRingBuffer->u8available++;
	}

}
 8000eb0:	e00b      	b.n	8000eca <RingAdd+0x82>
		xRingBuffer->overflow = false;
 8000eb2:	687b      	ldr	r3, [r7, #4]
 8000eb4:	2200      	movs	r2, #0
 8000eb6:	f883 2083 	strb.w	r2, [r3, #131]	; 0x83
		xRingBuffer->u8available++;
 8000eba:	687b      	ldr	r3, [r7, #4]
 8000ebc:	f893 3082 	ldrb.w	r3, [r3, #130]	; 0x82
 8000ec0:	3301      	adds	r3, #1
 8000ec2:	b2da      	uxtb	r2, r3
 8000ec4:	687b      	ldr	r3, [r7, #4]
 8000ec6:	f883 2082 	strb.w	r2, [r3, #130]	; 0x82
}
 8000eca:	bf00      	nop
 8000ecc:	370c      	adds	r7, #12
 8000ece:	46bd      	mov	sp, r7
 8000ed0:	bc80      	pop	{r7}
 8000ed2:	4770      	bx	lr

08000ed4 <RingGetAllBytes>:

// This function must be called only after disabling USART RX interrupt
uint8_t RingGetAllBytes(modbusRingBuffer_t *xRingBuffer, uint8_t *buffer)
{
 8000ed4:	b580      	push	{r7, lr}
 8000ed6:	b082      	sub	sp, #8
 8000ed8:	af00      	add	r7, sp, #0
 8000eda:	6078      	str	r0, [r7, #4]
 8000edc:	6039      	str	r1, [r7, #0]
	return RingGetNBytes(xRingBuffer, buffer, xRingBuffer->u8available);
 8000ede:	687b      	ldr	r3, [r7, #4]
 8000ee0:	f893 3082 	ldrb.w	r3, [r3, #130]	; 0x82
 8000ee4:	461a      	mov	r2, r3
 8000ee6:	6839      	ldr	r1, [r7, #0]
 8000ee8:	6878      	ldr	r0, [r7, #4]
 8000eea:	f000 f805 	bl	8000ef8 <RingGetNBytes>
 8000eee:	4603      	mov	r3, r0
}
 8000ef0:	4618      	mov	r0, r3
 8000ef2:	3708      	adds	r7, #8
 8000ef4:	46bd      	mov	sp, r7
 8000ef6:	bd80      	pop	{r7, pc}

08000ef8 <RingGetNBytes>:

// This function must be called only after disabling USART RX interrupt
uint8_t RingGetNBytes(modbusRingBuffer_t *xRingBuffer, uint8_t *buffer, uint8_t uNumber)
{
 8000ef8:	b580      	push	{r7, lr}
 8000efa:	b086      	sub	sp, #24
 8000efc:	af00      	add	r7, sp, #0
 8000efe:	60f8      	str	r0, [r7, #12]
 8000f00:	60b9      	str	r1, [r7, #8]
 8000f02:	4613      	mov	r3, r2
 8000f04:	71fb      	strb	r3, [r7, #7]
	uint8_t uCounter;
	if(xRingBuffer->u8available == 0  || uNumber == 0 ) return 0;
 8000f06:	68fb      	ldr	r3, [r7, #12]
 8000f08:	f893 3082 	ldrb.w	r3, [r3, #130]	; 0x82
 8000f0c:	2b00      	cmp	r3, #0
 8000f0e:	d002      	beq.n	8000f16 <RingGetNBytes+0x1e>
 8000f10:	79fb      	ldrb	r3, [r7, #7]
 8000f12:	2b00      	cmp	r3, #0
 8000f14:	d101      	bne.n	8000f1a <RingGetNBytes+0x22>
 8000f16:	2300      	movs	r3, #0
 8000f18:	e03e      	b.n	8000f98 <RingGetNBytes+0xa0>
	if(uNumber > MAX_BUFFER) return 0;
 8000f1a:	79fb      	ldrb	r3, [r7, #7]
 8000f1c:	2b80      	cmp	r3, #128	; 0x80
 8000f1e:	d901      	bls.n	8000f24 <RingGetNBytes+0x2c>
 8000f20:	2300      	movs	r3, #0
 8000f22:	e039      	b.n	8000f98 <RingGetNBytes+0xa0>

	for(uCounter = 0; uCounter < uNumber && uCounter< xRingBuffer->u8available ; uCounter++)
 8000f24:	2300      	movs	r3, #0
 8000f26:	75fb      	strb	r3, [r7, #23]
 8000f28:	e01b      	b.n	8000f62 <RingGetNBytes+0x6a>
	{
		buffer[uCounter] = xRingBuffer->uxBuffer[xRingBuffer->u8start];
 8000f2a:	68fb      	ldr	r3, [r7, #12]
 8000f2c:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 8000f30:	4619      	mov	r1, r3
 8000f32:	7dfb      	ldrb	r3, [r7, #23]
 8000f34:	68ba      	ldr	r2, [r7, #8]
 8000f36:	4413      	add	r3, r2
 8000f38:	68fa      	ldr	r2, [r7, #12]
 8000f3a:	5c52      	ldrb	r2, [r2, r1]
 8000f3c:	701a      	strb	r2, [r3, #0]
		xRingBuffer->u8start = (xRingBuffer->u8start + 1) % MAX_BUFFER;
 8000f3e:	68fb      	ldr	r3, [r7, #12]
 8000f40:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 8000f44:	3301      	adds	r3, #1
 8000f46:	425a      	negs	r2, r3
 8000f48:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8000f4c:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 8000f50:	bf58      	it	pl
 8000f52:	4253      	negpl	r3, r2
 8000f54:	b2da      	uxtb	r2, r3
 8000f56:	68fb      	ldr	r3, [r7, #12]
 8000f58:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80
	for(uCounter = 0; uCounter < uNumber && uCounter< xRingBuffer->u8available ; uCounter++)
 8000f5c:	7dfb      	ldrb	r3, [r7, #23]
 8000f5e:	3301      	adds	r3, #1
 8000f60:	75fb      	strb	r3, [r7, #23]
 8000f62:	7dfa      	ldrb	r2, [r7, #23]
 8000f64:	79fb      	ldrb	r3, [r7, #7]
 8000f66:	429a      	cmp	r2, r3
 8000f68:	d205      	bcs.n	8000f76 <RingGetNBytes+0x7e>
 8000f6a:	68fb      	ldr	r3, [r7, #12]
 8000f6c:	f893 3082 	ldrb.w	r3, [r3, #130]	; 0x82
 8000f70:	7dfa      	ldrb	r2, [r7, #23]
 8000f72:	429a      	cmp	r2, r3
 8000f74:	d3d9      	bcc.n	8000f2a <RingGetNBytes+0x32>
	}
	xRingBuffer->u8available = xRingBuffer->u8available - uCounter;
 8000f76:	68fb      	ldr	r3, [r7, #12]
 8000f78:	f893 2082 	ldrb.w	r2, [r3, #130]	; 0x82
 8000f7c:	7dfb      	ldrb	r3, [r7, #23]
 8000f7e:	1ad3      	subs	r3, r2, r3
 8000f80:	b2da      	uxtb	r2, r3
 8000f82:	68fb      	ldr	r3, [r7, #12]
 8000f84:	f883 2082 	strb.w	r2, [r3, #130]	; 0x82
	xRingBuffer->overflow = false;
 8000f88:	68fb      	ldr	r3, [r7, #12]
 8000f8a:	2200      	movs	r2, #0
 8000f8c:	f883 2083 	strb.w	r2, [r3, #131]	; 0x83
	RingClear(xRingBuffer);
 8000f90:	68f8      	ldr	r0, [r7, #12]
 8000f92:	f000 f805 	bl	8000fa0 <RingClear>

	return uCounter;
 8000f96:	7dfb      	ldrb	r3, [r7, #23]
}
 8000f98:	4618      	mov	r0, r3
 8000f9a:	3718      	adds	r7, #24
 8000f9c:	46bd      	mov	sp, r7
 8000f9e:	bd80      	pop	{r7, pc}

08000fa0 <RingClear>:
{
return xRingBuffer->u8available;
}

void RingClear(modbusRingBuffer_t *xRingBuffer)
{
 8000fa0:	b480      	push	{r7}
 8000fa2:	b083      	sub	sp, #12
 8000fa4:	af00      	add	r7, sp, #0
 8000fa6:	6078      	str	r0, [r7, #4]
xRingBuffer->u8start = 0;
 8000fa8:	687b      	ldr	r3, [r7, #4]
 8000faa:	2200      	movs	r2, #0
 8000fac:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80
xRingBuffer->u8end = 0;
 8000fb0:	687b      	ldr	r3, [r7, #4]
 8000fb2:	2200      	movs	r2, #0
 8000fb4:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81
xRingBuffer->u8available = 0;
 8000fb8:	687b      	ldr	r3, [r7, #4]
 8000fba:	2200      	movs	r2, #0
 8000fbc:	f883 2082 	strb.w	r2, [r3, #130]	; 0x82
xRingBuffer->overflow = false;
 8000fc0:	687b      	ldr	r3, [r7, #4]
 8000fc2:	2200      	movs	r2, #0
 8000fc4:	f883 2083 	strb.w	r2, [r3, #131]	; 0x83
}
 8000fc8:	bf00      	nop
 8000fca:	370c      	adds	r7, #12
 8000fcc:	46bd      	mov	sp, r7
 8000fce:	bc80      	pop	{r7}
 8000fd0:	4770      	bx	lr
	...

08000fd4 <ModbusInit>:
 * of the modbus handler
 *
 * @param modH   modbus handler
 */
void ModbusInit(modbusHandler_t * modH)
{
 8000fd4:	b580      	push	{r7, lr}
 8000fd6:	b084      	sub	sp, #16
 8000fd8:	af02      	add	r7, sp, #8
 8000fda:	6078      	str	r0, [r7, #4]

  if (numberHandlers < MAX_M_HANDLERS)
 8000fdc:	4b42      	ldr	r3, [pc, #264]	; (80010e8 <ModbusInit+0x114>)
 8000fde:	781b      	ldrb	r3, [r3, #0]
 8000fe0:	2b01      	cmp	r3, #1
 8000fe2:	d87d      	bhi.n	80010e0 <ModbusInit+0x10c>
  {

	  //Initialize the ring buffer

	  RingClear(&modH->xBufferRX);
 8000fe4:	687b      	ldr	r3, [r7, #4]
 8000fe6:	33bc      	adds	r3, #188	; 0xbc
 8000fe8:	4618      	mov	r0, r3
 8000fea:	f7ff ffd9 	bl	8000fa0 <RingClear>

	  if(modH->uModbusType == MB_SLAVE)
 8000fee:	687b      	ldr	r3, [r7, #4]
 8000ff0:	781b      	ldrb	r3, [r3, #0]
 8000ff2:	2b03      	cmp	r3, #3
 8000ff4:	d109      	bne.n	800100a <ModbusInit+0x36>
		  }
		  else{
			  modH->myTaskModbusAHandle = osThreadNew(StartTaskModbusSlave, modH, &myTaskModbusA_attributes);
		  }
#else
		  modH->myTaskModbusAHandle = osThreadNew(StartTaskModbusSlave, modH, &myTaskModbusA_attributes);
 8000ff6:	4a3d      	ldr	r2, [pc, #244]	; (80010ec <ModbusInit+0x118>)
 8000ff8:	6879      	ldr	r1, [r7, #4]
 8000ffa:	483d      	ldr	r0, [pc, #244]	; (80010f0 <ModbusInit+0x11c>)
 8000ffc:	f004 ffee 	bl	8005fdc <osThreadNew>
 8001000:	4602      	mov	r2, r0
 8001002:	687b      	ldr	r3, [r7, #4]
 8001004:	f8c3 20ac 	str.w	r2, [r3, #172]	; 0xac
 8001008:	e033      	b.n	8001072 <ModbusInit+0x9e>
#endif


	  }
	  else if (modH->uModbusType == MB_MASTER)
 800100a:	687b      	ldr	r3, [r7, #4]
 800100c:	781b      	ldrb	r3, [r3, #0]
 800100e:	2b04      	cmp	r3, #4
 8001010:	d12e      	bne.n	8001070 <ModbusInit+0x9c>
		  else
		  {
		     modH->myTaskModbusAHandle = osThreadNew(StartTaskModbusMaster, modH, &myTaskModbusB_attributes);
		  }
#else
		  modH->myTaskModbusAHandle = osThreadNew(StartTaskModbusMaster, modH, &myTaskModbusB_attributes);
 8001012:	4a38      	ldr	r2, [pc, #224]	; (80010f4 <ModbusInit+0x120>)
 8001014:	6879      	ldr	r1, [r7, #4]
 8001016:	4838      	ldr	r0, [pc, #224]	; (80010f8 <ModbusInit+0x124>)
 8001018:	f004 ffe0 	bl	8005fdc <osThreadNew>
 800101c:	4602      	mov	r2, r0
 800101e:	687b      	ldr	r3, [r7, #4]
 8001020:	f8c3 20ac 	str.w	r2, [r3, #172]	; 0xac
#endif



		  modH->xTimerTimeout=xTimerCreate("xTimerTimeout",  // Just a text name, not used by the kernel.
				  	  	modH->u16timeOut ,     		// The timer period in ticks.
 8001024:	687b      	ldr	r3, [r7, #4]
 8001026:	f8b3 30a2 	ldrh.w	r3, [r3, #162]	; 0xa2
		  modH->xTimerTimeout=xTimerCreate("xTimerTimeout",  // Just a text name, not used by the kernel.
 800102a:	4619      	mov	r1, r3
						pdFALSE,         // The timers will auto-reload themselves when they expire.
						( void * )modH->xTimerTimeout,     // Assign each timer a unique id equal to its array index.
 800102c:	687b      	ldr	r3, [r7, #4]
 800102e:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
		  modH->xTimerTimeout=xTimerCreate("xTimerTimeout",  // Just a text name, not used by the kernel.
 8001032:	4a32      	ldr	r2, [pc, #200]	; (80010fc <ModbusInit+0x128>)
 8001034:	9200      	str	r2, [sp, #0]
 8001036:	2200      	movs	r2, #0
 8001038:	4831      	ldr	r0, [pc, #196]	; (8001100 <ModbusInit+0x12c>)
 800103a:	f007 fbb7 	bl	80087ac <xTimerCreate>
 800103e:	4602      	mov	r2, r0
 8001040:	687b      	ldr	r3, [r7, #4]
 8001042:	f8c3 20b4 	str.w	r2, [r3, #180]	; 0xb4
						(TimerCallbackFunction_t) vTimerCallbackTimeout  // Each timer calls the same callback when it expires.
                  	  	);

		  if(modH->xTimerTimeout == NULL)
 8001046:	687b      	ldr	r3, [r7, #4]
 8001048:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 800104c:	2b00      	cmp	r3, #0
 800104e:	d100      	bne.n	8001052 <ModbusInit+0x7e>
		  {
			  while(1); //error creating timer, check heap and stack size
 8001050:	e7fe      	b.n	8001050 <ModbusInit+0x7c>
		  }


		  modH->QueueTelegramHandle = osMessageQueueNew (MAX_TELEGRAMS, sizeof(modbus_t), &QueueTelegram_attributes);
 8001052:	4a2c      	ldr	r2, [pc, #176]	; (8001104 <ModbusInit+0x130>)
 8001054:	2110      	movs	r1, #16
 8001056:	2002      	movs	r0, #2
 8001058:	f005 f934 	bl	80062c4 <osMessageQueueNew>
 800105c:	4602      	mov	r2, r0
 800105e:	687b      	ldr	r3, [r7, #4]
 8001060:	f8c3 20a8 	str.w	r2, [r3, #168]	; 0xa8

		  if(modH->QueueTelegramHandle == NULL)
 8001064:	687b      	ldr	r3, [r7, #4]
 8001066:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 800106a:	2b00      	cmp	r3, #0
 800106c:	d101      	bne.n	8001072 <ModbusInit+0x9e>
		  {
			  while(1); //error creating queue for telegrams, check heap and stack size
 800106e:	e7fe      	b.n	800106e <ModbusInit+0x9a>
		  }

	  }
	  else
	  {
		  while(1); //Error Modbus type not supported choose a valid Type
 8001070:	e7fe      	b.n	8001070 <ModbusInit+0x9c>
	  }

	  if  (modH->myTaskModbusAHandle == NULL)
 8001072:	687b      	ldr	r3, [r7, #4]
 8001074:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 8001078:	2b00      	cmp	r3, #0
 800107a:	d100      	bne.n	800107e <ModbusInit+0xaa>
	  {
		  while(1); //Error creating Modbus task, check heap and stack size
 800107c:	e7fe      	b.n	800107c <ModbusInit+0xa8>


	  modH->xTimerT35 = xTimerCreate("TimerT35",         // Just a text name, not used by the kernel.
		  	  	  	  	  	  	  	T35 ,     // The timer period in ticks.
                                    pdFALSE,         // The timers will auto-reload themselves when they expire.
									( void * )modH->xTimerT35,     // Assign each timer a unique id equal to its array index.
 800107e:	687b      	ldr	r3, [r7, #4]
 8001080:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
	  modH->xTimerT35 = xTimerCreate("TimerT35",         // Just a text name, not used by the kernel.
 8001084:	4a20      	ldr	r2, [pc, #128]	; (8001108 <ModbusInit+0x134>)
 8001086:	9200      	str	r2, [sp, #0]
 8001088:	2200      	movs	r2, #0
 800108a:	2105      	movs	r1, #5
 800108c:	481f      	ldr	r0, [pc, #124]	; (800110c <ModbusInit+0x138>)
 800108e:	f007 fb8d 	bl	80087ac <xTimerCreate>
 8001092:	4602      	mov	r2, r0
 8001094:	687b      	ldr	r3, [r7, #4]
 8001096:	f8c3 20b0 	str.w	r2, [r3, #176]	; 0xb0
                                    (TimerCallbackFunction_t) vTimerCallbackT35     // Each timer calls the same callback when it expires.
                                    );
	  if (modH->xTimerT35 == NULL)
 800109a:	687b      	ldr	r3, [r7, #4]
 800109c:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 80010a0:	2b00      	cmp	r3, #0
 80010a2:	d100      	bne.n	80010a6 <ModbusInit+0xd2>
	  {
		  while(1); //Error creating the timer, check heap and stack size
 80010a4:	e7fe      	b.n	80010a4 <ModbusInit+0xd0>
	  }


	  modH->ModBusSphrHandle = osSemaphoreNew(1, 1, &ModBusSphr_attributes);
 80010a6:	4a1a      	ldr	r2, [pc, #104]	; (8001110 <ModbusInit+0x13c>)
 80010a8:	2101      	movs	r1, #1
 80010aa:	2001      	movs	r0, #1
 80010ac:	f005 f86e 	bl	800618c <osSemaphoreNew>
 80010b0:	4602      	mov	r2, r0
 80010b2:	687b      	ldr	r3, [r7, #4]
 80010b4:	f8c3 20b8 	str.w	r2, [r3, #184]	; 0xb8

	  if(modH->ModBusSphrHandle == NULL)
 80010b8:	687b      	ldr	r3, [r7, #4]
 80010ba:	f8d3 30b8 	ldr.w	r3, [r3, #184]	; 0xb8
 80010be:	2b00      	cmp	r3, #0
 80010c0:	d100      	bne.n	80010c4 <ModbusInit+0xf0>
	  {
		  while(1); //Error creating the semaphore, check heap and stack size
 80010c2:	e7fe      	b.n	80010c2 <ModbusInit+0xee>
	  }

	  mHandlers[numberHandlers] = modH;
 80010c4:	4b08      	ldr	r3, [pc, #32]	; (80010e8 <ModbusInit+0x114>)
 80010c6:	781b      	ldrb	r3, [r3, #0]
 80010c8:	4619      	mov	r1, r3
 80010ca:	4a12      	ldr	r2, [pc, #72]	; (8001114 <ModbusInit+0x140>)
 80010cc:	687b      	ldr	r3, [r7, #4]
 80010ce:	f842 3021 	str.w	r3, [r2, r1, lsl #2]
	  numberHandlers++;
 80010d2:	4b05      	ldr	r3, [pc, #20]	; (80010e8 <ModbusInit+0x114>)
 80010d4:	781b      	ldrb	r3, [r3, #0]
 80010d6:	3301      	adds	r3, #1
 80010d8:	b2da      	uxtb	r2, r3
 80010da:	4b03      	ldr	r3, [pc, #12]	; (80010e8 <ModbusInit+0x114>)
 80010dc:	701a      	strb	r2, [r3, #0]
  else
  {
	  while(1); //error no more Modbus handlers supported
  }

}
 80010de:	e000      	b.n	80010e2 <ModbusInit+0x10e>
	  while(1); //error no more Modbus handlers supported
 80010e0:	e7fe      	b.n	80010e0 <ModbusInit+0x10c>
}
 80010e2:	3708      	adds	r7, #8
 80010e4:	46bd      	mov	sp, r7
 80010e6:	bd80      	pop	{r7, pc}
 80010e8:	20000034 	.word	0x20000034
 80010ec:	080096b4 	.word	0x080096b4
 80010f0:	08001301 	.word	0x08001301
 80010f4:	080096d8 	.word	0x080096d8
 80010f8:	08001775 	.word	0x08001775
 80010fc:	080012a5 	.word	0x080012a5
 8001100:	0800964c 	.word	0x0800964c
 8001104:	0800969c 	.word	0x0800969c
 8001108:	08001221 	.word	0x08001221
 800110c:	0800965c 	.word	0x0800965c
 8001110:	080096fc 	.word	0x080096fc
 8001114:	2000002c 	.word	0x2000002c

08001118 <ModbusStart>:
 * ModbusRtu's own begin() functions.)
 *
 * @ingroup setup
 */
void ModbusStart(modbusHandler_t * modH)
{
 8001118:	b580      	push	{r7, lr}
 800111a:	b082      	sub	sp, #8
 800111c:	af00      	add	r7, sp, #0
 800111e:	6078      	str	r0, [r7, #4]

	if(modH->xTypeHW != USART_HW && modH->xTypeHW != TCP_HW && modH->xTypeHW != USB_CDC_HW  && modH->xTypeHW != USART_HW_DMA )
 8001120:	687b      	ldr	r3, [r7, #4]
 8001122:	f893 3140 	ldrb.w	r3, [r3, #320]	; 0x140
 8001126:	2b01      	cmp	r3, #1
 8001128:	d00f      	beq.n	800114a <ModbusStart+0x32>
 800112a:	687b      	ldr	r3, [r7, #4]
 800112c:	f893 3140 	ldrb.w	r3, [r3, #320]	; 0x140
 8001130:	2b03      	cmp	r3, #3
 8001132:	d00a      	beq.n	800114a <ModbusStart+0x32>
 8001134:	687b      	ldr	r3, [r7, #4]
 8001136:	f893 3140 	ldrb.w	r3, [r3, #320]	; 0x140
 800113a:	2b02      	cmp	r3, #2
 800113c:	d005      	beq.n	800114a <ModbusStart+0x32>
 800113e:	687b      	ldr	r3, [r7, #4]
 8001140:	f893 3140 	ldrb.w	r3, [r3, #320]	; 0x140
 8001144:	2b04      	cmp	r3, #4
 8001146:	d000      	beq.n	800114a <ModbusStart+0x32>
	{

		while(1); //ERROR select the type of hardware
 8001148:	e7fe      	b.n	8001148 <ModbusStart+0x30>
	}

	if (modH->xTypeHW == USART_HW_DMA && ENABLE_USART_DMA == 0  )
 800114a:	687b      	ldr	r3, [r7, #4]
 800114c:	f893 3140 	ldrb.w	r3, [r3, #320]	; 0x140
 8001150:	2b04      	cmp	r3, #4
 8001152:	d100      	bne.n	8001156 <ModbusStart+0x3e>
	{
		while(1); //ERROR To use USART_HW_DMA you need to enable it in the ModbusConfig.h file
 8001154:	e7fe      	b.n	8001154 <ModbusStart+0x3c>
	}



	if (modH->xTypeHW == USART_HW || modH->xTypeHW ==  USART_HW_DMA )
 8001156:	687b      	ldr	r3, [r7, #4]
 8001158:	f893 3140 	ldrb.w	r3, [r3, #320]	; 0x140
 800115c:	2b01      	cmp	r3, #1
 800115e:	d004      	beq.n	800116a <ModbusStart+0x52>
 8001160:	687b      	ldr	r3, [r7, #4]
 8001162:	f893 3140 	ldrb.w	r3, [r3, #320]	; 0x140
 8001166:	2b04      	cmp	r3, #4
 8001168:	d13c      	bne.n	80011e4 <ModbusStart+0xcc>
	{

	      if (modH->EN_Port != NULL )
 800116a:	687b      	ldr	r3, [r7, #4]
 800116c:	68db      	ldr	r3, [r3, #12]
 800116e:	2b00      	cmp	r3, #0
 8001170:	d007      	beq.n	8001182 <ModbusStart+0x6a>
          {
              // return RS485 transceiver to transmit mode
          	HAL_GPIO_WritePin(modH->EN_Port, modH->EN_Pin, GPIO_PIN_RESET);
 8001172:	687b      	ldr	r3, [r7, #4]
 8001174:	68d8      	ldr	r0, [r3, #12]
 8001176:	687b      	ldr	r3, [r7, #4]
 8001178:	8a1b      	ldrh	r3, [r3, #16]
 800117a:	2200      	movs	r2, #0
 800117c:	4619      	mov	r1, r3
 800117e:	f002 fe3e 	bl	8003dfe <HAL_GPIO_WritePin>
          }

          if (modH->uModbusType == MB_SLAVE &&  modH->u16regs == NULL )
 8001182:	687b      	ldr	r3, [r7, #4]
 8001184:	781b      	ldrb	r3, [r3, #0]
 8001186:	2b03      	cmp	r3, #3
 8001188:	d105      	bne.n	8001196 <ModbusStart+0x7e>
 800118a:	687b      	ldr	r3, [r7, #4]
 800118c:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8001190:	2b00      	cmp	r3, #0
 8001192:	d100      	bne.n	8001196 <ModbusStart+0x7e>
          {
          	while(1); //ERROR define the DATA pointer shared through Modbus
 8001194:	e7fe      	b.n	8001194 <ModbusStart+0x7c>
          }

          //check that port is initialized
          while (HAL_UART_GetState(modH->port) != HAL_UART_STATE_READY)
 8001196:	bf00      	nop
 8001198:	687b      	ldr	r3, [r7, #4]
 800119a:	685b      	ldr	r3, [r3, #4]
 800119c:	4618      	mov	r0, r3
 800119e:	f004 fc20 	bl	80059e2 <HAL_UART_GetState>
 80011a2:	4603      	mov	r3, r0
 80011a4:	2b20      	cmp	r3, #32
 80011a6:	d1f7      	bne.n	8001198 <ModbusStart+0x80>
          }


#else
          // Receive data from serial port for Modbus using interrupt
          if(HAL_UART_Receive_IT(modH->port, &modH->dataRX, 1) != HAL_OK)
 80011a8:	687b      	ldr	r3, [r7, #4]
 80011aa:	6858      	ldr	r0, [r3, #4]
 80011ac:	687b      	ldr	r3, [r7, #4]
 80011ae:	33a6      	adds	r3, #166	; 0xa6
 80011b0:	2201      	movs	r2, #1
 80011b2:	4619      	mov	r1, r3
 80011b4:	f004 f9b3 	bl	800551e <HAL_UART_Receive_IT>
 80011b8:	4603      	mov	r3, r0
 80011ba:	2b00      	cmp	r3, #0
 80011bc:	d000      	beq.n	80011c0 <ModbusStart+0xa8>
          {
                while(1)
 80011be:	e7fe      	b.n	80011be <ModbusStart+0xa6>
                 }
          }

#endif

          if(modH->u8id !=0 && modH->uModbusType == MB_MASTER )
 80011c0:	687b      	ldr	r3, [r7, #4]
 80011c2:	7a1b      	ldrb	r3, [r3, #8]
 80011c4:	2b00      	cmp	r3, #0
 80011c6:	d004      	beq.n	80011d2 <ModbusStart+0xba>
 80011c8:	687b      	ldr	r3, [r7, #4]
 80011ca:	781b      	ldrb	r3, [r3, #0]
 80011cc:	2b04      	cmp	r3, #4
 80011ce:	d100      	bne.n	80011d2 <ModbusStart+0xba>
          {
        	  while(1)
 80011d0:	e7fe      	b.n	80011d0 <ModbusStart+0xb8>
        	     	  //error Master ID must be zero
        	  }

          }

          if(modH->u8id ==0 && modH->uModbusType == MB_SLAVE )
 80011d2:	687b      	ldr	r3, [r7, #4]
 80011d4:	7a1b      	ldrb	r3, [r3, #8]
 80011d6:	2b00      	cmp	r3, #0
 80011d8:	d104      	bne.n	80011e4 <ModbusStart+0xcc>
 80011da:	687b      	ldr	r3, [r7, #4]
 80011dc:	781b      	ldrb	r3, [r3, #0]
 80011de:	2b03      	cmp	r3, #3
 80011e0:	d100      	bne.n	80011e4 <ModbusStart+0xcc>
          {
             	  while(1)
 80011e2:	e7fe      	b.n	80011e2 <ModbusStart+0xca>


#endif


    modH->u8lastRec = modH->u8BufferSize = 0;
 80011e4:	687b      	ldr	r3, [r7, #4]
 80011e6:	2200      	movs	r2, #0
 80011e8:	f883 2093 	strb.w	r2, [r3, #147]	; 0x93
 80011ec:	687b      	ldr	r3, [r7, #4]
 80011ee:	f893 2093 	ldrb.w	r2, [r3, #147]	; 0x93
 80011f2:	687b      	ldr	r3, [r7, #4]
 80011f4:	f883 2094 	strb.w	r2, [r3, #148]	; 0x94
    modH->u16InCnt = modH->u16OutCnt = modH->u16errCnt = 0;
 80011f8:	687b      	ldr	r3, [r7, #4]
 80011fa:	2200      	movs	r2, #0
 80011fc:	f8a3 20a0 	strh.w	r2, [r3, #160]	; 0xa0
 8001200:	687b      	ldr	r3, [r7, #4]
 8001202:	f8b3 20a0 	ldrh.w	r2, [r3, #160]	; 0xa0
 8001206:	687b      	ldr	r3, [r7, #4]
 8001208:	f8a3 209e 	strh.w	r2, [r3, #158]	; 0x9e
 800120c:	687b      	ldr	r3, [r7, #4]
 800120e:	f8b3 209e 	ldrh.w	r2, [r3, #158]	; 0x9e
 8001212:	687b      	ldr	r3, [r7, #4]
 8001214:	f8a3 209c 	strh.w	r2, [r3, #156]	; 0x9c

}
 8001218:	bf00      	nop
 800121a:	3708      	adds	r7, #8
 800121c:	46bd      	mov	sp, r7
 800121e:	bd80      	pop	{r7, pc}

08001220 <vTimerCallbackT35>:
}
#endif


void vTimerCallbackT35(TimerHandle_t *pxTimer)
{
 8001220:	b580      	push	{r7, lr}
 8001222:	b086      	sub	sp, #24
 8001224:	af02      	add	r7, sp, #8
 8001226:	6078      	str	r0, [r7, #4]
	//Notify that a stream has just arrived
	int i;
	//TimerHandle_t aux;
	for(i = 0; i < numberHandlers; i++)
 8001228:	2300      	movs	r3, #0
 800122a:	60fb      	str	r3, [r7, #12]
 800122c:	e02a      	b.n	8001284 <vTimerCallbackT35+0x64>
	{

		if( (TimerHandle_t *)mHandlers[i]->xTimerT35 ==  pxTimer ){
 800122e:	4a1b      	ldr	r2, [pc, #108]	; (800129c <vTimerCallbackT35+0x7c>)
 8001230:	68fb      	ldr	r3, [r7, #12]
 8001232:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001236:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 800123a:	687a      	ldr	r2, [r7, #4]
 800123c:	429a      	cmp	r2, r3
 800123e:	d11e      	bne.n	800127e <vTimerCallbackT35+0x5e>
			if(mHandlers[i]->uModbusType == MB_MASTER)
 8001240:	4a16      	ldr	r2, [pc, #88]	; (800129c <vTimerCallbackT35+0x7c>)
 8001242:	68fb      	ldr	r3, [r7, #12]
 8001244:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001248:	781b      	ldrb	r3, [r3, #0]
 800124a:	2b04      	cmp	r3, #4
 800124c:	d10c      	bne.n	8001268 <vTimerCallbackT35+0x48>
			{
				xTimerStop(mHandlers[i]->xTimerTimeout,0);
 800124e:	4a13      	ldr	r2, [pc, #76]	; (800129c <vTimerCallbackT35+0x7c>)
 8001250:	68fb      	ldr	r3, [r7, #12]
 8001252:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001256:	f8d3 00b4 	ldr.w	r0, [r3, #180]	; 0xb4
 800125a:	2300      	movs	r3, #0
 800125c:	9300      	str	r3, [sp, #0]
 800125e:	2300      	movs	r3, #0
 8001260:	2200      	movs	r2, #0
 8001262:	2103      	movs	r1, #3
 8001264:	f007 faf6 	bl	8008854 <xTimerGenericCommand>
			}
			xTaskNotify(mHandlers[i]->myTaskModbusAHandle, 0, eSetValueWithOverwrite);
 8001268:	4a0c      	ldr	r2, [pc, #48]	; (800129c <vTimerCallbackT35+0x7c>)
 800126a:	68fb      	ldr	r3, [r7, #12]
 800126c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001270:	f8d3 00ac 	ldr.w	r0, [r3, #172]	; 0xac
 8001274:	2300      	movs	r3, #0
 8001276:	2203      	movs	r2, #3
 8001278:	2100      	movs	r1, #0
 800127a:	f007 f88d 	bl	8008398 <xTaskGenericNotify>
	for(i = 0; i < numberHandlers; i++)
 800127e:	68fb      	ldr	r3, [r7, #12]
 8001280:	3301      	adds	r3, #1
 8001282:	60fb      	str	r3, [r7, #12]
 8001284:	4b06      	ldr	r3, [pc, #24]	; (80012a0 <vTimerCallbackT35+0x80>)
 8001286:	781b      	ldrb	r3, [r3, #0]
 8001288:	461a      	mov	r2, r3
 800128a:	68fb      	ldr	r3, [r7, #12]
 800128c:	4293      	cmp	r3, r2
 800128e:	dbce      	blt.n	800122e <vTimerCallbackT35+0xe>
		}

	}
}
 8001290:	bf00      	nop
 8001292:	bf00      	nop
 8001294:	3710      	adds	r7, #16
 8001296:	46bd      	mov	sp, r7
 8001298:	bd80      	pop	{r7, pc}
 800129a:	bf00      	nop
 800129c:	2000002c 	.word	0x2000002c
 80012a0:	20000034 	.word	0x20000034

080012a4 <vTimerCallbackTimeout>:

void vTimerCallbackTimeout(TimerHandle_t *pxTimer)
{
 80012a4:	b580      	push	{r7, lr}
 80012a6:	b084      	sub	sp, #16
 80012a8:	af00      	add	r7, sp, #0
 80012aa:	6078      	str	r0, [r7, #4]
	//Notify that a stream has just arrived
	int i;
	//TimerHandle_t aux;
	for(i = 0; i < numberHandlers; i++)
 80012ac:	2300      	movs	r3, #0
 80012ae:	60fb      	str	r3, [r7, #12]
 80012b0:	e017      	b.n	80012e2 <vTimerCallbackTimeout+0x3e>
	{

		if( (TimerHandle_t *)mHandlers[i]->xTimerTimeout ==  pxTimer ){
 80012b2:	4a11      	ldr	r2, [pc, #68]	; (80012f8 <vTimerCallbackTimeout+0x54>)
 80012b4:	68fb      	ldr	r3, [r7, #12]
 80012b6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80012ba:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 80012be:	687a      	ldr	r2, [r7, #4]
 80012c0:	429a      	cmp	r2, r3
 80012c2:	d10b      	bne.n	80012dc <vTimerCallbackTimeout+0x38>
				xTaskNotify(mHandlers[i]->myTaskModbusAHandle, ERR_TIME_OUT, eSetValueWithOverwrite);
 80012c4:	4a0c      	ldr	r2, [pc, #48]	; (80012f8 <vTimerCallbackTimeout+0x54>)
 80012c6:	68fb      	ldr	r3, [r7, #12]
 80012c8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80012cc:	f8d3 00ac 	ldr.w	r0, [r3, #172]	; 0xac
 80012d0:	2300      	movs	r3, #0
 80012d2:	2203      	movs	r2, #3
 80012d4:	f06f 0107 	mvn.w	r1, #7
 80012d8:	f007 f85e 	bl	8008398 <xTaskGenericNotify>
	for(i = 0; i < numberHandlers; i++)
 80012dc:	68fb      	ldr	r3, [r7, #12]
 80012de:	3301      	adds	r3, #1
 80012e0:	60fb      	str	r3, [r7, #12]
 80012e2:	4b06      	ldr	r3, [pc, #24]	; (80012fc <vTimerCallbackTimeout+0x58>)
 80012e4:	781b      	ldrb	r3, [r3, #0]
 80012e6:	461a      	mov	r2, r3
 80012e8:	68fb      	ldr	r3, [r7, #12]
 80012ea:	4293      	cmp	r3, r2
 80012ec:	dbe1      	blt.n	80012b2 <vTimerCallbackTimeout+0xe>
		}

	}

}
 80012ee:	bf00      	nop
 80012f0:	bf00      	nop
 80012f2:	3710      	adds	r7, #16
 80012f4:	46bd      	mov	sp, r7
 80012f6:	bd80      	pop	{r7, pc}
 80012f8:	2000002c 	.word	0x2000002c
 80012fc:	20000034 	.word	0x20000034

08001300 <StartTaskModbusSlave>:
#endif



void StartTaskModbusSlave(void *argument)
{
 8001300:	b580      	push	{r7, lr}
 8001302:	b084      	sub	sp, #16
 8001304:	af00      	add	r7, sp, #0
 8001306:	6078      	str	r0, [r7, #4]

  modbusHandler_t *modH =  (modbusHandler_t *)argument;
 8001308:	687b      	ldr	r3, [r7, #4]
 800130a:	60fb      	str	r3, [r7, #12]
#endif

  for(;;)
  {

	modH->i8lastError = 0;
 800130c:	68fb      	ldr	r3, [r7, #12]
 800130e:	2200      	movs	r2, #0
 8001310:	749a      	strb	r2, [r3, #18]

	  }
#endif


   if(modH->xTypeHW == USART_HW || modH->xTypeHW == USART_HW_DMA)
 8001312:	68fb      	ldr	r3, [r7, #12]
 8001314:	f893 3140 	ldrb.w	r3, [r3, #320]	; 0x140
 8001318:	2b01      	cmp	r3, #1
 800131a:	d004      	beq.n	8001326 <StartTaskModbusSlave+0x26>
 800131c:	68fb      	ldr	r3, [r7, #12]
 800131e:	f893 3140 	ldrb.w	r3, [r3, #320]	; 0x140
 8001322:	2b04      	cmp	r3, #4
 8001324:	d117      	bne.n	8001356 <StartTaskModbusSlave+0x56>
   {

	  ulTaskNotifyTake(pdTRUE, portMAX_DELAY); /* Block until a Modbus Frame arrives */
 8001326:	f04f 31ff 	mov.w	r1, #4294967295
 800132a:	2001      	movs	r0, #1
 800132c:	f006 ffec 	bl	8008308 <ulTaskNotifyTake>

	  if (getRxBuffer(modH) == ERR_BUFF_OVERFLOW)
 8001330:	68f8      	ldr	r0, [r7, #12]
 8001332:	f000 fbed 	bl	8001b10 <getRxBuffer>
 8001336:	4603      	mov	r3, r0
 8001338:	f113 0f03 	cmn.w	r3, #3
 800133c:	d10b      	bne.n	8001356 <StartTaskModbusSlave+0x56>
	  {
	      modH->i8lastError = ERR_BUFF_OVERFLOW;
 800133e:	68fb      	ldr	r3, [r7, #12]
 8001340:	22fd      	movs	r2, #253	; 0xfd
 8001342:	749a      	strb	r2, [r3, #18]
	   	  modH->u16errCnt++;
 8001344:	68fb      	ldr	r3, [r7, #12]
 8001346:	f8b3 30a0 	ldrh.w	r3, [r3, #160]	; 0xa0
 800134a:	3301      	adds	r3, #1
 800134c:	b29a      	uxth	r2, r3
 800134e:	68fb      	ldr	r3, [r7, #12]
 8001350:	f8a3 20a0 	strh.w	r2, [r3, #160]	; 0xa0
		  continue;
 8001354:	e0a1      	b.n	800149a <StartTaskModbusSlave+0x19a>
	  }

   }

   if (modH->u8BufferSize < 7)
 8001356:	68fb      	ldr	r3, [r7, #12]
 8001358:	f893 3093 	ldrb.w	r3, [r3, #147]	; 0x93
 800135c:	2b06      	cmp	r3, #6
 800135e:	d80b      	bhi.n	8001378 <StartTaskModbusSlave+0x78>
   {
      //The size of the frame is invalid
      modH->i8lastError = ERR_BAD_SIZE;
 8001360:	68fb      	ldr	r3, [r7, #12]
 8001362:	22fa      	movs	r2, #250	; 0xfa
 8001364:	749a      	strb	r2, [r3, #18]
      modH->u16errCnt++;
 8001366:	68fb      	ldr	r3, [r7, #12]
 8001368:	f8b3 30a0 	ldrh.w	r3, [r3, #160]	; 0xa0
 800136c:	3301      	adds	r3, #1
 800136e:	b29a      	uxth	r2, r3
 8001370:	68fb      	ldr	r3, [r7, #12]
 8001372:	f8a3 20a0 	strh.w	r2, [r3, #160]	; 0xa0

	  continue;
 8001376:	e090      	b.n	800149a <StartTaskModbusSlave+0x19a>
    }


   // check slave id
    if ( modH->u8Buffer[ID] !=  modH->u8id)
 8001378:	68fb      	ldr	r3, [r7, #12]
 800137a:	7cda      	ldrb	r2, [r3, #19]
 800137c:	68fb      	ldr	r3, [r7, #12]
 800137e:	7a1b      	ldrb	r3, [r3, #8]
 8001380:	429a      	cmp	r2, r3
 8001382:	f040 8089 	bne.w	8001498 <StartTaskModbusSlave+0x198>
    	}
#endif
	 }

	  // validate message: CRC, FCT, address and size
    uint8_t u8exception = validateRequest(modH);
 8001386:	68f8      	ldr	r0, [r7, #12]
 8001388:	f000 fc0c 	bl	8001ba4 <validateRequest>
 800138c:	4603      	mov	r3, r0
 800138e:	72fb      	strb	r3, [r7, #11]
	if (u8exception > 0)
 8001390:	7afb      	ldrb	r3, [r7, #11]
 8001392:	2b00      	cmp	r3, #0
 8001394:	d00c      	beq.n	80013b0 <StartTaskModbusSlave+0xb0>
	{
	    if (u8exception != ERR_TIME_OUT)
		{
		    buildException( u8exception, modH);
 8001396:	7afb      	ldrb	r3, [r7, #11]
 8001398:	68f9      	ldr	r1, [r7, #12]
 800139a:	4618      	mov	r0, r3
 800139c:	f000 fda4 	bl	8001ee8 <buildException>
			sendTxBuffer(modH);
 80013a0:	68f8      	ldr	r0, [r7, #12]
 80013a2:	f000 fdbf 	bl	8001f24 <sendTxBuffer>
		}
		modH->i8lastError = u8exception;
 80013a6:	f997 200b 	ldrsb.w	r2, [r7, #11]
 80013aa:	68fb      	ldr	r3, [r7, #12]
 80013ac:	749a      	strb	r2, [r3, #18]
		//return u8exception

		continue;
 80013ae:	e074      	b.n	800149a <StartTaskModbusSlave+0x19a>
	 }

	 modH->i8lastError = 0;
 80013b0:	68fb      	ldr	r3, [r7, #12]
 80013b2:	2200      	movs	r2, #0
 80013b4:	749a      	strb	r2, [r3, #18]
	xSemaphoreTake(modH->ModBusSphrHandle , portMAX_DELAY); //before processing the message get the semaphore
 80013b6:	68fb      	ldr	r3, [r7, #12]
 80013b8:	f8d3 30b8 	ldr.w	r3, [r3, #184]	; 0xb8
 80013bc:	f04f 31ff 	mov.w	r1, #4294967295
 80013c0:	4618      	mov	r0, r3
 80013c2:	f005 fd07 	bl	8006dd4 <xQueueSemaphoreTake>

	 // process message
	 switch(modH->u8Buffer[ FUNC ] )
 80013c6:	68fb      	ldr	r3, [r7, #12]
 80013c8:	7d1b      	ldrb	r3, [r3, #20]
 80013ca:	3b01      	subs	r3, #1
 80013cc:	2b0f      	cmp	r3, #15
 80013ce:	d859      	bhi.n	8001484 <StartTaskModbusSlave+0x184>
 80013d0:	a201      	add	r2, pc, #4	; (adr r2, 80013d8 <StartTaskModbusSlave+0xd8>)
 80013d2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80013d6:	bf00      	nop
 80013d8:	08001419 	.word	0x08001419
 80013dc:	08001419 	.word	0x08001419
 80013e0:	0800142b 	.word	0x0800142b
 80013e4:	0800142b 	.word	0x0800142b
 80013e8:	0800143d 	.word	0x0800143d
 80013ec:	0800144f 	.word	0x0800144f
 80013f0:	08001485 	.word	0x08001485
 80013f4:	08001485 	.word	0x08001485
 80013f8:	08001485 	.word	0x08001485
 80013fc:	08001485 	.word	0x08001485
 8001400:	08001485 	.word	0x08001485
 8001404:	08001485 	.word	0x08001485
 8001408:	08001485 	.word	0x08001485
 800140c:	08001485 	.word	0x08001485
 8001410:	08001461 	.word	0x08001461
 8001414:	08001473 	.word	0x08001473
	 {
			case MB_FC_READ_COILS:
			case MB_FC_READ_DISCRETE_INPUT:
				modH->i8state = process_FC1(modH);
 8001418:	68f8      	ldr	r0, [r7, #12]
 800141a:	f000 fe09 	bl	8002030 <process_FC1>
 800141e:	4603      	mov	r3, r0
 8001420:	461a      	mov	r2, r3
 8001422:	68fb      	ldr	r3, [r7, #12]
 8001424:	f883 20a7 	strb.w	r2, [r3, #167]	; 0xa7
				break;
 8001428:	e02d      	b.n	8001486 <StartTaskModbusSlave+0x186>
			case MB_FC_READ_INPUT_REGISTER:
			case MB_FC_READ_REGISTERS :
				modH->i8state = process_FC3(modH);
 800142a:	68f8      	ldr	r0, [r7, #12]
 800142c:	f000 feb5 	bl	800219a <process_FC3>
 8001430:	4603      	mov	r3, r0
 8001432:	461a      	mov	r2, r3
 8001434:	68fb      	ldr	r3, [r7, #12]
 8001436:	f883 20a7 	strb.w	r2, [r3, #167]	; 0xa7
				break;
 800143a:	e024      	b.n	8001486 <StartTaskModbusSlave+0x186>
			case MB_FC_WRITE_COIL:
				modH->i8state = process_FC5(modH);
 800143c:	68f8      	ldr	r0, [r7, #12]
 800143e:	f000 ff17 	bl	8002270 <process_FC5>
 8001442:	4603      	mov	r3, r0
 8001444:	461a      	mov	r2, r3
 8001446:	68fb      	ldr	r3, [r7, #12]
 8001448:	f883 20a7 	strb.w	r2, [r3, #167]	; 0xa7
				break;
 800144c:	e01b      	b.n	8001486 <StartTaskModbusSlave+0x186>
			case MB_FC_WRITE_REGISTER :
				modH->i8state = process_FC6(modH);
 800144e:	68f8      	ldr	r0, [r7, #12]
 8001450:	f000 ff67 	bl	8002322 <process_FC6>
 8001454:	4603      	mov	r3, r0
 8001456:	461a      	mov	r2, r3
 8001458:	68fb      	ldr	r3, [r7, #12]
 800145a:	f883 20a7 	strb.w	r2, [r3, #167]	; 0xa7
				break;
 800145e:	e012      	b.n	8001486 <StartTaskModbusSlave+0x186>
			case MB_FC_WRITE_MULTIPLE_COILS:
				modH->i8state = process_FC15(modH);
 8001460:	68f8      	ldr	r0, [r7, #12]
 8001462:	f000 ff90 	bl	8002386 <process_FC15>
 8001466:	4603      	mov	r3, r0
 8001468:	461a      	mov	r2, r3
 800146a:	68fb      	ldr	r3, [r7, #12]
 800146c:	f883 20a7 	strb.w	r2, [r3, #167]	; 0xa7
				break;
 8001470:	e009      	b.n	8001486 <StartTaskModbusSlave+0x186>
			case MB_FC_WRITE_MULTIPLE_REGISTERS :
				modH->i8state = process_FC16(modH);
 8001472:	68f8      	ldr	r0, [r7, #12]
 8001474:	f001 f815 	bl	80024a2 <process_FC16>
 8001478:	4603      	mov	r3, r0
 800147a:	461a      	mov	r2, r3
 800147c:	68fb      	ldr	r3, [r7, #12]
 800147e:	f883 20a7 	strb.w	r2, [r3, #167]	; 0xa7
				break;
 8001482:	e000      	b.n	8001486 <StartTaskModbusSlave+0x186>
			default:
				break;
 8001484:	bf00      	nop
	 }


	 xSemaphoreGive(modH->ModBusSphrHandle); //Release the semaphore
 8001486:	68fb      	ldr	r3, [r7, #12]
 8001488:	f8d3 00b8 	ldr.w	r0, [r3, #184]	; 0xb8
 800148c:	2300      	movs	r3, #0
 800148e:	2200      	movs	r2, #0
 8001490:	2100      	movs	r1, #0
 8001492:	f005 fa29 	bl	80068e8 <xQueueGenericSend>

	 continue;
 8001496:	e000      	b.n	800149a <StartTaskModbusSlave+0x19a>
    	continue; // continue this is not for us
 8001498:	bf00      	nop
  {
 800149a:	e737      	b.n	800130c <StartTaskModbusSlave+0xc>

0800149c <SendQuery>:
 * @param modH  modbus handler
 * @param modbus_t  modbus telegram structure (id, fct, ...)
 * @ingroup loop
 */
int8_t SendQuery(modbusHandler_t *modH ,  modbus_t telegram )
{
 800149c:	b084      	sub	sp, #16
 800149e:	b580      	push	{r7, lr}
 80014a0:	b084      	sub	sp, #16
 80014a2:	af00      	add	r7, sp, #0
 80014a4:	6078      	str	r0, [r7, #4]
 80014a6:	f107 001c 	add.w	r0, r7, #28
 80014aa:	e880 000e 	stmia.w	r0, {r1, r2, r3}


	uint8_t u8regsno, u8bytesno;
	uint8_t  error = 0;
 80014ae:	2300      	movs	r3, #0
 80014b0:	73bb      	strb	r3, [r7, #14]
	xSemaphoreTake(modH->ModBusSphrHandle , portMAX_DELAY); //before processing the message get the semaphore
 80014b2:	687b      	ldr	r3, [r7, #4]
 80014b4:	f8d3 30b8 	ldr.w	r3, [r3, #184]	; 0xb8
 80014b8:	f04f 31ff 	mov.w	r1, #4294967295
 80014bc:	4618      	mov	r0, r3
 80014be:	f005 fc89 	bl	8006dd4 <xQueueSemaphoreTake>

	if (modH->u8id!=0) error = ERR_NOT_MASTER;
 80014c2:	687b      	ldr	r3, [r7, #4]
 80014c4:	7a1b      	ldrb	r3, [r3, #8]
 80014c6:	2b00      	cmp	r3, #0
 80014c8:	d001      	beq.n	80014ce <SendQuery+0x32>
 80014ca:	23ff      	movs	r3, #255	; 0xff
 80014cc:	73bb      	strb	r3, [r7, #14]
	if (modH->i8state != COM_IDLE) error = ERR_POLLING ;
 80014ce:	687b      	ldr	r3, [r7, #4]
 80014d0:	f993 30a7 	ldrsb.w	r3, [r3, #167]	; 0xa7
 80014d4:	2b00      	cmp	r3, #0
 80014d6:	d001      	beq.n	80014dc <SendQuery+0x40>
 80014d8:	23fe      	movs	r3, #254	; 0xfe
 80014da:	73bb      	strb	r3, [r7, #14]
	if ((telegram.u8id==0) || (telegram.u8id>247)) error = ERR_BAD_SLAVE_ID;
 80014dc:	7f3b      	ldrb	r3, [r7, #28]
 80014de:	2b00      	cmp	r3, #0
 80014e0:	d002      	beq.n	80014e8 <SendQuery+0x4c>
 80014e2:	7f3b      	ldrb	r3, [r7, #28]
 80014e4:	2bf7      	cmp	r3, #247	; 0xf7
 80014e6:	d901      	bls.n	80014ec <SendQuery+0x50>
 80014e8:	23f7      	movs	r3, #247	; 0xf7
 80014ea:	73bb      	strb	r3, [r7, #14]


	if(error)
 80014ec:	7bbb      	ldrb	r3, [r7, #14]
 80014ee:	2b00      	cmp	r3, #0
 80014f0:	d00e      	beq.n	8001510 <SendQuery+0x74>
	{
		 modH->i8lastError = error;
 80014f2:	f997 200e 	ldrsb.w	r2, [r7, #14]
 80014f6:	687b      	ldr	r3, [r7, #4]
 80014f8:	749a      	strb	r2, [r3, #18]
		 xSemaphoreGive(modH->ModBusSphrHandle);
 80014fa:	687b      	ldr	r3, [r7, #4]
 80014fc:	f8d3 00b8 	ldr.w	r0, [r3, #184]	; 0xb8
 8001500:	2300      	movs	r3, #0
 8001502:	2200      	movs	r2, #0
 8001504:	2100      	movs	r1, #0
 8001506:	f005 f9ef 	bl	80068e8 <xQueueGenericSend>
		 return error;
 800150a:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800150e:	e129      	b.n	8001764 <SendQuery+0x2c8>
	}


	modH->u16regs = telegram.u16reg;
 8001510:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001512:	687b      	ldr	r3, [r7, #4]
 8001514:	f8c3 2098 	str.w	r2, [r3, #152]	; 0x98

	// telegram header
	modH->u8Buffer[ ID ]         = telegram.u8id;
 8001518:	7f3a      	ldrb	r2, [r7, #28]
 800151a:	687b      	ldr	r3, [r7, #4]
 800151c:	74da      	strb	r2, [r3, #19]
	modH->u8Buffer[ FUNC ]       = telegram.u8fct;
 800151e:	7f7a      	ldrb	r2, [r7, #29]
 8001520:	687b      	ldr	r3, [r7, #4]
 8001522:	751a      	strb	r2, [r3, #20]
	modH->u8Buffer[ ADD_HI ]     = highByte(telegram.u16RegAdd );
 8001524:	8bfb      	ldrh	r3, [r7, #30]
 8001526:	0a1b      	lsrs	r3, r3, #8
 8001528:	b29b      	uxth	r3, r3
 800152a:	b2da      	uxtb	r2, r3
 800152c:	687b      	ldr	r3, [r7, #4]
 800152e:	755a      	strb	r2, [r3, #21]
	modH->u8Buffer[ ADD_LO ]     = lowByte( telegram.u16RegAdd );
 8001530:	8bfb      	ldrh	r3, [r7, #30]
 8001532:	b2da      	uxtb	r2, r3
 8001534:	687b      	ldr	r3, [r7, #4]
 8001536:	759a      	strb	r2, [r3, #22]

	switch( telegram.u8fct )
 8001538:	7f7b      	ldrb	r3, [r7, #29]
 800153a:	3b01      	subs	r3, #1
 800153c:	2b0f      	cmp	r3, #15
 800153e:	f200 80fe 	bhi.w	800173e <SendQuery+0x2a2>
 8001542:	a201      	add	r2, pc, #4	; (adr r2, 8001548 <SendQuery+0xac>)
 8001544:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001548:	08001589 	.word	0x08001589
 800154c:	08001589 	.word	0x08001589
 8001550:	08001589 	.word	0x08001589
 8001554:	08001589 	.word	0x08001589
 8001558:	080015a7 	.word	0x080015a7
 800155c:	080015c9 	.word	0x080015c9
 8001560:	0800173f 	.word	0x0800173f
 8001564:	0800173f 	.word	0x0800173f
 8001568:	0800173f 	.word	0x0800173f
 800156c:	0800173f 	.word	0x0800173f
 8001570:	0800173f 	.word	0x0800173f
 8001574:	0800173f 	.word	0x0800173f
 8001578:	0800173f 	.word	0x0800173f
 800157c:	0800173f 	.word	0x0800173f
 8001580:	080015eb 	.word	0x080015eb
 8001584:	080016a9 	.word	0x080016a9
	{
	case MB_FC_READ_COILS:
	case MB_FC_READ_DISCRETE_INPUT:
	case MB_FC_READ_REGISTERS:
	case MB_FC_READ_INPUT_REGISTER:
	    modH->u8Buffer[ NB_HI ]      = highByte(telegram.u16CoilsNo );
 8001588:	8c3b      	ldrh	r3, [r7, #32]
 800158a:	0a1b      	lsrs	r3, r3, #8
 800158c:	b29b      	uxth	r3, r3
 800158e:	b2da      	uxtb	r2, r3
 8001590:	687b      	ldr	r3, [r7, #4]
 8001592:	75da      	strb	r2, [r3, #23]
	    modH->u8Buffer[ NB_LO ]      = lowByte( telegram.u16CoilsNo );
 8001594:	8c3b      	ldrh	r3, [r7, #32]
 8001596:	b2da      	uxtb	r2, r3
 8001598:	687b      	ldr	r3, [r7, #4]
 800159a:	761a      	strb	r2, [r3, #24]
	    modH->u8BufferSize = 6;
 800159c:	687b      	ldr	r3, [r7, #4]
 800159e:	2206      	movs	r2, #6
 80015a0:	f883 2093 	strb.w	r2, [r3, #147]	; 0x93
	    break;
 80015a4:	e0cb      	b.n	800173e <SendQuery+0x2a2>
	case MB_FC_WRITE_COIL:
	    modH->u8Buffer[ NB_HI ]      = (( telegram.u16reg[0]> 0) ? 0xff : 0);
 80015a6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80015a8:	881b      	ldrh	r3, [r3, #0]
 80015aa:	2b00      	cmp	r3, #0
 80015ac:	d001      	beq.n	80015b2 <SendQuery+0x116>
 80015ae:	22ff      	movs	r2, #255	; 0xff
 80015b0:	e000      	b.n	80015b4 <SendQuery+0x118>
 80015b2:	2200      	movs	r2, #0
 80015b4:	687b      	ldr	r3, [r7, #4]
 80015b6:	75da      	strb	r2, [r3, #23]
	    modH->u8Buffer[ NB_LO ]      = 0;
 80015b8:	687b      	ldr	r3, [r7, #4]
 80015ba:	2200      	movs	r2, #0
 80015bc:	761a      	strb	r2, [r3, #24]
	    modH->u8BufferSize = 6;
 80015be:	687b      	ldr	r3, [r7, #4]
 80015c0:	2206      	movs	r2, #6
 80015c2:	f883 2093 	strb.w	r2, [r3, #147]	; 0x93
	    break;
 80015c6:	e0ba      	b.n	800173e <SendQuery+0x2a2>
	case MB_FC_WRITE_REGISTER:
	    modH->u8Buffer[ NB_HI ]      = highByte( telegram.u16reg[0]);
 80015c8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80015ca:	881b      	ldrh	r3, [r3, #0]
 80015cc:	0a1b      	lsrs	r3, r3, #8
 80015ce:	b29b      	uxth	r3, r3
 80015d0:	b2da      	uxtb	r2, r3
 80015d2:	687b      	ldr	r3, [r7, #4]
 80015d4:	75da      	strb	r2, [r3, #23]
	    modH->u8Buffer[ NB_LO ]      = lowByte( telegram.u16reg[0]);
 80015d6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80015d8:	881b      	ldrh	r3, [r3, #0]
 80015da:	b2da      	uxtb	r2, r3
 80015dc:	687b      	ldr	r3, [r7, #4]
 80015de:	761a      	strb	r2, [r3, #24]
	    modH->u8BufferSize = 6;
 80015e0:	687b      	ldr	r3, [r7, #4]
 80015e2:	2206      	movs	r2, #6
 80015e4:	f883 2093 	strb.w	r2, [r3, #147]	; 0x93
	    break;
 80015e8:	e0a9      	b.n	800173e <SendQuery+0x2a2>
	case MB_FC_WRITE_MULTIPLE_COILS: // TODO: implement "sending coils"
	    u8regsno = telegram.u16CoilsNo / 16;
 80015ea:	8c3b      	ldrh	r3, [r7, #32]
 80015ec:	091b      	lsrs	r3, r3, #4
 80015ee:	b29b      	uxth	r3, r3
 80015f0:	727b      	strb	r3, [r7, #9]
	    u8bytesno = u8regsno * 2;
 80015f2:	7a7b      	ldrb	r3, [r7, #9]
 80015f4:	005b      	lsls	r3, r3, #1
 80015f6:	73fb      	strb	r3, [r7, #15]
	    if ((telegram.u16CoilsNo % 16) != 0)
 80015f8:	8c3b      	ldrh	r3, [r7, #32]
 80015fa:	f003 030f 	and.w	r3, r3, #15
 80015fe:	b29b      	uxth	r3, r3
 8001600:	2b00      	cmp	r3, #0
 8001602:	d005      	beq.n	8001610 <SendQuery+0x174>
	    {
	        u8bytesno++;
 8001604:	7bfb      	ldrb	r3, [r7, #15]
 8001606:	3301      	adds	r3, #1
 8001608:	73fb      	strb	r3, [r7, #15]
	        u8regsno++;
 800160a:	7a7b      	ldrb	r3, [r7, #9]
 800160c:	3301      	adds	r3, #1
 800160e:	727b      	strb	r3, [r7, #9]
	    }

	    modH->u8Buffer[ NB_HI ]      = highByte(telegram.u16CoilsNo );
 8001610:	8c3b      	ldrh	r3, [r7, #32]
 8001612:	0a1b      	lsrs	r3, r3, #8
 8001614:	b29b      	uxth	r3, r3
 8001616:	b2da      	uxtb	r2, r3
 8001618:	687b      	ldr	r3, [r7, #4]
 800161a:	75da      	strb	r2, [r3, #23]
	    modH->u8Buffer[ NB_LO ]      = lowByte( telegram.u16CoilsNo );
 800161c:	8c3b      	ldrh	r3, [r7, #32]
 800161e:	b2da      	uxtb	r2, r3
 8001620:	687b      	ldr	r3, [r7, #4]
 8001622:	761a      	strb	r2, [r3, #24]
	    modH->u8Buffer[ BYTE_CNT ]    = u8bytesno;
 8001624:	687b      	ldr	r3, [r7, #4]
 8001626:	7bfa      	ldrb	r2, [r7, #15]
 8001628:	765a      	strb	r2, [r3, #25]
	    modH->u8BufferSize = 7;
 800162a:	687b      	ldr	r3, [r7, #4]
 800162c:	2207      	movs	r2, #7
 800162e:	f883 2093 	strb.w	r2, [r3, #147]	; 0x93

	    for (uint16_t i = 0; i < u8bytesno; i++)
 8001632:	2300      	movs	r3, #0
 8001634:	81bb      	strh	r3, [r7, #12]
 8001636:	e031      	b.n	800169c <SendQuery+0x200>
	    {
	        if(i%2)
 8001638:	89bb      	ldrh	r3, [r7, #12]
 800163a:	f003 0301 	and.w	r3, r3, #1
 800163e:	b29b      	uxth	r3, r3
 8001640:	2b00      	cmp	r3, #0
 8001642:	d00f      	beq.n	8001664 <SendQuery+0x1c8>
	        {
	        	modH->u8Buffer[ modH->u8BufferSize ] = lowByte( telegram.u16reg[ i/2 ] );
 8001644:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001646:	89bb      	ldrh	r3, [r7, #12]
 8001648:	085b      	lsrs	r3, r3, #1
 800164a:	b29b      	uxth	r3, r3
 800164c:	005b      	lsls	r3, r3, #1
 800164e:	4413      	add	r3, r2
 8001650:	881a      	ldrh	r2, [r3, #0]
 8001652:	687b      	ldr	r3, [r7, #4]
 8001654:	f893 3093 	ldrb.w	r3, [r3, #147]	; 0x93
 8001658:	4619      	mov	r1, r3
 800165a:	b2d2      	uxtb	r2, r2
 800165c:	687b      	ldr	r3, [r7, #4]
 800165e:	440b      	add	r3, r1
 8001660:	74da      	strb	r2, [r3, #19]
 8001662:	e010      	b.n	8001686 <SendQuery+0x1ea>
	        }
	        else
	        {
	        	modH->u8Buffer[  modH->u8BufferSize ] = highByte( telegram.u16reg[ i/2 ] );
 8001664:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001666:	89bb      	ldrh	r3, [r7, #12]
 8001668:	085b      	lsrs	r3, r3, #1
 800166a:	b29b      	uxth	r3, r3
 800166c:	005b      	lsls	r3, r3, #1
 800166e:	4413      	add	r3, r2
 8001670:	881b      	ldrh	r3, [r3, #0]
 8001672:	0a1b      	lsrs	r3, r3, #8
 8001674:	b29a      	uxth	r2, r3
 8001676:	687b      	ldr	r3, [r7, #4]
 8001678:	f893 3093 	ldrb.w	r3, [r3, #147]	; 0x93
 800167c:	4619      	mov	r1, r3
 800167e:	b2d2      	uxtb	r2, r2
 8001680:	687b      	ldr	r3, [r7, #4]
 8001682:	440b      	add	r3, r1
 8001684:	74da      	strb	r2, [r3, #19]

	        }
	        modH->u8BufferSize++;
 8001686:	687b      	ldr	r3, [r7, #4]
 8001688:	f893 3093 	ldrb.w	r3, [r3, #147]	; 0x93
 800168c:	3301      	adds	r3, #1
 800168e:	b2da      	uxtb	r2, r3
 8001690:	687b      	ldr	r3, [r7, #4]
 8001692:	f883 2093 	strb.w	r2, [r3, #147]	; 0x93
	    for (uint16_t i = 0; i < u8bytesno; i++)
 8001696:	89bb      	ldrh	r3, [r7, #12]
 8001698:	3301      	adds	r3, #1
 800169a:	81bb      	strh	r3, [r7, #12]
 800169c:	7bfb      	ldrb	r3, [r7, #15]
 800169e:	b29b      	uxth	r3, r3
 80016a0:	89ba      	ldrh	r2, [r7, #12]
 80016a2:	429a      	cmp	r2, r3
 80016a4:	d3c8      	bcc.n	8001638 <SendQuery+0x19c>
	    }
	    break;
 80016a6:	e04a      	b.n	800173e <SendQuery+0x2a2>

	case MB_FC_WRITE_MULTIPLE_REGISTERS:
	    modH->u8Buffer[ NB_HI ]      = highByte(telegram.u16CoilsNo );
 80016a8:	8c3b      	ldrh	r3, [r7, #32]
 80016aa:	0a1b      	lsrs	r3, r3, #8
 80016ac:	b29b      	uxth	r3, r3
 80016ae:	b2da      	uxtb	r2, r3
 80016b0:	687b      	ldr	r3, [r7, #4]
 80016b2:	75da      	strb	r2, [r3, #23]
	    modH->u8Buffer[ NB_LO ]      = lowByte( telegram.u16CoilsNo );
 80016b4:	8c3b      	ldrh	r3, [r7, #32]
 80016b6:	b2da      	uxtb	r2, r3
 80016b8:	687b      	ldr	r3, [r7, #4]
 80016ba:	761a      	strb	r2, [r3, #24]
	    modH->u8Buffer[ BYTE_CNT ]    = (uint8_t) ( telegram.u16CoilsNo * 2 );
 80016bc:	8c3b      	ldrh	r3, [r7, #32]
 80016be:	b2db      	uxtb	r3, r3
 80016c0:	005b      	lsls	r3, r3, #1
 80016c2:	b2da      	uxtb	r2, r3
 80016c4:	687b      	ldr	r3, [r7, #4]
 80016c6:	765a      	strb	r2, [r3, #25]
	    modH->u8BufferSize = 7;
 80016c8:	687b      	ldr	r3, [r7, #4]
 80016ca:	2207      	movs	r2, #7
 80016cc:	f883 2093 	strb.w	r2, [r3, #147]	; 0x93

	    for (uint16_t i=0; i< telegram.u16CoilsNo; i++)
 80016d0:	2300      	movs	r3, #0
 80016d2:	817b      	strh	r3, [r7, #10]
 80016d4:	e02e      	b.n	8001734 <SendQuery+0x298>
	    {

	        modH->u8Buffer[  modH->u8BufferSize ] = highByte(  telegram.u16reg[ i ] );
 80016d6:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80016d8:	897b      	ldrh	r3, [r7, #10]
 80016da:	005b      	lsls	r3, r3, #1
 80016dc:	4413      	add	r3, r2
 80016de:	881b      	ldrh	r3, [r3, #0]
 80016e0:	0a1b      	lsrs	r3, r3, #8
 80016e2:	b29a      	uxth	r2, r3
 80016e4:	687b      	ldr	r3, [r7, #4]
 80016e6:	f893 3093 	ldrb.w	r3, [r3, #147]	; 0x93
 80016ea:	4619      	mov	r1, r3
 80016ec:	b2d2      	uxtb	r2, r2
 80016ee:	687b      	ldr	r3, [r7, #4]
 80016f0:	440b      	add	r3, r1
 80016f2:	74da      	strb	r2, [r3, #19]
	        modH->u8BufferSize++;
 80016f4:	687b      	ldr	r3, [r7, #4]
 80016f6:	f893 3093 	ldrb.w	r3, [r3, #147]	; 0x93
 80016fa:	3301      	adds	r3, #1
 80016fc:	b2da      	uxtb	r2, r3
 80016fe:	687b      	ldr	r3, [r7, #4]
 8001700:	f883 2093 	strb.w	r2, [r3, #147]	; 0x93
	        modH->u8Buffer[  modH->u8BufferSize ] = lowByte( telegram.u16reg[ i ] );
 8001704:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001706:	897b      	ldrh	r3, [r7, #10]
 8001708:	005b      	lsls	r3, r3, #1
 800170a:	4413      	add	r3, r2
 800170c:	881a      	ldrh	r2, [r3, #0]
 800170e:	687b      	ldr	r3, [r7, #4]
 8001710:	f893 3093 	ldrb.w	r3, [r3, #147]	; 0x93
 8001714:	4619      	mov	r1, r3
 8001716:	b2d2      	uxtb	r2, r2
 8001718:	687b      	ldr	r3, [r7, #4]
 800171a:	440b      	add	r3, r1
 800171c:	74da      	strb	r2, [r3, #19]
	        modH->u8BufferSize++;
 800171e:	687b      	ldr	r3, [r7, #4]
 8001720:	f893 3093 	ldrb.w	r3, [r3, #147]	; 0x93
 8001724:	3301      	adds	r3, #1
 8001726:	b2da      	uxtb	r2, r3
 8001728:	687b      	ldr	r3, [r7, #4]
 800172a:	f883 2093 	strb.w	r2, [r3, #147]	; 0x93
	    for (uint16_t i=0; i< telegram.u16CoilsNo; i++)
 800172e:	897b      	ldrh	r3, [r7, #10]
 8001730:	3301      	adds	r3, #1
 8001732:	817b      	strh	r3, [r7, #10]
 8001734:	8c3b      	ldrh	r3, [r7, #32]
 8001736:	897a      	ldrh	r2, [r7, #10]
 8001738:	429a      	cmp	r2, r3
 800173a:	d3cc      	bcc.n	80016d6 <SendQuery+0x23a>
	    }
	    break;
 800173c:	bf00      	nop
	}


	sendTxBuffer(modH);
 800173e:	6878      	ldr	r0, [r7, #4]
 8001740:	f000 fbf0 	bl	8001f24 <sendTxBuffer>

	xSemaphoreGive(modH->ModBusSphrHandle);
 8001744:	687b      	ldr	r3, [r7, #4]
 8001746:	f8d3 00b8 	ldr.w	r0, [r3, #184]	; 0xb8
 800174a:	2300      	movs	r3, #0
 800174c:	2200      	movs	r2, #0
 800174e:	2100      	movs	r1, #0
 8001750:	f005 f8ca 	bl	80068e8 <xQueueGenericSend>

	modH->i8state = COM_WAITING;
 8001754:	687b      	ldr	r3, [r7, #4]
 8001756:	2201      	movs	r2, #1
 8001758:	f883 20a7 	strb.w	r2, [r3, #167]	; 0xa7
	modH->i8lastError = 0;
 800175c:	687b      	ldr	r3, [r7, #4]
 800175e:	2200      	movs	r2, #0
 8001760:	749a      	strb	r2, [r3, #18]
	return 0;
 8001762:	2300      	movs	r3, #0


}
 8001764:	4618      	mov	r0, r3
 8001766:	3710      	adds	r7, #16
 8001768:	46bd      	mov	sp, r7
 800176a:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 800176e:	b004      	add	sp, #16
 8001770:	4770      	bx	lr
 8001772:	bf00      	nop

08001774 <StartTaskModbusMaster>:
}

#endif

void StartTaskModbusMaster(void *argument)
{
 8001774:	b580      	push	{r7, lr}
 8001776:	b08c      	sub	sp, #48	; 0x30
 8001778:	af02      	add	r7, sp, #8
 800177a:	6078      	str	r0, [r7, #4]

  modbusHandler_t *modH =  (modbusHandler_t *)argument;
 800177c:	687b      	ldr	r3, [r7, #4]
 800177e:	627b      	str	r3, [r7, #36]	; 0x24


  for(;;)
  {
	  /*Wait indefinitely for a telegram to send */
	  xQueueReceive(modH->QueueTelegramHandle, &telegram, portMAX_DELAY);
 8001780:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001782:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 8001786:	f107 010c 	add.w	r1, r7, #12
 800178a:	f04f 32ff 	mov.w	r2, #4294967295
 800178e:	4618      	mov	r0, r3
 8001790:	f005 fa40 	bl	8006c14 <xQueueReceive>
       /* Block until a Modbus Frame arrives or query timeouts*/
   	   ulNotificationValue = ulTaskNotifyTake(pdTRUE, portMAX_DELAY);
     }
#else
     // This is the case for implementations with only USART support
     SendQuery(modH, telegram);
 8001794:	69bb      	ldr	r3, [r7, #24]
 8001796:	9300      	str	r3, [sp, #0]
 8001798:	f107 030c 	add.w	r3, r7, #12
 800179c:	cb0e      	ldmia	r3, {r1, r2, r3}
 800179e:	6a78      	ldr	r0, [r7, #36]	; 0x24
 80017a0:	f7ff fe7c 	bl	800149c <SendQuery>
     /* Block indefinitely until a Modbus Frame arrives or query timeouts*/
     ulNotificationValue = ulTaskNotifyTake(pdTRUE, portMAX_DELAY);
 80017a4:	f04f 31ff 	mov.w	r1, #4294967295
 80017a8:	2001      	movs	r0, #1
 80017aa:	f006 fdad 	bl	8008308 <ulTaskNotifyTake>
 80017ae:	6238      	str	r0, [r7, #32]

#endif

	  // notify the task the request timeout
      modH->i8lastError = 0;
 80017b0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80017b2:	2200      	movs	r2, #0
 80017b4:	749a      	strb	r2, [r3, #18]
      if(ulNotificationValue)
 80017b6:	6a3b      	ldr	r3, [r7, #32]
 80017b8:	2b00      	cmp	r3, #0
 80017ba:	d018      	beq.n	80017ee <StartTaskModbusMaster+0x7a>
      {
    	  modH->i8state = COM_IDLE;
 80017bc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80017be:	2200      	movs	r2, #0
 80017c0:	f883 20a7 	strb.w	r2, [r3, #167]	; 0xa7
    	  modH->i8lastError = ERR_TIME_OUT;
 80017c4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80017c6:	22f8      	movs	r2, #248	; 0xf8
 80017c8:	749a      	strb	r2, [r3, #18]
    	  modH->u16errCnt++;
 80017ca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80017cc:	f8b3 30a0 	ldrh.w	r3, [r3, #160]	; 0xa0
 80017d0:	3301      	adds	r3, #1
 80017d2:	b29a      	uxth	r2, r3
 80017d4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80017d6:	f8a3 20a0 	strh.w	r2, [r3, #160]	; 0xa0
    	  xTaskNotify((TaskHandle_t)telegram.u32CurrentTask, modH->i8lastError, eSetValueWithOverwrite);
 80017da:	69b8      	ldr	r0, [r7, #24]
 80017dc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80017de:	f993 3012 	ldrsb.w	r3, [r3, #18]
 80017e2:	4619      	mov	r1, r3
 80017e4:	2300      	movs	r3, #0
 80017e6:	2203      	movs	r2, #3
 80017e8:	f006 fdd6 	bl	8008398 <xTaskGenericNotify>
    	  continue;
 80017ec:	e09a      	b.n	8001924 <StartTaskModbusMaster+0x1b0>
      {
    	  getRxBuffer(modH);
      }

#else
      getRxBuffer(modH);
 80017ee:	6a78      	ldr	r0, [r7, #36]	; 0x24
 80017f0:	f000 f98e 	bl	8001b10 <getRxBuffer>
#endif



	  if ( modH->u8BufferSize < 6){
 80017f4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80017f6:	f893 3093 	ldrb.w	r3, [r3, #147]	; 0x93
 80017fa:	2b05      	cmp	r3, #5
 80017fc:	d818      	bhi.n	8001830 <StartTaskModbusMaster+0xbc>

		  modH->i8state = COM_IDLE;
 80017fe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001800:	2200      	movs	r2, #0
 8001802:	f883 20a7 	strb.w	r2, [r3, #167]	; 0xa7
		  modH->i8lastError = ERR_BAD_SIZE;
 8001806:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001808:	22fa      	movs	r2, #250	; 0xfa
 800180a:	749a      	strb	r2, [r3, #18]
		  modH->u16errCnt++;
 800180c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800180e:	f8b3 30a0 	ldrh.w	r3, [r3, #160]	; 0xa0
 8001812:	3301      	adds	r3, #1
 8001814:	b29a      	uxth	r2, r3
 8001816:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001818:	f8a3 20a0 	strh.w	r2, [r3, #160]	; 0xa0
		  xTaskNotify((TaskHandle_t)telegram.u32CurrentTask, modH->i8lastError, eSetValueWithOverwrite);
 800181c:	69b8      	ldr	r0, [r7, #24]
 800181e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001820:	f993 3012 	ldrsb.w	r3, [r3, #18]
 8001824:	4619      	mov	r1, r3
 8001826:	2300      	movs	r3, #0
 8001828:	2203      	movs	r2, #3
 800182a:	f006 fdb5 	bl	8008398 <xTaskGenericNotify>
		  continue;
 800182e:	e079      	b.n	8001924 <StartTaskModbusMaster+0x1b0>
	  }

	  xTimerStop(modH->xTimerTimeout,0); // cancel timeout timer
 8001830:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001832:	f8d3 00b4 	ldr.w	r0, [r3, #180]	; 0xb4
 8001836:	2300      	movs	r3, #0
 8001838:	9300      	str	r3, [sp, #0]
 800183a:	2300      	movs	r3, #0
 800183c:	2200      	movs	r2, #0
 800183e:	2103      	movs	r1, #3
 8001840:	f007 f808 	bl	8008854 <xTimerGenericCommand>


	  // validate message: id, CRC, FCT, exception
	  int8_t u8exception = validateAnswer(modH);
 8001844:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8001846:	f000 f8f5 	bl	8001a34 <validateAnswer>
 800184a:	4603      	mov	r3, r0
 800184c:	77fb      	strb	r3, [r7, #31]
	  if (u8exception != 0)
 800184e:	f997 301f 	ldrsb.w	r3, [r7, #31]
 8001852:	2b00      	cmp	r3, #0
 8001854:	d010      	beq.n	8001878 <StartTaskModbusMaster+0x104>
	  {
		 modH->i8state = COM_IDLE;
 8001856:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001858:	2200      	movs	r2, #0
 800185a:	f883 20a7 	strb.w	r2, [r3, #167]	; 0xa7
         modH->i8lastError = u8exception;
 800185e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001860:	7ffa      	ldrb	r2, [r7, #31]
 8001862:	749a      	strb	r2, [r3, #18]
		 xTaskNotify((TaskHandle_t)telegram.u32CurrentTask, modH->i8lastError, eSetValueWithOverwrite);
 8001864:	69b8      	ldr	r0, [r7, #24]
 8001866:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001868:	f993 3012 	ldrsb.w	r3, [r3, #18]
 800186c:	4619      	mov	r1, r3
 800186e:	2300      	movs	r3, #0
 8001870:	2203      	movs	r2, #3
 8001872:	f006 fd91 	bl	8008398 <xTaskGenericNotify>
	     continue;
 8001876:	e055      	b.n	8001924 <StartTaskModbusMaster+0x1b0>
	  }

	  modH->i8lastError = u8exception;
 8001878:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800187a:	7ffa      	ldrb	r2, [r7, #31]
 800187c:	749a      	strb	r2, [r3, #18]

	  xSemaphoreTake(modH->ModBusSphrHandle , portMAX_DELAY); //before processing the message get the semaphore
 800187e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001880:	f8d3 30b8 	ldr.w	r3, [r3, #184]	; 0xb8
 8001884:	f04f 31ff 	mov.w	r1, #4294967295
 8001888:	4618      	mov	r0, r3
 800188a:	f005 faa3 	bl	8006dd4 <xQueueSemaphoreTake>
	  // process answer
	  switch( modH->u8Buffer[ FUNC ] )
 800188e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001890:	7d1b      	ldrb	r3, [r3, #20]
 8001892:	3b01      	subs	r3, #1
 8001894:	2b0f      	cmp	r3, #15
 8001896:	d82b      	bhi.n	80018f0 <StartTaskModbusMaster+0x17c>
 8001898:	a201      	add	r2, pc, #4	; (adr r2, 80018a0 <StartTaskModbusMaster+0x12c>)
 800189a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800189e:	bf00      	nop
 80018a0:	080018e1 	.word	0x080018e1
 80018a4:	080018e1 	.word	0x080018e1
 80018a8:	080018e9 	.word	0x080018e9
 80018ac:	080018e9 	.word	0x080018e9
 80018b0:	080018f1 	.word	0x080018f1
 80018b4:	080018f1 	.word	0x080018f1
 80018b8:	080018f1 	.word	0x080018f1
 80018bc:	080018f1 	.word	0x080018f1
 80018c0:	080018f1 	.word	0x080018f1
 80018c4:	080018f1 	.word	0x080018f1
 80018c8:	080018f1 	.word	0x080018f1
 80018cc:	080018f1 	.word	0x080018f1
 80018d0:	080018f1 	.word	0x080018f1
 80018d4:	080018f1 	.word	0x080018f1
 80018d8:	080018f1 	.word	0x080018f1
 80018dc:	080018f1 	.word	0x080018f1
	  {
	  case MB_FC_READ_COILS:
	  case MB_FC_READ_DISCRETE_INPUT:
	      //call get_FC1 to transfer the incoming message to u16regs buffer
	      get_FC1(modH);
 80018e0:	6a78      	ldr	r0, [r7, #36]	; 0x24
 80018e2:	f000 f821 	bl	8001928 <get_FC1>
	      break;
 80018e6:	e004      	b.n	80018f2 <StartTaskModbusMaster+0x17e>
	  case MB_FC_READ_INPUT_REGISTER:
	  case MB_FC_READ_REGISTERS :
	      // call get_FC3 to transfer the incoming message to u16regs buffer
	      get_FC3(modH);
 80018e8:	6a78      	ldr	r0, [r7, #36]	; 0x24
 80018ea:	f000 f874 	bl	80019d6 <get_FC3>
	      break;
 80018ee:	e000      	b.n	80018f2 <StartTaskModbusMaster+0x17e>
	  case MB_FC_WRITE_MULTIPLE_COILS:
	  case MB_FC_WRITE_MULTIPLE_REGISTERS :
	      // nothing to do
	      break;
	  default:
	      break;
 80018f0:	bf00      	nop
	  }
	  modH->i8state = COM_IDLE;
 80018f2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80018f4:	2200      	movs	r2, #0
 80018f6:	f883 20a7 	strb.w	r2, [r3, #167]	; 0xa7

	  if (modH->i8lastError ==0) // no error the error_OK, we need to use a different value than 0 to detect the timeout
 80018fa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80018fc:	f993 3012 	ldrsb.w	r3, [r3, #18]
 8001900:	2b00      	cmp	r3, #0
 8001902:	d10e      	bne.n	8001922 <StartTaskModbusMaster+0x1ae>
	  {
		  xSemaphoreGive(modH->ModBusSphrHandle); //Release the semaphore
 8001904:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001906:	f8d3 00b8 	ldr.w	r0, [r3, #184]	; 0xb8
 800190a:	2300      	movs	r3, #0
 800190c:	2200      	movs	r2, #0
 800190e:	2100      	movs	r1, #0
 8001910:	f004 ffea 	bl	80068e8 <xQueueGenericSend>
		  xTaskNotify((TaskHandle_t)telegram.u32CurrentTask, ERR_OK_QUERY, eSetValueWithOverwrite);
 8001914:	69b8      	ldr	r0, [r7, #24]
 8001916:	2300      	movs	r3, #0
 8001918:	2203      	movs	r2, #3
 800191a:	f06f 010a 	mvn.w	r1, #10
 800191e:	f006 fd3b 	bl	8008398 <xTaskGenericNotify>
	  }


	  continue;
 8001922:	bf00      	nop
  {
 8001924:	e72c      	b.n	8001780 <StartTaskModbusMaster+0xc>
 8001926:	bf00      	nop

08001928 <get_FC1>:
 * This method puts the slave answer into master data buffer
 *
 * @ingroup register
 */
void get_FC1(modbusHandler_t *modH)
{
 8001928:	b590      	push	{r4, r7, lr}
 800192a:	b085      	sub	sp, #20
 800192c:	af00      	add	r7, sp, #0
 800192e:	6078      	str	r0, [r7, #4]
    uint8_t u8byte, i;
    u8byte = 3;
 8001930:	2303      	movs	r3, #3
 8001932:	73bb      	strb	r3, [r7, #14]
     for (i=0; i< modH->u8Buffer[2]; i++) {
 8001934:	2300      	movs	r3, #0
 8001936:	73fb      	strb	r3, [r7, #15]
 8001938:	e043      	b.n	80019c2 <get_FC1+0x9a>

        if(i%2)
 800193a:	7bfb      	ldrb	r3, [r7, #15]
 800193c:	f003 0301 	and.w	r3, r3, #1
 8001940:	b2db      	uxtb	r3, r3
 8001942:	2b00      	cmp	r3, #0
 8001944:	d01c      	beq.n	8001980 <get_FC1+0x58>
        {
        	modH->u16regs[i/2]= word(modH->u8Buffer[i+u8byte], lowByte(modH->u16regs[i/2]));
 8001946:	7bfa      	ldrb	r2, [r7, #15]
 8001948:	7bbb      	ldrb	r3, [r7, #14]
 800194a:	4413      	add	r3, r2
 800194c:	687a      	ldr	r2, [r7, #4]
 800194e:	4413      	add	r3, r2
 8001950:	7cd8      	ldrb	r0, [r3, #19]
 8001952:	687b      	ldr	r3, [r7, #4]
 8001954:	f8d3 2098 	ldr.w	r2, [r3, #152]	; 0x98
 8001958:	7bfb      	ldrb	r3, [r7, #15]
 800195a:	085b      	lsrs	r3, r3, #1
 800195c:	b2db      	uxtb	r3, r3
 800195e:	005b      	lsls	r3, r3, #1
 8001960:	4413      	add	r3, r2
 8001962:	881b      	ldrh	r3, [r3, #0]
 8001964:	b2d9      	uxtb	r1, r3
 8001966:	687b      	ldr	r3, [r7, #4]
 8001968:	f8d3 2098 	ldr.w	r2, [r3, #152]	; 0x98
 800196c:	7bfb      	ldrb	r3, [r7, #15]
 800196e:	085b      	lsrs	r3, r3, #1
 8001970:	b2db      	uxtb	r3, r3
 8001972:	005b      	lsls	r3, r3, #1
 8001974:	18d4      	adds	r4, r2, r3
 8001976:	f000 fa5f 	bl	8001e38 <word>
 800197a:	4603      	mov	r3, r0
 800197c:	8023      	strh	r3, [r4, #0]
 800197e:	e01d      	b.n	80019bc <get_FC1+0x94>
        }
        else
        {

        	modH->u16regs[i/2]= word(highByte(modH->u16regs[i/2]), modH->u8Buffer[i+u8byte]);
 8001980:	687b      	ldr	r3, [r7, #4]
 8001982:	f8d3 2098 	ldr.w	r2, [r3, #152]	; 0x98
 8001986:	7bfb      	ldrb	r3, [r7, #15]
 8001988:	085b      	lsrs	r3, r3, #1
 800198a:	b2db      	uxtb	r3, r3
 800198c:	005b      	lsls	r3, r3, #1
 800198e:	4413      	add	r3, r2
 8001990:	881b      	ldrh	r3, [r3, #0]
 8001992:	0a1b      	lsrs	r3, r3, #8
 8001994:	b29b      	uxth	r3, r3
 8001996:	b2d8      	uxtb	r0, r3
 8001998:	7bfa      	ldrb	r2, [r7, #15]
 800199a:	7bbb      	ldrb	r3, [r7, #14]
 800199c:	4413      	add	r3, r2
 800199e:	687a      	ldr	r2, [r7, #4]
 80019a0:	4413      	add	r3, r2
 80019a2:	7cd9      	ldrb	r1, [r3, #19]
 80019a4:	687b      	ldr	r3, [r7, #4]
 80019a6:	f8d3 2098 	ldr.w	r2, [r3, #152]	; 0x98
 80019aa:	7bfb      	ldrb	r3, [r7, #15]
 80019ac:	085b      	lsrs	r3, r3, #1
 80019ae:	b2db      	uxtb	r3, r3
 80019b0:	005b      	lsls	r3, r3, #1
 80019b2:	18d4      	adds	r4, r2, r3
 80019b4:	f000 fa40 	bl	8001e38 <word>
 80019b8:	4603      	mov	r3, r0
 80019ba:	8023      	strh	r3, [r4, #0]
     for (i=0; i< modH->u8Buffer[2]; i++) {
 80019bc:	7bfb      	ldrb	r3, [r7, #15]
 80019be:	3301      	adds	r3, #1
 80019c0:	73fb      	strb	r3, [r7, #15]
 80019c2:	687b      	ldr	r3, [r7, #4]
 80019c4:	7d5b      	ldrb	r3, [r3, #21]
 80019c6:	7bfa      	ldrb	r2, [r7, #15]
 80019c8:	429a      	cmp	r2, r3
 80019ca:	d3b6      	bcc.n	800193a <get_FC1+0x12>
        }

     }
}
 80019cc:	bf00      	nop
 80019ce:	bf00      	nop
 80019d0:	3714      	adds	r7, #20
 80019d2:	46bd      	mov	sp, r7
 80019d4:	bd90      	pop	{r4, r7, pc}

080019d6 <get_FC3>:
 * This method puts the slave answer into master data buffer
 *
 * @ingroup register
 */
void get_FC3(modbusHandler_t *modH)
{
 80019d6:	b590      	push	{r4, r7, lr}
 80019d8:	b085      	sub	sp, #20
 80019da:	af00      	add	r7, sp, #0
 80019dc:	6078      	str	r0, [r7, #4]
    uint8_t u8byte, i;
    u8byte = 3;
 80019de:	2303      	movs	r3, #3
 80019e0:	73fb      	strb	r3, [r7, #15]

    for (i=0; i< modH->u8Buffer[ 2 ] /2; i++)
 80019e2:	2300      	movs	r3, #0
 80019e4:	73bb      	strb	r3, [r7, #14]
 80019e6:	e018      	b.n	8001a1a <get_FC3+0x44>
    {
    	modH->u16regs[ i ] = word(modH->u8Buffer[ u8byte ], modH->u8Buffer[ u8byte +1 ]);
 80019e8:	7bfb      	ldrb	r3, [r7, #15]
 80019ea:	687a      	ldr	r2, [r7, #4]
 80019ec:	4413      	add	r3, r2
 80019ee:	7cd8      	ldrb	r0, [r3, #19]
 80019f0:	7bfb      	ldrb	r3, [r7, #15]
 80019f2:	3301      	adds	r3, #1
 80019f4:	687a      	ldr	r2, [r7, #4]
 80019f6:	4413      	add	r3, r2
 80019f8:	7cd9      	ldrb	r1, [r3, #19]
 80019fa:	687b      	ldr	r3, [r7, #4]
 80019fc:	f8d3 2098 	ldr.w	r2, [r3, #152]	; 0x98
 8001a00:	7bbb      	ldrb	r3, [r7, #14]
 8001a02:	005b      	lsls	r3, r3, #1
 8001a04:	18d4      	adds	r4, r2, r3
 8001a06:	f000 fa17 	bl	8001e38 <word>
 8001a0a:	4603      	mov	r3, r0
 8001a0c:	8023      	strh	r3, [r4, #0]
        u8byte += 2;
 8001a0e:	7bfb      	ldrb	r3, [r7, #15]
 8001a10:	3302      	adds	r3, #2
 8001a12:	73fb      	strb	r3, [r7, #15]
    for (i=0; i< modH->u8Buffer[ 2 ] /2; i++)
 8001a14:	7bbb      	ldrb	r3, [r7, #14]
 8001a16:	3301      	adds	r3, #1
 8001a18:	73bb      	strb	r3, [r7, #14]
 8001a1a:	687b      	ldr	r3, [r7, #4]
 8001a1c:	7d5b      	ldrb	r3, [r3, #21]
 8001a1e:	085b      	lsrs	r3, r3, #1
 8001a20:	b2db      	uxtb	r3, r3
 8001a22:	7bba      	ldrb	r2, [r7, #14]
 8001a24:	429a      	cmp	r2, r3
 8001a26:	d3df      	bcc.n	80019e8 <get_FC3+0x12>
    }
}
 8001a28:	bf00      	nop
 8001a2a:	bf00      	nop
 8001a2c:	3714      	adds	r7, #20
 8001a2e:	46bd      	mov	sp, r7
 8001a30:	bd90      	pop	{r4, r7, pc}
	...

08001a34 <validateAnswer>:
 *
 * @return 0 if OK, EXCEPTION if anything fails
 * @ingroup buffer
 */
uint8_t validateAnswer(modbusHandler_t *modH)
{
 8001a34:	b580      	push	{r7, lr}
 8001a36:	b084      	sub	sp, #16
 8001a38:	af00      	add	r7, sp, #0
 8001a3a:	6078      	str	r0, [r7, #4]
#if ENABLE_TCP ==1
	if(modH->xTypeHW != TCP_HW)
	{
#endif
	uint16_t u16MsgCRC =
        ((modH->u8Buffer[modH->u8BufferSize - 2] << 8)
 8001a3c:	687b      	ldr	r3, [r7, #4]
 8001a3e:	f893 3093 	ldrb.w	r3, [r3, #147]	; 0x93
 8001a42:	3b02      	subs	r3, #2
 8001a44:	687a      	ldr	r2, [r7, #4]
 8001a46:	4413      	add	r3, r2
 8001a48:	7cdb      	ldrb	r3, [r3, #19]
 8001a4a:	021b      	lsls	r3, r3, #8
         | modH->u8Buffer[modH->u8BufferSize - 1]); // combine the crc Low & High bytes
 8001a4c:	b21a      	sxth	r2, r3
 8001a4e:	687b      	ldr	r3, [r7, #4]
 8001a50:	f893 3093 	ldrb.w	r3, [r3, #147]	; 0x93
 8001a54:	3b01      	subs	r3, #1
 8001a56:	6879      	ldr	r1, [r7, #4]
 8001a58:	440b      	add	r3, r1
 8001a5a:	7cdb      	ldrb	r3, [r3, #19]
 8001a5c:	b21b      	sxth	r3, r3
 8001a5e:	4313      	orrs	r3, r2
 8001a60:	b21b      	sxth	r3, r3
	uint16_t u16MsgCRC =
 8001a62:	81bb      	strh	r3, [r7, #12]
    if ( calcCRC(modH->u8Buffer,  modH->u8BufferSize-2) != u16MsgCRC )
 8001a64:	687b      	ldr	r3, [r7, #4]
 8001a66:	f103 0213 	add.w	r2, r3, #19
 8001a6a:	687b      	ldr	r3, [r7, #4]
 8001a6c:	f893 3093 	ldrb.w	r3, [r3, #147]	; 0x93
 8001a70:	3b02      	subs	r3, #2
 8001a72:	b2db      	uxtb	r3, r3
 8001a74:	4619      	mov	r1, r3
 8001a76:	4610      	mov	r0, r2
 8001a78:	f000 f9f0 	bl	8001e5c <calcCRC>
 8001a7c:	4603      	mov	r3, r0
 8001a7e:	461a      	mov	r2, r3
 8001a80:	89bb      	ldrh	r3, [r7, #12]
 8001a82:	4293      	cmp	r3, r2
 8001a84:	d009      	beq.n	8001a9a <validateAnswer+0x66>
    {
    	modH->u16errCnt ++;
 8001a86:	687b      	ldr	r3, [r7, #4]
 8001a88:	f8b3 30a0 	ldrh.w	r3, [r3, #160]	; 0xa0
 8001a8c:	3301      	adds	r3, #1
 8001a8e:	b29a      	uxth	r2, r3
 8001a90:	687b      	ldr	r3, [r7, #4]
 8001a92:	f8a3 20a0 	strh.w	r2, [r3, #160]	; 0xa0
        return ERR_BAD_CRC;
 8001a96:	23fc      	movs	r3, #252	; 0xfc
 8001a98:	e034      	b.n	8001b04 <validateAnswer+0xd0>
	}
#endif


    // check exception
    if ((modH->u8Buffer[ FUNC ] & 0x80) != 0)
 8001a9a:	687b      	ldr	r3, [r7, #4]
 8001a9c:	7d1b      	ldrb	r3, [r3, #20]
 8001a9e:	b25b      	sxtb	r3, r3
 8001aa0:	2b00      	cmp	r3, #0
 8001aa2:	da09      	bge.n	8001ab8 <validateAnswer+0x84>
    {
    	modH->u16errCnt ++;
 8001aa4:	687b      	ldr	r3, [r7, #4]
 8001aa6:	f8b3 30a0 	ldrh.w	r3, [r3, #160]	; 0xa0
 8001aaa:	3301      	adds	r3, #1
 8001aac:	b29a      	uxth	r2, r3
 8001aae:	687b      	ldr	r3, [r7, #4]
 8001ab0:	f8a3 20a0 	strh.w	r2, [r3, #160]	; 0xa0
        return ERR_EXCEPTION;
 8001ab4:	23fb      	movs	r3, #251	; 0xfb
 8001ab6:	e025      	b.n	8001b04 <validateAnswer+0xd0>
    }

    // check fct code
    bool isSupported = false;
 8001ab8:	2300      	movs	r3, #0
 8001aba:	73fb      	strb	r3, [r7, #15]
    for (uint8_t i = 0; i< sizeof( fctsupported ); i++)
 8001abc:	2300      	movs	r3, #0
 8001abe:	73bb      	strb	r3, [r7, #14]
 8001ac0:	e00c      	b.n	8001adc <validateAnswer+0xa8>
    {
        if (fctsupported[i] == modH->u8Buffer[FUNC])
 8001ac2:	7bbb      	ldrb	r3, [r7, #14]
 8001ac4:	4a11      	ldr	r2, [pc, #68]	; (8001b0c <validateAnswer+0xd8>)
 8001ac6:	5cd2      	ldrb	r2, [r2, r3]
 8001ac8:	687b      	ldr	r3, [r7, #4]
 8001aca:	7d1b      	ldrb	r3, [r3, #20]
 8001acc:	429a      	cmp	r2, r3
 8001ace:	d102      	bne.n	8001ad6 <validateAnswer+0xa2>
        {
            isSupported = 1;
 8001ad0:	2301      	movs	r3, #1
 8001ad2:	73fb      	strb	r3, [r7, #15]
            break;
 8001ad4:	e005      	b.n	8001ae2 <validateAnswer+0xae>
    for (uint8_t i = 0; i< sizeof( fctsupported ); i++)
 8001ad6:	7bbb      	ldrb	r3, [r7, #14]
 8001ad8:	3301      	adds	r3, #1
 8001ada:	73bb      	strb	r3, [r7, #14]
 8001adc:	7bbb      	ldrb	r3, [r7, #14]
 8001ade:	2b07      	cmp	r3, #7
 8001ae0:	d9ef      	bls.n	8001ac2 <validateAnswer+0x8e>
        }
    }
    if (!isSupported)
 8001ae2:	7bfb      	ldrb	r3, [r7, #15]
 8001ae4:	f083 0301 	eor.w	r3, r3, #1
 8001ae8:	b2db      	uxtb	r3, r3
 8001aea:	2b00      	cmp	r3, #0
 8001aec:	d009      	beq.n	8001b02 <validateAnswer+0xce>
    {
    	modH->u16errCnt ++;
 8001aee:	687b      	ldr	r3, [r7, #4]
 8001af0:	f8b3 30a0 	ldrh.w	r3, [r3, #160]	; 0xa0
 8001af4:	3301      	adds	r3, #1
 8001af6:	b29a      	uxth	r2, r3
 8001af8:	687b      	ldr	r3, [r7, #4]
 8001afa:	f8a3 20a0 	strh.w	r2, [r3, #160]	; 0xa0
        return EXC_FUNC_CODE;
 8001afe:	2301      	movs	r3, #1
 8001b00:	e000      	b.n	8001b04 <validateAnswer+0xd0>
    }

    return 0; // OK, no exception code thrown
 8001b02:	2300      	movs	r3, #0
}
 8001b04:	4618      	mov	r0, r3
 8001b06:	3710      	adds	r7, #16
 8001b08:	46bd      	mov	sp, r7
 8001b0a:	bd80      	pop	{r7, pc}
 8001b0c:	0800970c 	.word	0x0800970c

08001b10 <getRxBuffer>:
 *
 * @return buffer size if OK, ERR_BUFF_OVERFLOW if u8BufferSize >= MAX_BUFFER
 * @ingroup buffer
 */
int16_t getRxBuffer(modbusHandler_t *modH)
{
 8001b10:	b580      	push	{r7, lr}
 8001b12:	b084      	sub	sp, #16
 8001b14:	af00      	add	r7, sp, #0
 8001b16:	6078      	str	r0, [r7, #4]

    int16_t i16result;

    if(modH->xTypeHW == USART_HW)
 8001b18:	687b      	ldr	r3, [r7, #4]
 8001b1a:	f893 3140 	ldrb.w	r3, [r3, #320]	; 0x140
 8001b1e:	2b01      	cmp	r3, #1
 8001b20:	d104      	bne.n	8001b2c <getRxBuffer+0x1c>
    {
    	HAL_UART_AbortReceive_IT(modH->port); // disable interrupts to avoid race conditions on serial port
 8001b22:	687b      	ldr	r3, [r7, #4]
 8001b24:	685b      	ldr	r3, [r3, #4]
 8001b26:	4618      	mov	r0, r3
 8001b28:	f003 fd2a 	bl	8005580 <HAL_UART_AbortReceive_IT>
    }

	if (modH->xBufferRX.overflow)
 8001b2c:	687b      	ldr	r3, [r7, #4]
 8001b2e:	f893 313f 	ldrb.w	r3, [r3, #319]	; 0x13f
 8001b32:	2b00      	cmp	r3, #0
 8001b34:	d008      	beq.n	8001b48 <getRxBuffer+0x38>
    {
       	RingClear(&modH->xBufferRX); // clean up the overflowed buffer
 8001b36:	687b      	ldr	r3, [r7, #4]
 8001b38:	33bc      	adds	r3, #188	; 0xbc
 8001b3a:	4618      	mov	r0, r3
 8001b3c:	f7ff fa30 	bl	8000fa0 <RingClear>
       	i16result =  ERR_BUFF_OVERFLOW;
 8001b40:	f64f 73fd 	movw	r3, #65533	; 0xfffd
 8001b44:	81fb      	strh	r3, [r7, #14]
 8001b46:	e019      	b.n	8001b7c <getRxBuffer+0x6c>
    }
	else
	{
		modH->u8BufferSize = RingGetAllBytes(&modH->xBufferRX, modH->u8Buffer);
 8001b48:	687b      	ldr	r3, [r7, #4]
 8001b4a:	f103 02bc 	add.w	r2, r3, #188	; 0xbc
 8001b4e:	687b      	ldr	r3, [r7, #4]
 8001b50:	3313      	adds	r3, #19
 8001b52:	4619      	mov	r1, r3
 8001b54:	4610      	mov	r0, r2
 8001b56:	f7ff f9bd 	bl	8000ed4 <RingGetAllBytes>
 8001b5a:	4603      	mov	r3, r0
 8001b5c:	461a      	mov	r2, r3
 8001b5e:	687b      	ldr	r3, [r7, #4]
 8001b60:	f883 2093 	strb.w	r2, [r3, #147]	; 0x93
		modH->u16InCnt++;
 8001b64:	687b      	ldr	r3, [r7, #4]
 8001b66:	f8b3 309c 	ldrh.w	r3, [r3, #156]	; 0x9c
 8001b6a:	3301      	adds	r3, #1
 8001b6c:	b29a      	uxth	r2, r3
 8001b6e:	687b      	ldr	r3, [r7, #4]
 8001b70:	f8a3 209c 	strh.w	r2, [r3, #156]	; 0x9c
		i16result = modH->u8BufferSize;
 8001b74:	687b      	ldr	r3, [r7, #4]
 8001b76:	f893 3093 	ldrb.w	r3, [r3, #147]	; 0x93
 8001b7a:	81fb      	strh	r3, [r7, #14]
	}

	if(modH->xTypeHW == USART_HW)
 8001b7c:	687b      	ldr	r3, [r7, #4]
 8001b7e:	f893 3140 	ldrb.w	r3, [r3, #320]	; 0x140
 8001b82:	2b01      	cmp	r3, #1
 8001b84:	d107      	bne.n	8001b96 <getRxBuffer+0x86>
	{
		HAL_UART_Receive_IT(modH->port, &modH->dataRX, 1);
 8001b86:	687b      	ldr	r3, [r7, #4]
 8001b88:	6858      	ldr	r0, [r3, #4]
 8001b8a:	687b      	ldr	r3, [r7, #4]
 8001b8c:	33a6      	adds	r3, #166	; 0xa6
 8001b8e:	2201      	movs	r2, #1
 8001b90:	4619      	mov	r1, r3
 8001b92:	f003 fcc4 	bl	800551e <HAL_UART_Receive_IT>
	}

    return i16result;
 8001b96:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
}
 8001b9a:	4618      	mov	r0, r3
 8001b9c:	3710      	adds	r7, #16
 8001b9e:	46bd      	mov	sp, r7
 8001ba0:	bd80      	pop	{r7, pc}
	...

08001ba4 <validateRequest>:
 *
 * @return 0 if OK, EXCEPTION if anything fails
 * @ingroup modH Modbus handler
 */
uint8_t validateRequest(modbusHandler_t *modH)
{
 8001ba4:	b580      	push	{r7, lr}
 8001ba6:	b084      	sub	sp, #16
 8001ba8:	af00      	add	r7, sp, #0
 8001baa:	6078      	str	r0, [r7, #4]
	    		return ERR_BAD_CRC;
	    		}
	    }
#else
	    uint16_t u16MsgCRC;
	    u16MsgCRC= ((modH->u8Buffer[modH->u8BufferSize - 2] << 8)
 8001bac:	687b      	ldr	r3, [r7, #4]
 8001bae:	f893 3093 	ldrb.w	r3, [r3, #147]	; 0x93
 8001bb2:	3b02      	subs	r3, #2
 8001bb4:	687a      	ldr	r2, [r7, #4]
 8001bb6:	4413      	add	r3, r2
 8001bb8:	7cdb      	ldrb	r3, [r3, #19]
 8001bba:	021b      	lsls	r3, r3, #8
	    		   	         | modH->u8Buffer[modH->u8BufferSize - 1]); // combine the crc Low & High bytes
 8001bbc:	b21a      	sxth	r2, r3
 8001bbe:	687b      	ldr	r3, [r7, #4]
 8001bc0:	f893 3093 	ldrb.w	r3, [r3, #147]	; 0x93
 8001bc4:	3b01      	subs	r3, #1
 8001bc6:	6879      	ldr	r1, [r7, #4]
 8001bc8:	440b      	add	r3, r1
 8001bca:	7cdb      	ldrb	r3, [r3, #19]
 8001bcc:	b21b      	sxth	r3, r3
 8001bce:	4313      	orrs	r3, r2
 8001bd0:	b21b      	sxth	r3, r3
	    u16MsgCRC= ((modH->u8Buffer[modH->u8BufferSize - 2] << 8)
 8001bd2:	813b      	strh	r3, [r7, #8]


	    if ( calcCRC( modH->u8Buffer,  modH->u8BufferSize-2 ) != u16MsgCRC )
 8001bd4:	687b      	ldr	r3, [r7, #4]
 8001bd6:	f103 0213 	add.w	r2, r3, #19
 8001bda:	687b      	ldr	r3, [r7, #4]
 8001bdc:	f893 3093 	ldrb.w	r3, [r3, #147]	; 0x93
 8001be0:	3b02      	subs	r3, #2
 8001be2:	b2db      	uxtb	r3, r3
 8001be4:	4619      	mov	r1, r3
 8001be6:	4610      	mov	r0, r2
 8001be8:	f000 f938 	bl	8001e5c <calcCRC>
 8001bec:	4603      	mov	r3, r0
 8001bee:	461a      	mov	r2, r3
 8001bf0:	893b      	ldrh	r3, [r7, #8]
 8001bf2:	4293      	cmp	r3, r2
 8001bf4:	d009      	beq.n	8001c0a <validateRequest+0x66>
	    {
	       		modH->u16errCnt ++;
 8001bf6:	687b      	ldr	r3, [r7, #4]
 8001bf8:	f8b3 30a0 	ldrh.w	r3, [r3, #160]	; 0xa0
 8001bfc:	3301      	adds	r3, #1
 8001bfe:	b29a      	uxth	r2, r3
 8001c00:	687b      	ldr	r3, [r7, #4]
 8001c02:	f8a3 20a0 	strh.w	r2, [r3, #160]	; 0xa0
	       		return ERR_BAD_CRC;
 8001c06:	23fc      	movs	r3, #252	; 0xfc
 8001c08:	e10f      	b.n	8001e2a <validateRequest+0x286>


#endif

	    // check fct code
	    bool isSupported = false;
 8001c0a:	2300      	movs	r3, #0
 8001c0c:	73fb      	strb	r3, [r7, #15]
	    for (uint8_t i = 0; i< sizeof( fctsupported ); i++)
 8001c0e:	2300      	movs	r3, #0
 8001c10:	73bb      	strb	r3, [r7, #14]
 8001c12:	e00c      	b.n	8001c2e <validateRequest+0x8a>
	    {
	        if (fctsupported[i] == modH->u8Buffer[FUNC])
 8001c14:	7bbb      	ldrb	r3, [r7, #14]
 8001c16:	4a87      	ldr	r2, [pc, #540]	; (8001e34 <validateRequest+0x290>)
 8001c18:	5cd2      	ldrb	r2, [r2, r3]
 8001c1a:	687b      	ldr	r3, [r7, #4]
 8001c1c:	7d1b      	ldrb	r3, [r3, #20]
 8001c1e:	429a      	cmp	r2, r3
 8001c20:	d102      	bne.n	8001c28 <validateRequest+0x84>
	        {
	            isSupported = 1;
 8001c22:	2301      	movs	r3, #1
 8001c24:	73fb      	strb	r3, [r7, #15]
	            break;
 8001c26:	e005      	b.n	8001c34 <validateRequest+0x90>
	    for (uint8_t i = 0; i< sizeof( fctsupported ); i++)
 8001c28:	7bbb      	ldrb	r3, [r7, #14]
 8001c2a:	3301      	adds	r3, #1
 8001c2c:	73bb      	strb	r3, [r7, #14]
 8001c2e:	7bbb      	ldrb	r3, [r7, #14]
 8001c30:	2b07      	cmp	r3, #7
 8001c32:	d9ef      	bls.n	8001c14 <validateRequest+0x70>
	        }
	    }
	    if (!isSupported)
 8001c34:	7bfb      	ldrb	r3, [r7, #15]
 8001c36:	f083 0301 	eor.w	r3, r3, #1
 8001c3a:	b2db      	uxtb	r3, r3
 8001c3c:	2b00      	cmp	r3, #0
 8001c3e:	d009      	beq.n	8001c54 <validateRequest+0xb0>
	    {
	    	modH->u16errCnt ++;
 8001c40:	687b      	ldr	r3, [r7, #4]
 8001c42:	f8b3 30a0 	ldrh.w	r3, [r3, #160]	; 0xa0
 8001c46:	3301      	adds	r3, #1
 8001c48:	b29a      	uxth	r2, r3
 8001c4a:	687b      	ldr	r3, [r7, #4]
 8001c4c:	f8a3 20a0 	strh.w	r2, [r3, #160]	; 0xa0
	        return EXC_FUNC_CODE;
 8001c50:	2301      	movs	r3, #1
 8001c52:	e0ea      	b.n	8001e2a <validateRequest+0x286>
	    }

	    // check start address & nb range
	    uint16_t u16AdRegs = 0;
 8001c54:	2300      	movs	r3, #0
 8001c56:	81bb      	strh	r3, [r7, #12]
	    uint16_t u16NRegs = 0;
 8001c58:	2300      	movs	r3, #0
 8001c5a:	817b      	strh	r3, [r7, #10]

	    //uint8_t u8regs;
	    switch ( modH->u8Buffer[ FUNC ] )
 8001c5c:	687b      	ldr	r3, [r7, #4]
 8001c5e:	7d1b      	ldrb	r3, [r3, #20]
 8001c60:	3b01      	subs	r3, #1
 8001c62:	2b0f      	cmp	r3, #15
 8001c64:	f200 80e0 	bhi.w	8001e28 <validateRequest+0x284>
 8001c68:	a201      	add	r2, pc, #4	; (adr r2, 8001c70 <validateRequest+0xcc>)
 8001c6a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001c6e:	bf00      	nop
 8001c70:	08001cb1 	.word	0x08001cb1
 8001c74:	08001cb1 	.word	0x08001cb1
 8001c78:	08001dc9 	.word	0x08001dc9
 8001c7c:	08001dc9 	.word	0x08001dc9
 8001c80:	08001d5d 	.word	0x08001d5d
 8001c84:	08001da5 	.word	0x08001da5
 8001c88:	08001e29 	.word	0x08001e29
 8001c8c:	08001e29 	.word	0x08001e29
 8001c90:	08001e29 	.word	0x08001e29
 8001c94:	08001e29 	.word	0x08001e29
 8001c98:	08001e29 	.word	0x08001e29
 8001c9c:	08001e29 	.word	0x08001e29
 8001ca0:	08001e29 	.word	0x08001e29
 8001ca4:	08001e29 	.word	0x08001e29
 8001ca8:	08001cb1 	.word	0x08001cb1
 8001cac:	08001dc9 	.word	0x08001dc9
	    {
	    case MB_FC_READ_COILS:
	    case MB_FC_READ_DISCRETE_INPUT:
	    case MB_FC_WRITE_MULTIPLE_COILS:
	    	u16AdRegs = word( modH->u8Buffer[ ADD_HI ], modH->u8Buffer[ ADD_LO ]) / 16;
 8001cb0:	687b      	ldr	r3, [r7, #4]
 8001cb2:	7d5a      	ldrb	r2, [r3, #21]
 8001cb4:	687b      	ldr	r3, [r7, #4]
 8001cb6:	7d9b      	ldrb	r3, [r3, #22]
 8001cb8:	4619      	mov	r1, r3
 8001cba:	4610      	mov	r0, r2
 8001cbc:	f000 f8bc 	bl	8001e38 <word>
 8001cc0:	4603      	mov	r3, r0
 8001cc2:	091b      	lsrs	r3, r3, #4
 8001cc4:	81bb      	strh	r3, [r7, #12]
	    	u16NRegs = word( modH->u8Buffer[ NB_HI ], modH->u8Buffer[ NB_LO ]) /16;
 8001cc6:	687b      	ldr	r3, [r7, #4]
 8001cc8:	7dda      	ldrb	r2, [r3, #23]
 8001cca:	687b      	ldr	r3, [r7, #4]
 8001ccc:	7e1b      	ldrb	r3, [r3, #24]
 8001cce:	4619      	mov	r1, r3
 8001cd0:	4610      	mov	r0, r2
 8001cd2:	f000 f8b1 	bl	8001e38 <word>
 8001cd6:	4603      	mov	r3, r0
 8001cd8:	091b      	lsrs	r3, r3, #4
 8001cda:	817b      	strh	r3, [r7, #10]
	    	if(word( modH->u8Buffer[ NB_HI ], modH->u8Buffer[ NB_LO ]) % 16) u16NRegs++; // check for incomplete words
 8001cdc:	687b      	ldr	r3, [r7, #4]
 8001cde:	7dda      	ldrb	r2, [r3, #23]
 8001ce0:	687b      	ldr	r3, [r7, #4]
 8001ce2:	7e1b      	ldrb	r3, [r3, #24]
 8001ce4:	4619      	mov	r1, r3
 8001ce6:	4610      	mov	r0, r2
 8001ce8:	f000 f8a6 	bl	8001e38 <word>
 8001cec:	4603      	mov	r3, r0
 8001cee:	f003 030f 	and.w	r3, r3, #15
 8001cf2:	b29b      	uxth	r3, r3
 8001cf4:	2b00      	cmp	r3, #0
 8001cf6:	d002      	beq.n	8001cfe <validateRequest+0x15a>
 8001cf8:	897b      	ldrh	r3, [r7, #10]
 8001cfa:	3301      	adds	r3, #1
 8001cfc:	817b      	strh	r3, [r7, #10]
	    	// verify address range
	    	if((u16AdRegs + u16NRegs) > modH->u16regsize) return EXC_ADDR_RANGE;
 8001cfe:	89ba      	ldrh	r2, [r7, #12]
 8001d00:	897b      	ldrh	r3, [r7, #10]
 8001d02:	4413      	add	r3, r2
 8001d04:	687a      	ldr	r2, [r7, #4]
 8001d06:	f8b2 20a4 	ldrh.w	r2, [r2, #164]	; 0xa4
 8001d0a:	4293      	cmp	r3, r2
 8001d0c:	dd01      	ble.n	8001d12 <validateRequest+0x16e>
 8001d0e:	2302      	movs	r3, #2
 8001d10:	e08b      	b.n	8001e2a <validateRequest+0x286>

	    	//verify answer frame size in bytes

	    	u16NRegs = word( modH->u8Buffer[ NB_HI ], modH->u8Buffer[ NB_LO ]) / 8;
 8001d12:	687b      	ldr	r3, [r7, #4]
 8001d14:	7dda      	ldrb	r2, [r3, #23]
 8001d16:	687b      	ldr	r3, [r7, #4]
 8001d18:	7e1b      	ldrb	r3, [r3, #24]
 8001d1a:	4619      	mov	r1, r3
 8001d1c:	4610      	mov	r0, r2
 8001d1e:	f000 f88b 	bl	8001e38 <word>
 8001d22:	4603      	mov	r3, r0
 8001d24:	08db      	lsrs	r3, r3, #3
 8001d26:	817b      	strh	r3, [r7, #10]
	    	if(word( modH->u8Buffer[ NB_HI ], modH->u8Buffer[ NB_LO ]) % 8) u16NRegs++;
 8001d28:	687b      	ldr	r3, [r7, #4]
 8001d2a:	7dda      	ldrb	r2, [r3, #23]
 8001d2c:	687b      	ldr	r3, [r7, #4]
 8001d2e:	7e1b      	ldrb	r3, [r3, #24]
 8001d30:	4619      	mov	r1, r3
 8001d32:	4610      	mov	r0, r2
 8001d34:	f000 f880 	bl	8001e38 <word>
 8001d38:	4603      	mov	r3, r0
 8001d3a:	f003 0307 	and.w	r3, r3, #7
 8001d3e:	b29b      	uxth	r3, r3
 8001d40:	2b00      	cmp	r3, #0
 8001d42:	d002      	beq.n	8001d4a <validateRequest+0x1a6>
 8001d44:	897b      	ldrh	r3, [r7, #10]
 8001d46:	3301      	adds	r3, #1
 8001d48:	817b      	strh	r3, [r7, #10]
	    	u16NRegs = u16NRegs + 5; // adding the header  and CRC ( Slave address + Function code  + number of data bytes to follow + 2-byte CRC )
 8001d4a:	897b      	ldrh	r3, [r7, #10]
 8001d4c:	3305      	adds	r3, #5
 8001d4e:	817b      	strh	r3, [r7, #10]
	        if(u16NRegs > 256) return EXC_REGS_QUANT;
 8001d50:	897b      	ldrh	r3, [r7, #10]
 8001d52:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8001d56:	d960      	bls.n	8001e1a <validateRequest+0x276>
 8001d58:	2303      	movs	r3, #3
 8001d5a:	e066      	b.n	8001e2a <validateRequest+0x286>

	        break;
	    case MB_FC_WRITE_COIL:
	    	u16AdRegs = word( modH->u8Buffer[ ADD_HI ], modH->u8Buffer[ ADD_LO ]) / 16;
 8001d5c:	687b      	ldr	r3, [r7, #4]
 8001d5e:	7d5a      	ldrb	r2, [r3, #21]
 8001d60:	687b      	ldr	r3, [r7, #4]
 8001d62:	7d9b      	ldrb	r3, [r3, #22]
 8001d64:	4619      	mov	r1, r3
 8001d66:	4610      	mov	r0, r2
 8001d68:	f000 f866 	bl	8001e38 <word>
 8001d6c:	4603      	mov	r3, r0
 8001d6e:	091b      	lsrs	r3, r3, #4
 8001d70:	81bb      	strh	r3, [r7, #12]
	    	if(word( modH->u8Buffer[ ADD_HI ], modH->u8Buffer[ ADD_LO ]) % 16) u16AdRegs++;	// check for incomplete words
 8001d72:	687b      	ldr	r3, [r7, #4]
 8001d74:	7d5a      	ldrb	r2, [r3, #21]
 8001d76:	687b      	ldr	r3, [r7, #4]
 8001d78:	7d9b      	ldrb	r3, [r3, #22]
 8001d7a:	4619      	mov	r1, r3
 8001d7c:	4610      	mov	r0, r2
 8001d7e:	f000 f85b 	bl	8001e38 <word>
 8001d82:	4603      	mov	r3, r0
 8001d84:	f003 030f 	and.w	r3, r3, #15
 8001d88:	b29b      	uxth	r3, r3
 8001d8a:	2b00      	cmp	r3, #0
 8001d8c:	d002      	beq.n	8001d94 <validateRequest+0x1f0>
 8001d8e:	89bb      	ldrh	r3, [r7, #12]
 8001d90:	3301      	adds	r3, #1
 8001d92:	81bb      	strh	r3, [r7, #12]
	        if (u16AdRegs > modH->u16regsize) return EXC_ADDR_RANGE;
 8001d94:	687b      	ldr	r3, [r7, #4]
 8001d96:	f8b3 30a4 	ldrh.w	r3, [r3, #164]	; 0xa4
 8001d9a:	89ba      	ldrh	r2, [r7, #12]
 8001d9c:	429a      	cmp	r2, r3
 8001d9e:	d93e      	bls.n	8001e1e <validateRequest+0x27a>
 8001da0:	2302      	movs	r3, #2
 8001da2:	e042      	b.n	8001e2a <validateRequest+0x286>
	        break;
	    case MB_FC_WRITE_REGISTER :
	    	u16AdRegs = word( modH->u8Buffer[ ADD_HI ], modH->u8Buffer[ ADD_LO ]);
 8001da4:	687b      	ldr	r3, [r7, #4]
 8001da6:	7d5a      	ldrb	r2, [r3, #21]
 8001da8:	687b      	ldr	r3, [r7, #4]
 8001daa:	7d9b      	ldrb	r3, [r3, #22]
 8001dac:	4619      	mov	r1, r3
 8001dae:	4610      	mov	r0, r2
 8001db0:	f000 f842 	bl	8001e38 <word>
 8001db4:	4603      	mov	r3, r0
 8001db6:	81bb      	strh	r3, [r7, #12]
	        if (u16AdRegs > modH-> u16regsize) return EXC_ADDR_RANGE;
 8001db8:	687b      	ldr	r3, [r7, #4]
 8001dba:	f8b3 30a4 	ldrh.w	r3, [r3, #164]	; 0xa4
 8001dbe:	89ba      	ldrh	r2, [r7, #12]
 8001dc0:	429a      	cmp	r2, r3
 8001dc2:	d92e      	bls.n	8001e22 <validateRequest+0x27e>
 8001dc4:	2302      	movs	r3, #2
 8001dc6:	e030      	b.n	8001e2a <validateRequest+0x286>
	        break;
	    case MB_FC_READ_REGISTERS :
	    case MB_FC_READ_INPUT_REGISTER :
	    case MB_FC_WRITE_MULTIPLE_REGISTERS :
	    	u16AdRegs = word( modH->u8Buffer[ ADD_HI ], modH->u8Buffer[ ADD_LO ]);
 8001dc8:	687b      	ldr	r3, [r7, #4]
 8001dca:	7d5a      	ldrb	r2, [r3, #21]
 8001dcc:	687b      	ldr	r3, [r7, #4]
 8001dce:	7d9b      	ldrb	r3, [r3, #22]
 8001dd0:	4619      	mov	r1, r3
 8001dd2:	4610      	mov	r0, r2
 8001dd4:	f000 f830 	bl	8001e38 <word>
 8001dd8:	4603      	mov	r3, r0
 8001dda:	81bb      	strh	r3, [r7, #12]
	        u16NRegs = word( modH->u8Buffer[ NB_HI ], modH->u8Buffer[ NB_LO ]);
 8001ddc:	687b      	ldr	r3, [r7, #4]
 8001dde:	7dda      	ldrb	r2, [r3, #23]
 8001de0:	687b      	ldr	r3, [r7, #4]
 8001de2:	7e1b      	ldrb	r3, [r3, #24]
 8001de4:	4619      	mov	r1, r3
 8001de6:	4610      	mov	r0, r2
 8001de8:	f000 f826 	bl	8001e38 <word>
 8001dec:	4603      	mov	r3, r0
 8001dee:	817b      	strh	r3, [r7, #10]
	        if (( u16AdRegs + u16NRegs ) > modH->u16regsize) return EXC_ADDR_RANGE;
 8001df0:	89ba      	ldrh	r2, [r7, #12]
 8001df2:	897b      	ldrh	r3, [r7, #10]
 8001df4:	4413      	add	r3, r2
 8001df6:	687a      	ldr	r2, [r7, #4]
 8001df8:	f8b2 20a4 	ldrh.w	r2, [r2, #164]	; 0xa4
 8001dfc:	4293      	cmp	r3, r2
 8001dfe:	dd01      	ble.n	8001e04 <validateRequest+0x260>
 8001e00:	2302      	movs	r3, #2
 8001e02:	e012      	b.n	8001e2a <validateRequest+0x286>

	        //verify answer frame size in bytes
	        u16NRegs = u16NRegs*2 + 5; // adding the header  and CRC
 8001e04:	897b      	ldrh	r3, [r7, #10]
 8001e06:	005b      	lsls	r3, r3, #1
 8001e08:	b29b      	uxth	r3, r3
 8001e0a:	3305      	adds	r3, #5
 8001e0c:	817b      	strh	r3, [r7, #10]
	        if ( u16NRegs > 256 ) return EXC_REGS_QUANT;
 8001e0e:	897b      	ldrh	r3, [r7, #10]
 8001e10:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8001e14:	d907      	bls.n	8001e26 <validateRequest+0x282>
 8001e16:	2303      	movs	r3, #3
 8001e18:	e007      	b.n	8001e2a <validateRequest+0x286>
	        break;
 8001e1a:	bf00      	nop
 8001e1c:	e004      	b.n	8001e28 <validateRequest+0x284>
	        break;
 8001e1e:	bf00      	nop
 8001e20:	e002      	b.n	8001e28 <validateRequest+0x284>
	        break;
 8001e22:	bf00      	nop
 8001e24:	e000      	b.n	8001e28 <validateRequest+0x284>
	        break;
 8001e26:	bf00      	nop
	    }
	    return 0; // OK, no exception code thrown
 8001e28:	2300      	movs	r3, #0

}
 8001e2a:	4618      	mov	r0, r3
 8001e2c:	3710      	adds	r7, #16
 8001e2e:	46bd      	mov	sp, r7
 8001e30:	bd80      	pop	{r7, pc}
 8001e32:	bf00      	nop
 8001e34:	0800970c 	.word	0x0800970c

08001e38 <word>:
 * @return uint16_t (word)
 * @ingroup H  Most significant byte
 * @ingroup L  Less significant byte
 */
uint16_t word(uint8_t H, uint8_t L)
{
 8001e38:	b480      	push	{r7}
 8001e3a:	b085      	sub	sp, #20
 8001e3c:	af00      	add	r7, sp, #0
 8001e3e:	4603      	mov	r3, r0
 8001e40:	460a      	mov	r2, r1
 8001e42:	71fb      	strb	r3, [r7, #7]
 8001e44:	4613      	mov	r3, r2
 8001e46:	71bb      	strb	r3, [r7, #6]
	bytesFields W;
	W.u8[0] = L;
 8001e48:	79bb      	ldrb	r3, [r7, #6]
 8001e4a:	733b      	strb	r3, [r7, #12]
	W.u8[1] = H;
 8001e4c:	79fb      	ldrb	r3, [r7, #7]
 8001e4e:	737b      	strb	r3, [r7, #13]

	return W.u16[0];
 8001e50:	89bb      	ldrh	r3, [r7, #12]
}
 8001e52:	4618      	mov	r0, r3
 8001e54:	3714      	adds	r7, #20
 8001e56:	46bd      	mov	sp, r7
 8001e58:	bc80      	pop	{r7}
 8001e5a:	4770      	bx	lr

08001e5c <calcCRC>:
 * @return uint16_t calculated CRC value for the message
 * @ingroup Buffer
 * @ingroup u8length
 */
uint16_t calcCRC(uint8_t *Buffer, uint8_t u8length)
{
 8001e5c:	b480      	push	{r7}
 8001e5e:	b087      	sub	sp, #28
 8001e60:	af00      	add	r7, sp, #0
 8001e62:	6078      	str	r0, [r7, #4]
 8001e64:	460b      	mov	r3, r1
 8001e66:	70fb      	strb	r3, [r7, #3]
    unsigned int temp, temp2, flag;
    temp = 0xFFFF;
 8001e68:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8001e6c:	617b      	str	r3, [r7, #20]
    for (unsigned char i = 0; i < u8length; i++)
 8001e6e:	2300      	movs	r3, #0
 8001e70:	74fb      	strb	r3, [r7, #19]
 8001e72:	e023      	b.n	8001ebc <calcCRC+0x60>
    {
        temp = temp ^ Buffer[i];
 8001e74:	7cfb      	ldrb	r3, [r7, #19]
 8001e76:	687a      	ldr	r2, [r7, #4]
 8001e78:	4413      	add	r3, r2
 8001e7a:	781b      	ldrb	r3, [r3, #0]
 8001e7c:	461a      	mov	r2, r3
 8001e7e:	697b      	ldr	r3, [r7, #20]
 8001e80:	4053      	eors	r3, r2
 8001e82:	617b      	str	r3, [r7, #20]
        for (unsigned char j = 1; j <= 8; j++)
 8001e84:	2301      	movs	r3, #1
 8001e86:	74bb      	strb	r3, [r7, #18]
 8001e88:	e012      	b.n	8001eb0 <calcCRC+0x54>
        {
            flag = temp & 0x0001;
 8001e8a:	697b      	ldr	r3, [r7, #20]
 8001e8c:	f003 0301 	and.w	r3, r3, #1
 8001e90:	60bb      	str	r3, [r7, #8]
            temp >>=1;
 8001e92:	697b      	ldr	r3, [r7, #20]
 8001e94:	085b      	lsrs	r3, r3, #1
 8001e96:	617b      	str	r3, [r7, #20]
            if (flag)
 8001e98:	68bb      	ldr	r3, [r7, #8]
 8001e9a:	2b00      	cmp	r3, #0
 8001e9c:	d005      	beq.n	8001eaa <calcCRC+0x4e>
                temp ^= 0xA001;
 8001e9e:	697b      	ldr	r3, [r7, #20]
 8001ea0:	f483 4320 	eor.w	r3, r3, #40960	; 0xa000
 8001ea4:	f083 0301 	eor.w	r3, r3, #1
 8001ea8:	617b      	str	r3, [r7, #20]
        for (unsigned char j = 1; j <= 8; j++)
 8001eaa:	7cbb      	ldrb	r3, [r7, #18]
 8001eac:	3301      	adds	r3, #1
 8001eae:	74bb      	strb	r3, [r7, #18]
 8001eb0:	7cbb      	ldrb	r3, [r7, #18]
 8001eb2:	2b08      	cmp	r3, #8
 8001eb4:	d9e9      	bls.n	8001e8a <calcCRC+0x2e>
    for (unsigned char i = 0; i < u8length; i++)
 8001eb6:	7cfb      	ldrb	r3, [r7, #19]
 8001eb8:	3301      	adds	r3, #1
 8001eba:	74fb      	strb	r3, [r7, #19]
 8001ebc:	7cfa      	ldrb	r2, [r7, #19]
 8001ebe:	78fb      	ldrb	r3, [r7, #3]
 8001ec0:	429a      	cmp	r2, r3
 8001ec2:	d3d7      	bcc.n	8001e74 <calcCRC+0x18>
        }
    }
    // Reverse byte order.
    temp2 = temp >> 8;
 8001ec4:	697b      	ldr	r3, [r7, #20]
 8001ec6:	0a1b      	lsrs	r3, r3, #8
 8001ec8:	60fb      	str	r3, [r7, #12]
    temp = (temp << 8) | temp2;
 8001eca:	697b      	ldr	r3, [r7, #20]
 8001ecc:	021b      	lsls	r3, r3, #8
 8001ece:	68fa      	ldr	r2, [r7, #12]
 8001ed0:	4313      	orrs	r3, r2
 8001ed2:	617b      	str	r3, [r7, #20]
    temp &= 0xFFFF;
 8001ed4:	697b      	ldr	r3, [r7, #20]
 8001ed6:	b29b      	uxth	r3, r3
 8001ed8:	617b      	str	r3, [r7, #20]
    // the returned value is already swapped
    // crcLo byte is first & crcHi byte is last
    return temp;
 8001eda:	697b      	ldr	r3, [r7, #20]
 8001edc:	b29b      	uxth	r3, r3

}
 8001ede:	4618      	mov	r0, r3
 8001ee0:	371c      	adds	r7, #28
 8001ee2:	46bd      	mov	sp, r7
 8001ee4:	bc80      	pop	{r7}
 8001ee6:	4770      	bx	lr

08001ee8 <buildException>:
 *
 * @ingroup u8exception exception number
 * @ingroup modH modbus handler
 */
void buildException( uint8_t u8exception, modbusHandler_t *modH )
{
 8001ee8:	b480      	push	{r7}
 8001eea:	b085      	sub	sp, #20
 8001eec:	af00      	add	r7, sp, #0
 8001eee:	4603      	mov	r3, r0
 8001ef0:	6039      	str	r1, [r7, #0]
 8001ef2:	71fb      	strb	r3, [r7, #7]
    uint8_t u8func = modH->u8Buffer[ FUNC ];  // get the original FUNC code
 8001ef4:	683b      	ldr	r3, [r7, #0]
 8001ef6:	7d1b      	ldrb	r3, [r3, #20]
 8001ef8:	73fb      	strb	r3, [r7, #15]

    modH->u8Buffer[ ID ]      = modH->u8id;
 8001efa:	683b      	ldr	r3, [r7, #0]
 8001efc:	7a1a      	ldrb	r2, [r3, #8]
 8001efe:	683b      	ldr	r3, [r7, #0]
 8001f00:	74da      	strb	r2, [r3, #19]
    modH->u8Buffer[ FUNC ]    = u8func + 0x80;
 8001f02:	7bfb      	ldrb	r3, [r7, #15]
 8001f04:	3b80      	subs	r3, #128	; 0x80
 8001f06:	b2da      	uxtb	r2, r3
 8001f08:	683b      	ldr	r3, [r7, #0]
 8001f0a:	751a      	strb	r2, [r3, #20]
    modH->u8Buffer[ 2 ]       = u8exception;
 8001f0c:	683b      	ldr	r3, [r7, #0]
 8001f0e:	79fa      	ldrb	r2, [r7, #7]
 8001f10:	755a      	strb	r2, [r3, #21]
    modH->u8BufferSize         = EXCEPTION_SIZE;
 8001f12:	683b      	ldr	r3, [r7, #0]
 8001f14:	2203      	movs	r2, #3
 8001f16:	f883 2093 	strb.w	r2, [r3, #147]	; 0x93
}
 8001f1a:	bf00      	nop
 8001f1c:	3714      	adds	r7, #20
 8001f1e:	46bd      	mov	sp, r7
 8001f20:	bc80      	pop	{r7}
 8001f22:	4770      	bx	lr

08001f24 <sendTxBuffer>:
 *
 * @return nothing
 * @ingroup modH Modbus handler
 */
static void sendTxBuffer(modbusHandler_t *modH)
{
 8001f24:	b590      	push	{r4, r7, lr}
 8001f26:	b087      	sub	sp, #28
 8001f28:	af02      	add	r7, sp, #8
 8001f2a:	6078      	str	r0, [r7, #4]
#if  ENABLE_TCP == 1
if(modH->xTypeHW != TCP_HW)
	 {
#endif

	uint16_t u16crc = calcCRC(modH->u8Buffer, modH->u8BufferSize);
 8001f2c:	687b      	ldr	r3, [r7, #4]
 8001f2e:	f103 0213 	add.w	r2, r3, #19
 8001f32:	687b      	ldr	r3, [r7, #4]
 8001f34:	f893 3093 	ldrb.w	r3, [r3, #147]	; 0x93
 8001f38:	4619      	mov	r1, r3
 8001f3a:	4610      	mov	r0, r2
 8001f3c:	f7ff ff8e 	bl	8001e5c <calcCRC>
 8001f40:	4603      	mov	r3, r0
 8001f42:	81fb      	strh	r3, [r7, #14]
    modH->u8Buffer[ modH->u8BufferSize ] = u16crc >> 8;
 8001f44:	89fb      	ldrh	r3, [r7, #14]
 8001f46:	0a1b      	lsrs	r3, r3, #8
 8001f48:	b29a      	uxth	r2, r3
 8001f4a:	687b      	ldr	r3, [r7, #4]
 8001f4c:	f893 3093 	ldrb.w	r3, [r3, #147]	; 0x93
 8001f50:	4619      	mov	r1, r3
 8001f52:	b2d2      	uxtb	r2, r2
 8001f54:	687b      	ldr	r3, [r7, #4]
 8001f56:	440b      	add	r3, r1
 8001f58:	74da      	strb	r2, [r3, #19]
    modH->u8BufferSize++;
 8001f5a:	687b      	ldr	r3, [r7, #4]
 8001f5c:	f893 3093 	ldrb.w	r3, [r3, #147]	; 0x93
 8001f60:	3301      	adds	r3, #1
 8001f62:	b2da      	uxtb	r2, r3
 8001f64:	687b      	ldr	r3, [r7, #4]
 8001f66:	f883 2093 	strb.w	r2, [r3, #147]	; 0x93
    modH->u8Buffer[ modH->u8BufferSize ] = u16crc & 0x00ff;
 8001f6a:	687b      	ldr	r3, [r7, #4]
 8001f6c:	f893 3093 	ldrb.w	r3, [r3, #147]	; 0x93
 8001f70:	4619      	mov	r1, r3
 8001f72:	89fb      	ldrh	r3, [r7, #14]
 8001f74:	b2da      	uxtb	r2, r3
 8001f76:	687b      	ldr	r3, [r7, #4]
 8001f78:	440b      	add	r3, r1
 8001f7a:	74da      	strb	r2, [r3, #19]
    modH->u8BufferSize++;
 8001f7c:	687b      	ldr	r3, [r7, #4]
 8001f7e:	f893 3093 	ldrb.w	r3, [r3, #147]	; 0x93
 8001f82:	3301      	adds	r3, #1
 8001f84:	b2da      	uxtb	r2, r3
 8001f86:	687b      	ldr	r3, [r7, #4]
 8001f88:	f883 2093 	strb.w	r2, [r3, #147]	; 0x93
#if ENABLE_USB_CDC == 1 || ENABLE_TCP == 1
    if(modH->xTypeHW == USART_HW || modH->xTypeHW == USART_HW_DMA )
    {
#endif

    	if (modH->EN_Port != NULL)
 8001f8c:	687b      	ldr	r3, [r7, #4]
 8001f8e:	68db      	ldr	r3, [r3, #12]
 8001f90:	2b00      	cmp	r3, #0
 8001f92:	d007      	beq.n	8001fa4 <sendTxBuffer+0x80>
        {
    		//enable transmitter, disable receiver to avoid echo on RS485 transceivers
//    		HAL_HalfDuplex_EnableTransmitter(modH->port);
    		HAL_GPIO_WritePin(modH->EN_Port, modH->EN_Pin, GPIO_PIN_SET);
 8001f94:	687b      	ldr	r3, [r7, #4]
 8001f96:	68d8      	ldr	r0, [r3, #12]
 8001f98:	687b      	ldr	r3, [r7, #4]
 8001f9a:	8a1b      	ldrh	r3, [r3, #16]
 8001f9c:	2201      	movs	r2, #1
 8001f9e:	4619      	mov	r1, r3
 8001fa0:	f001 ff2d 	bl	8003dfe <HAL_GPIO_WritePin>
#if ENABLE_USART_DMA ==1
    	if(modH->xTypeHW == USART_HW)
    	{
#endif
    		// transfer buffer to serial line IT
    		HAL_UART_Transmit_IT(modH->port, modH->u8Buffer,  modH->u8BufferSize);
 8001fa4:	687b      	ldr	r3, [r7, #4]
 8001fa6:	6858      	ldr	r0, [r3, #4]
 8001fa8:	687b      	ldr	r3, [r7, #4]
 8001faa:	f103 0113 	add.w	r1, r3, #19
 8001fae:	687b      	ldr	r3, [r7, #4]
 8001fb0:	f893 3093 	ldrb.w	r3, [r3, #147]	; 0x93
 8001fb4:	b29b      	uxth	r3, r3
 8001fb6:	461a      	mov	r2, r3
 8001fb8:	f003 fa6d 	bl	8005496 <HAL_UART_Transmit_IT>
        	HAL_UART_Transmit_DMA(modH->port, modH->u8Buffer, modH->u8BufferSize);

        }
#endif

        ulTaskNotifyTake(pdTRUE, 250); //wait notification from TXE interrupt
 8001fbc:	21fa      	movs	r1, #250	; 0xfa
 8001fbe:	2001      	movs	r0, #1
 8001fc0:	f006 f9a2 	bl	8008308 <ulTaskNotifyTake>
*/
#if defined(STM32H7)  || defined(STM32F3) || defined(STM32L4)  
          while((modH->port->Instance->ISR & USART_ISR_TC) ==0 )
#else
          // F429, F103, L152 ...
	  while((modH->port->Instance->SR & USART_SR_TC) ==0 )
 8001fc4:	bf00      	nop
 8001fc6:	687b      	ldr	r3, [r7, #4]
 8001fc8:	685b      	ldr	r3, [r3, #4]
 8001fca:	681b      	ldr	r3, [r3, #0]
 8001fcc:	681b      	ldr	r3, [r3, #0]
 8001fce:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001fd2:	2b00      	cmp	r3, #0
 8001fd4:	d0f7      	beq.n	8001fc6 <sendTxBuffer+0xa2>
         {
 	        //block the task until the the last byte is send out of the shifting buffer in USART
         }


         if (modH->EN_Port != NULL)
 8001fd6:	687b      	ldr	r3, [r7, #4]
 8001fd8:	68db      	ldr	r3, [r3, #12]
 8001fda:	2b00      	cmp	r3, #0
 8001fdc:	d007      	beq.n	8001fee <sendTxBuffer+0xca>
         {

             //return RS485 transceiver to receive mode
        	 HAL_GPIO_WritePin(modH->EN_Port, modH->EN_Pin, GPIO_PIN_RESET);
 8001fde:	687b      	ldr	r3, [r7, #4]
 8001fe0:	68d8      	ldr	r0, [r3, #12]
 8001fe2:	687b      	ldr	r3, [r7, #4]
 8001fe4:	8a1b      	ldrh	r3, [r3, #16]
 8001fe6:	2200      	movs	r2, #0
 8001fe8:	4619      	mov	r1, r3
 8001fea:	f001 ff08 	bl	8003dfe <HAL_GPIO_WritePin>
//        	 HAL_HalfDuplex_EnableReceiver(modH->port);

         }

         // set timeout for master query
         if(modH->uModbusType == MB_MASTER )
 8001fee:	687b      	ldr	r3, [r7, #4]
 8001ff0:	781b      	ldrb	r3, [r3, #0]
 8001ff2:	2b04      	cmp	r3, #4
 8001ff4:	d10c      	bne.n	8002010 <sendTxBuffer+0xec>
         {
        	 xTimerReset(modH->xTimerTimeout,0);
 8001ff6:	687b      	ldr	r3, [r7, #4]
 8001ff8:	f8d3 40b4 	ldr.w	r4, [r3, #180]	; 0xb4
 8001ffc:	f005 fca4 	bl	8007948 <xTaskGetTickCount>
 8002000:	4602      	mov	r2, r0
 8002002:	2300      	movs	r3, #0
 8002004:	9300      	str	r3, [sp, #0]
 8002006:	2300      	movs	r3, #0
 8002008:	2102      	movs	r1, #2
 800200a:	4620      	mov	r0, r4
 800200c:	f006 fc22 	bl	8008854 <xTimerGenericCommand>

#endif

#endif

     modH->u8BufferSize = 0;
 8002010:	687b      	ldr	r3, [r7, #4]
 8002012:	2200      	movs	r2, #0
 8002014:	f883 2093 	strb.w	r2, [r3, #147]	; 0x93
     // increase message counter
     modH->u16OutCnt++;
 8002018:	687b      	ldr	r3, [r7, #4]
 800201a:	f8b3 309e 	ldrh.w	r3, [r3, #158]	; 0x9e
 800201e:	3301      	adds	r3, #1
 8002020:	b29a      	uxth	r2, r3
 8002022:	687b      	ldr	r3, [r7, #4]
 8002024:	f8a3 209e 	strh.w	r2, [r3, #158]	; 0x9e


}
 8002028:	bf00      	nop
 800202a:	3714      	adds	r7, #20
 800202c:	46bd      	mov	sp, r7
 800202e:	bd90      	pop	{r4, r7, pc}

08002030 <process_FC1>:
 *
 * @return u8BufferSize Response to master length
 * @ingroup discrete
 */
int8_t process_FC1(modbusHandler_t *modH )
{
 8002030:	b580      	push	{r7, lr}
 8002032:	b086      	sub	sp, #24
 8002034:	af00      	add	r7, sp, #0
 8002036:	6078      	str	r0, [r7, #4]
    uint8_t u8currentBit, u8bytesno, u8bitsno;
    uint8_t u8CopyBufferSize;
    uint16_t u16currentCoil, u16coil;

    // get the first and last coil from the message
    uint16_t u16StartCoil = word( modH->u8Buffer[ ADD_HI ], modH->u8Buffer[ ADD_LO ] );
 8002038:	687b      	ldr	r3, [r7, #4]
 800203a:	7d5a      	ldrb	r2, [r3, #21]
 800203c:	687b      	ldr	r3, [r7, #4]
 800203e:	7d9b      	ldrb	r3, [r3, #22]
 8002040:	4619      	mov	r1, r3
 8002042:	4610      	mov	r0, r2
 8002044:	f7ff fef8 	bl	8001e38 <word>
 8002048:	4603      	mov	r3, r0
 800204a:	827b      	strh	r3, [r7, #18]
    uint16_t u16Coilno = word( modH->u8Buffer[ NB_HI ], modH->u8Buffer[ NB_LO ] );
 800204c:	687b      	ldr	r3, [r7, #4]
 800204e:	7dda      	ldrb	r2, [r3, #23]
 8002050:	687b      	ldr	r3, [r7, #4]
 8002052:	7e1b      	ldrb	r3, [r3, #24]
 8002054:	4619      	mov	r1, r3
 8002056:	4610      	mov	r0, r2
 8002058:	f7ff feee 	bl	8001e38 <word>
 800205c:	4603      	mov	r3, r0
 800205e:	823b      	strh	r3, [r7, #16]

    // put the number of bytes in the outcoming message
    u8bytesno = (uint8_t) (u16Coilno / 8);
 8002060:	8a3b      	ldrh	r3, [r7, #16]
 8002062:	08db      	lsrs	r3, r3, #3
 8002064:	b29b      	uxth	r3, r3
 8002066:	75fb      	strb	r3, [r7, #23]
    if (u16Coilno % 8 != 0) u8bytesno ++;
 8002068:	8a3b      	ldrh	r3, [r7, #16]
 800206a:	f003 0307 	and.w	r3, r3, #7
 800206e:	b29b      	uxth	r3, r3
 8002070:	2b00      	cmp	r3, #0
 8002072:	d002      	beq.n	800207a <process_FC1+0x4a>
 8002074:	7dfb      	ldrb	r3, [r7, #23]
 8002076:	3301      	adds	r3, #1
 8002078:	75fb      	strb	r3, [r7, #23]
    modH->u8Buffer[ ADD_HI ]  = u8bytesno;
 800207a:	687b      	ldr	r3, [r7, #4]
 800207c:	7dfa      	ldrb	r2, [r7, #23]
 800207e:	755a      	strb	r2, [r3, #21]
    modH->u8BufferSize         = ADD_LO;
 8002080:	687b      	ldr	r3, [r7, #4]
 8002082:	2203      	movs	r2, #3
 8002084:	f883 2093 	strb.w	r2, [r3, #147]	; 0x93
    modH->u8Buffer[modH->u8BufferSize + u8bytesno - 1 ] = 0;
 8002088:	687b      	ldr	r3, [r7, #4]
 800208a:	f893 3093 	ldrb.w	r3, [r3, #147]	; 0x93
 800208e:	461a      	mov	r2, r3
 8002090:	7dfb      	ldrb	r3, [r7, #23]
 8002092:	4413      	add	r3, r2
 8002094:	3b01      	subs	r3, #1
 8002096:	687a      	ldr	r2, [r7, #4]
 8002098:	4413      	add	r3, r2
 800209a:	2200      	movs	r2, #0
 800209c:	74da      	strb	r2, [r3, #19]

    // read each coil from the register map and put its value inside the outcoming message
    u8bitsno = 0;
 800209e:	2300      	movs	r3, #0
 80020a0:	75bb      	strb	r3, [r7, #22]

    for (u16currentCoil = 0; u16currentCoil < u16Coilno; u16currentCoil++)
 80020a2:	2300      	movs	r3, #0
 80020a4:	82bb      	strh	r3, [r7, #20]
 80020a6:	e058      	b.n	800215a <process_FC1+0x12a>
    {
        u16coil = u16StartCoil + u16currentCoil;
 80020a8:	8a7a      	ldrh	r2, [r7, #18]
 80020aa:	8abb      	ldrh	r3, [r7, #20]
 80020ac:	4413      	add	r3, r2
 80020ae:	81bb      	strh	r3, [r7, #12]
        u16currentRegister =  (u16coil / 16);
 80020b0:	89bb      	ldrh	r3, [r7, #12]
 80020b2:	091b      	lsrs	r3, r3, #4
 80020b4:	817b      	strh	r3, [r7, #10]
        u8currentBit = (uint8_t) (u16coil % 16);
 80020b6:	89bb      	ldrh	r3, [r7, #12]
 80020b8:	b2db      	uxtb	r3, r3
 80020ba:	f003 030f 	and.w	r3, r3, #15
 80020be:	727b      	strb	r3, [r7, #9]

        bitWrite(
 80020c0:	687b      	ldr	r3, [r7, #4]
 80020c2:	f8d3 2098 	ldr.w	r2, [r3, #152]	; 0x98
 80020c6:	897b      	ldrh	r3, [r7, #10]
 80020c8:	005b      	lsls	r3, r3, #1
 80020ca:	4413      	add	r3, r2
 80020cc:	881b      	ldrh	r3, [r3, #0]
 80020ce:	461a      	mov	r2, r3
 80020d0:	7a7b      	ldrb	r3, [r7, #9]
 80020d2:	fa42 f303 	asr.w	r3, r2, r3
 80020d6:	f003 0301 	and.w	r3, r3, #1
 80020da:	2b00      	cmp	r3, #0
 80020dc:	d014      	beq.n	8002108 <process_FC1+0xd8>
 80020de:	687b      	ldr	r3, [r7, #4]
 80020e0:	f893 3093 	ldrb.w	r3, [r3, #147]	; 0x93
 80020e4:	461a      	mov	r2, r3
 80020e6:	687b      	ldr	r3, [r7, #4]
 80020e8:	4413      	add	r3, r2
 80020ea:	7cda      	ldrb	r2, [r3, #19]
 80020ec:	7dbb      	ldrb	r3, [r7, #22]
 80020ee:	2101      	movs	r1, #1
 80020f0:	fa01 f303 	lsl.w	r3, r1, r3
 80020f4:	b2db      	uxtb	r3, r3
 80020f6:	6879      	ldr	r1, [r7, #4]
 80020f8:	f891 1093 	ldrb.w	r1, [r1, #147]	; 0x93
 80020fc:	4313      	orrs	r3, r2
 80020fe:	b2da      	uxtb	r2, r3
 8002100:	687b      	ldr	r3, [r7, #4]
 8002102:	440b      	add	r3, r1
 8002104:	74da      	strb	r2, [r3, #19]
 8002106:	e015      	b.n	8002134 <process_FC1+0x104>
 8002108:	687b      	ldr	r3, [r7, #4]
 800210a:	f893 3093 	ldrb.w	r3, [r3, #147]	; 0x93
 800210e:	461a      	mov	r2, r3
 8002110:	687b      	ldr	r3, [r7, #4]
 8002112:	4413      	add	r3, r2
 8002114:	7cda      	ldrb	r2, [r3, #19]
 8002116:	7dbb      	ldrb	r3, [r7, #22]
 8002118:	2101      	movs	r1, #1
 800211a:	fa01 f303 	lsl.w	r3, r1, r3
 800211e:	b2db      	uxtb	r3, r3
 8002120:	43db      	mvns	r3, r3
 8002122:	b2db      	uxtb	r3, r3
 8002124:	6879      	ldr	r1, [r7, #4]
 8002126:	f891 1093 	ldrb.w	r1, [r1, #147]	; 0x93
 800212a:	4013      	ands	r3, r2
 800212c:	b2da      	uxtb	r2, r3
 800212e:	687b      	ldr	r3, [r7, #4]
 8002130:	440b      	add	r3, r1
 8002132:	74da      	strb	r2, [r3, #19]
        	modH->u8Buffer[ modH->u8BufferSize ],
            u8bitsno,
		    bitRead( modH->u16regs[ u16currentRegister ], u8currentBit ) );
        u8bitsno ++;
 8002134:	7dbb      	ldrb	r3, [r7, #22]
 8002136:	3301      	adds	r3, #1
 8002138:	75bb      	strb	r3, [r7, #22]

        if (u8bitsno > 7)
 800213a:	7dbb      	ldrb	r3, [r7, #22]
 800213c:	2b07      	cmp	r3, #7
 800213e:	d909      	bls.n	8002154 <process_FC1+0x124>
        {
            u8bitsno = 0;
 8002140:	2300      	movs	r3, #0
 8002142:	75bb      	strb	r3, [r7, #22]
            modH->u8BufferSize++;
 8002144:	687b      	ldr	r3, [r7, #4]
 8002146:	f893 3093 	ldrb.w	r3, [r3, #147]	; 0x93
 800214a:	3301      	adds	r3, #1
 800214c:	b2da      	uxtb	r2, r3
 800214e:	687b      	ldr	r3, [r7, #4]
 8002150:	f883 2093 	strb.w	r2, [r3, #147]	; 0x93
    for (u16currentCoil = 0; u16currentCoil < u16Coilno; u16currentCoil++)
 8002154:	8abb      	ldrh	r3, [r7, #20]
 8002156:	3301      	adds	r3, #1
 8002158:	82bb      	strh	r3, [r7, #20]
 800215a:	8aba      	ldrh	r2, [r7, #20]
 800215c:	8a3b      	ldrh	r3, [r7, #16]
 800215e:	429a      	cmp	r2, r3
 8002160:	d3a2      	bcc.n	80020a8 <process_FC1+0x78>
        }
    }

    // send outcoming message
    if (u16Coilno % 8 != 0) modH->u8BufferSize ++;
 8002162:	8a3b      	ldrh	r3, [r7, #16]
 8002164:	f003 0307 	and.w	r3, r3, #7
 8002168:	b29b      	uxth	r3, r3
 800216a:	2b00      	cmp	r3, #0
 800216c:	d007      	beq.n	800217e <process_FC1+0x14e>
 800216e:	687b      	ldr	r3, [r7, #4]
 8002170:	f893 3093 	ldrb.w	r3, [r3, #147]	; 0x93
 8002174:	3301      	adds	r3, #1
 8002176:	b2da      	uxtb	r2, r3
 8002178:	687b      	ldr	r3, [r7, #4]
 800217a:	f883 2093 	strb.w	r2, [r3, #147]	; 0x93
    u8CopyBufferSize = modH->u8BufferSize +2;
 800217e:	687b      	ldr	r3, [r7, #4]
 8002180:	f893 3093 	ldrb.w	r3, [r3, #147]	; 0x93
 8002184:	3302      	adds	r3, #2
 8002186:	73fb      	strb	r3, [r7, #15]
    sendTxBuffer(modH);
 8002188:	6878      	ldr	r0, [r7, #4]
 800218a:	f7ff fecb 	bl	8001f24 <sendTxBuffer>
    return u8CopyBufferSize;
 800218e:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8002192:	4618      	mov	r0, r3
 8002194:	3718      	adds	r7, #24
 8002196:	46bd      	mov	sp, r7
 8002198:	bd80      	pop	{r7, pc}

0800219a <process_FC3>:
 *
 * @return u8BufferSize Response to master length
 * @ingroup register
 */
int8_t process_FC3(modbusHandler_t *modH)
{
 800219a:	b580      	push	{r7, lr}
 800219c:	b084      	sub	sp, #16
 800219e:	af00      	add	r7, sp, #0
 80021a0:	6078      	str	r0, [r7, #4]

    uint16_t u16StartAdd = word( modH->u8Buffer[ ADD_HI ], modH->u8Buffer[ ADD_LO ] );
 80021a2:	687b      	ldr	r3, [r7, #4]
 80021a4:	7d5a      	ldrb	r2, [r3, #21]
 80021a6:	687b      	ldr	r3, [r7, #4]
 80021a8:	7d9b      	ldrb	r3, [r3, #22]
 80021aa:	4619      	mov	r1, r3
 80021ac:	4610      	mov	r0, r2
 80021ae:	f7ff fe43 	bl	8001e38 <word>
 80021b2:	4603      	mov	r3, r0
 80021b4:	81bb      	strh	r3, [r7, #12]
    uint8_t u8regsno = word( modH->u8Buffer[ NB_HI ], modH->u8Buffer[ NB_LO ] );
 80021b6:	687b      	ldr	r3, [r7, #4]
 80021b8:	7dda      	ldrb	r2, [r3, #23]
 80021ba:	687b      	ldr	r3, [r7, #4]
 80021bc:	7e1b      	ldrb	r3, [r3, #24]
 80021be:	4619      	mov	r1, r3
 80021c0:	4610      	mov	r0, r2
 80021c2:	f7ff fe39 	bl	8001e38 <word>
 80021c6:	4603      	mov	r3, r0
 80021c8:	72fb      	strb	r3, [r7, #11]
    uint8_t u8CopyBufferSize;
    uint16_t i;

    modH->u8Buffer[ 2 ]       = u8regsno * 2;
 80021ca:	7afb      	ldrb	r3, [r7, #11]
 80021cc:	005b      	lsls	r3, r3, #1
 80021ce:	b2da      	uxtb	r2, r3
 80021d0:	687b      	ldr	r3, [r7, #4]
 80021d2:	755a      	strb	r2, [r3, #21]
    modH->u8BufferSize         = 3;
 80021d4:	687b      	ldr	r3, [r7, #4]
 80021d6:	2203      	movs	r2, #3
 80021d8:	f883 2093 	strb.w	r2, [r3, #147]	; 0x93

    for (i = u16StartAdd; i < u16StartAdd + u8regsno; i++)
 80021dc:	89bb      	ldrh	r3, [r7, #12]
 80021de:	81fb      	strh	r3, [r7, #14]
 80021e0:	e032      	b.n	8002248 <process_FC3+0xae>
    {
    	modH->u8Buffer[ modH->u8BufferSize ] = highByte(modH->u16regs[i]);
 80021e2:	687b      	ldr	r3, [r7, #4]
 80021e4:	f8d3 2098 	ldr.w	r2, [r3, #152]	; 0x98
 80021e8:	89fb      	ldrh	r3, [r7, #14]
 80021ea:	005b      	lsls	r3, r3, #1
 80021ec:	4413      	add	r3, r2
 80021ee:	881b      	ldrh	r3, [r3, #0]
 80021f0:	0a1b      	lsrs	r3, r3, #8
 80021f2:	b29a      	uxth	r2, r3
 80021f4:	687b      	ldr	r3, [r7, #4]
 80021f6:	f893 3093 	ldrb.w	r3, [r3, #147]	; 0x93
 80021fa:	4619      	mov	r1, r3
 80021fc:	b2d2      	uxtb	r2, r2
 80021fe:	687b      	ldr	r3, [r7, #4]
 8002200:	440b      	add	r3, r1
 8002202:	74da      	strb	r2, [r3, #19]
    	modH->u8BufferSize++;
 8002204:	687b      	ldr	r3, [r7, #4]
 8002206:	f893 3093 	ldrb.w	r3, [r3, #147]	; 0x93
 800220a:	3301      	adds	r3, #1
 800220c:	b2da      	uxtb	r2, r3
 800220e:	687b      	ldr	r3, [r7, #4]
 8002210:	f883 2093 	strb.w	r2, [r3, #147]	; 0x93
    	modH->u8Buffer[ modH->u8BufferSize ] = lowByte(modH->u16regs[i]);
 8002214:	687b      	ldr	r3, [r7, #4]
 8002216:	f8d3 2098 	ldr.w	r2, [r3, #152]	; 0x98
 800221a:	89fb      	ldrh	r3, [r7, #14]
 800221c:	005b      	lsls	r3, r3, #1
 800221e:	4413      	add	r3, r2
 8002220:	881a      	ldrh	r2, [r3, #0]
 8002222:	687b      	ldr	r3, [r7, #4]
 8002224:	f893 3093 	ldrb.w	r3, [r3, #147]	; 0x93
 8002228:	4619      	mov	r1, r3
 800222a:	b2d2      	uxtb	r2, r2
 800222c:	687b      	ldr	r3, [r7, #4]
 800222e:	440b      	add	r3, r1
 8002230:	74da      	strb	r2, [r3, #19]
    	modH->u8BufferSize++;
 8002232:	687b      	ldr	r3, [r7, #4]
 8002234:	f893 3093 	ldrb.w	r3, [r3, #147]	; 0x93
 8002238:	3301      	adds	r3, #1
 800223a:	b2da      	uxtb	r2, r3
 800223c:	687b      	ldr	r3, [r7, #4]
 800223e:	f883 2093 	strb.w	r2, [r3, #147]	; 0x93
    for (i = u16StartAdd; i < u16StartAdd + u8regsno; i++)
 8002242:	89fb      	ldrh	r3, [r7, #14]
 8002244:	3301      	adds	r3, #1
 8002246:	81fb      	strh	r3, [r7, #14]
 8002248:	89fa      	ldrh	r2, [r7, #14]
 800224a:	89b9      	ldrh	r1, [r7, #12]
 800224c:	7afb      	ldrb	r3, [r7, #11]
 800224e:	440b      	add	r3, r1
 8002250:	429a      	cmp	r2, r3
 8002252:	dbc6      	blt.n	80021e2 <process_FC3+0x48>
    }
    u8CopyBufferSize = modH->u8BufferSize +2;
 8002254:	687b      	ldr	r3, [r7, #4]
 8002256:	f893 3093 	ldrb.w	r3, [r3, #147]	; 0x93
 800225a:	3302      	adds	r3, #2
 800225c:	72bb      	strb	r3, [r7, #10]
    sendTxBuffer(modH);
 800225e:	6878      	ldr	r0, [r7, #4]
 8002260:	f7ff fe60 	bl	8001f24 <sendTxBuffer>

    return u8CopyBufferSize;
 8002264:	f997 300a 	ldrsb.w	r3, [r7, #10]
}
 8002268:	4618      	mov	r0, r3
 800226a:	3710      	adds	r7, #16
 800226c:	46bd      	mov	sp, r7
 800226e:	bd80      	pop	{r7, pc}

08002270 <process_FC5>:
 *
 * @return u8BufferSize Response to master length
 * @ingroup discrete
 */
int8_t process_FC5( modbusHandler_t *modH )
{
 8002270:	b580      	push	{r7, lr}
 8002272:	b084      	sub	sp, #16
 8002274:	af00      	add	r7, sp, #0
 8002276:	6078      	str	r0, [r7, #4]
    uint8_t u8currentBit;
    uint16_t u16currentRegister;
    uint8_t u8CopyBufferSize;
    uint16_t u16coil = word( modH->u8Buffer[ ADD_HI ], modH->u8Buffer[ ADD_LO ] );
 8002278:	687b      	ldr	r3, [r7, #4]
 800227a:	7d5a      	ldrb	r2, [r3, #21]
 800227c:	687b      	ldr	r3, [r7, #4]
 800227e:	7d9b      	ldrb	r3, [r3, #22]
 8002280:	4619      	mov	r1, r3
 8002282:	4610      	mov	r0, r2
 8002284:	f7ff fdd8 	bl	8001e38 <word>
 8002288:	4603      	mov	r3, r0
 800228a:	81fb      	strh	r3, [r7, #14]

    // point to the register and its bit
    u16currentRegister = (u16coil / 16);
 800228c:	89fb      	ldrh	r3, [r7, #14]
 800228e:	091b      	lsrs	r3, r3, #4
 8002290:	81bb      	strh	r3, [r7, #12]
    u8currentBit = (uint8_t) (u16coil % 16);
 8002292:	89fb      	ldrh	r3, [r7, #14]
 8002294:	b2db      	uxtb	r3, r3
 8002296:	f003 030f 	and.w	r3, r3, #15
 800229a:	72fb      	strb	r3, [r7, #11]

    // write to coil
    bitWrite(
 800229c:	687b      	ldr	r3, [r7, #4]
 800229e:	7ddb      	ldrb	r3, [r3, #23]
 80022a0:	2bff      	cmp	r3, #255	; 0xff
 80022a2:	d115      	bne.n	80022d0 <process_FC5+0x60>
 80022a4:	687b      	ldr	r3, [r7, #4]
 80022a6:	f8d3 2098 	ldr.w	r2, [r3, #152]	; 0x98
 80022aa:	89bb      	ldrh	r3, [r7, #12]
 80022ac:	005b      	lsls	r3, r3, #1
 80022ae:	4413      	add	r3, r2
 80022b0:	8819      	ldrh	r1, [r3, #0]
 80022b2:	7afb      	ldrb	r3, [r7, #11]
 80022b4:	2201      	movs	r2, #1
 80022b6:	fa02 f303 	lsl.w	r3, r2, r3
 80022ba:	b29a      	uxth	r2, r3
 80022bc:	687b      	ldr	r3, [r7, #4]
 80022be:	f8d3 0098 	ldr.w	r0, [r3, #152]	; 0x98
 80022c2:	89bb      	ldrh	r3, [r7, #12]
 80022c4:	005b      	lsls	r3, r3, #1
 80022c6:	4403      	add	r3, r0
 80022c8:	430a      	orrs	r2, r1
 80022ca:	b292      	uxth	r2, r2
 80022cc:	801a      	strh	r2, [r3, #0]
 80022ce:	e016      	b.n	80022fe <process_FC5+0x8e>
 80022d0:	687b      	ldr	r3, [r7, #4]
 80022d2:	f8d3 2098 	ldr.w	r2, [r3, #152]	; 0x98
 80022d6:	89bb      	ldrh	r3, [r7, #12]
 80022d8:	005b      	lsls	r3, r3, #1
 80022da:	4413      	add	r3, r2
 80022dc:	8819      	ldrh	r1, [r3, #0]
 80022de:	7afb      	ldrb	r3, [r7, #11]
 80022e0:	2201      	movs	r2, #1
 80022e2:	fa02 f303 	lsl.w	r3, r2, r3
 80022e6:	b29b      	uxth	r3, r3
 80022e8:	43db      	mvns	r3, r3
 80022ea:	b29a      	uxth	r2, r3
 80022ec:	687b      	ldr	r3, [r7, #4]
 80022ee:	f8d3 0098 	ldr.w	r0, [r3, #152]	; 0x98
 80022f2:	89bb      	ldrh	r3, [r7, #12]
 80022f4:	005b      	lsls	r3, r3, #1
 80022f6:	4403      	add	r3, r0
 80022f8:	400a      	ands	r2, r1
 80022fa:	b292      	uxth	r2, r2
 80022fc:	801a      	strh	r2, [r3, #0]
        u8currentBit,
		modH->u8Buffer[ NB_HI ] == 0xff );


    // send answer to master
    modH->u8BufferSize = 6;
 80022fe:	687b      	ldr	r3, [r7, #4]
 8002300:	2206      	movs	r2, #6
 8002302:	f883 2093 	strb.w	r2, [r3, #147]	; 0x93
    u8CopyBufferSize =  modH->u8BufferSize +2;
 8002306:	687b      	ldr	r3, [r7, #4]
 8002308:	f893 3093 	ldrb.w	r3, [r3, #147]	; 0x93
 800230c:	3302      	adds	r3, #2
 800230e:	72bb      	strb	r3, [r7, #10]
    sendTxBuffer(modH);
 8002310:	6878      	ldr	r0, [r7, #4]
 8002312:	f7ff fe07 	bl	8001f24 <sendTxBuffer>

    return u8CopyBufferSize;
 8002316:	f997 300a 	ldrsb.w	r3, [r7, #10]
}
 800231a:	4618      	mov	r0, r3
 800231c:	3710      	adds	r7, #16
 800231e:	46bd      	mov	sp, r7
 8002320:	bd80      	pop	{r7, pc}

08002322 <process_FC6>:
 *
 * @return u8BufferSize Response to master length
 * @ingroup register
 */
int8_t process_FC6(modbusHandler_t *modH )
{
 8002322:	b580      	push	{r7, lr}
 8002324:	b084      	sub	sp, #16
 8002326:	af00      	add	r7, sp, #0
 8002328:	6078      	str	r0, [r7, #4]

    uint16_t u16add = word( modH->u8Buffer[ ADD_HI ], modH->u8Buffer[ ADD_LO ] );
 800232a:	687b      	ldr	r3, [r7, #4]
 800232c:	7d5a      	ldrb	r2, [r3, #21]
 800232e:	687b      	ldr	r3, [r7, #4]
 8002330:	7d9b      	ldrb	r3, [r3, #22]
 8002332:	4619      	mov	r1, r3
 8002334:	4610      	mov	r0, r2
 8002336:	f7ff fd7f 	bl	8001e38 <word>
 800233a:	4603      	mov	r3, r0
 800233c:	81fb      	strh	r3, [r7, #14]
    uint8_t u8CopyBufferSize;
    uint16_t u16val = word( modH->u8Buffer[ NB_HI ], modH->u8Buffer[ NB_LO ] );
 800233e:	687b      	ldr	r3, [r7, #4]
 8002340:	7dda      	ldrb	r2, [r3, #23]
 8002342:	687b      	ldr	r3, [r7, #4]
 8002344:	7e1b      	ldrb	r3, [r3, #24]
 8002346:	4619      	mov	r1, r3
 8002348:	4610      	mov	r0, r2
 800234a:	f7ff fd75 	bl	8001e38 <word>
 800234e:	4603      	mov	r3, r0
 8002350:	81bb      	strh	r3, [r7, #12]

    modH->u16regs[ u16add ] = u16val;
 8002352:	687b      	ldr	r3, [r7, #4]
 8002354:	f8d3 2098 	ldr.w	r2, [r3, #152]	; 0x98
 8002358:	89fb      	ldrh	r3, [r7, #14]
 800235a:	005b      	lsls	r3, r3, #1
 800235c:	4413      	add	r3, r2
 800235e:	89ba      	ldrh	r2, [r7, #12]
 8002360:	801a      	strh	r2, [r3, #0]

    // keep the same header
    modH->u8BufferSize = RESPONSE_SIZE;
 8002362:	687b      	ldr	r3, [r7, #4]
 8002364:	2206      	movs	r2, #6
 8002366:	f883 2093 	strb.w	r2, [r3, #147]	; 0x93

    u8CopyBufferSize = modH->u8BufferSize + 2;
 800236a:	687b      	ldr	r3, [r7, #4]
 800236c:	f893 3093 	ldrb.w	r3, [r3, #147]	; 0x93
 8002370:	3302      	adds	r3, #2
 8002372:	72fb      	strb	r3, [r7, #11]
    sendTxBuffer(modH);
 8002374:	6878      	ldr	r0, [r7, #4]
 8002376:	f7ff fdd5 	bl	8001f24 <sendTxBuffer>

    return u8CopyBufferSize;
 800237a:	f997 300b 	ldrsb.w	r3, [r7, #11]
}
 800237e:	4618      	mov	r0, r3
 8002380:	3710      	adds	r7, #16
 8002382:	46bd      	mov	sp, r7
 8002384:	bd80      	pop	{r7, pc}

08002386 <process_FC15>:
 *
 * @return u8BufferSize Response to master length
 * @ingroup discrete
 */
int8_t process_FC15( modbusHandler_t *modH )
{
 8002386:	b580      	push	{r7, lr}
 8002388:	b086      	sub	sp, #24
 800238a:	af00      	add	r7, sp, #0
 800238c:	6078      	str	r0, [r7, #4]
    uint8_t u8CopyBufferSize;
    uint16_t u16currentCoil, u16coil;
    bool bTemp;

    // get the first and last coil from the message
    uint16_t u16StartCoil = word( modH->u8Buffer[ ADD_HI ], modH->u8Buffer[ ADD_LO ] );
 800238e:	687b      	ldr	r3, [r7, #4]
 8002390:	7d5a      	ldrb	r2, [r3, #21]
 8002392:	687b      	ldr	r3, [r7, #4]
 8002394:	7d9b      	ldrb	r3, [r3, #22]
 8002396:	4619      	mov	r1, r3
 8002398:	4610      	mov	r0, r2
 800239a:	f7ff fd4d 	bl	8001e38 <word>
 800239e:	4603      	mov	r3, r0
 80023a0:	827b      	strh	r3, [r7, #18]
    uint16_t u16Coilno = word( modH->u8Buffer[ NB_HI ], modH->u8Buffer[ NB_LO ] );
 80023a2:	687b      	ldr	r3, [r7, #4]
 80023a4:	7dda      	ldrb	r2, [r3, #23]
 80023a6:	687b      	ldr	r3, [r7, #4]
 80023a8:	7e1b      	ldrb	r3, [r3, #24]
 80023aa:	4619      	mov	r1, r3
 80023ac:	4610      	mov	r0, r2
 80023ae:	f7ff fd43 	bl	8001e38 <word>
 80023b2:	4603      	mov	r3, r0
 80023b4:	823b      	strh	r3, [r7, #16]


    // read each coil from the register map and put its value inside the outcoming message
    u8bitsno = 0;
 80023b6:	2300      	movs	r3, #0
 80023b8:	75bb      	strb	r3, [r7, #22]
    u8frameByte = 7;
 80023ba:	2307      	movs	r3, #7
 80023bc:	75fb      	strb	r3, [r7, #23]
    for (u16currentCoil = 0; u16currentCoil < u16Coilno; u16currentCoil++)
 80023be:	2300      	movs	r3, #0
 80023c0:	82bb      	strh	r3, [r7, #20]
 80023c2:	e058      	b.n	8002476 <process_FC15+0xf0>
    {

        u16coil = u16StartCoil + u16currentCoil;
 80023c4:	8a7a      	ldrh	r2, [r7, #18]
 80023c6:	8abb      	ldrh	r3, [r7, #20]
 80023c8:	4413      	add	r3, r2
 80023ca:	81bb      	strh	r3, [r7, #12]
        u16currentRegister = (u16coil / 16);
 80023cc:	89bb      	ldrh	r3, [r7, #12]
 80023ce:	091b      	lsrs	r3, r3, #4
 80023d0:	817b      	strh	r3, [r7, #10]
        u8currentBit = (uint8_t) (u16coil % 16);
 80023d2:	89bb      	ldrh	r3, [r7, #12]
 80023d4:	b2db      	uxtb	r3, r3
 80023d6:	f003 030f 	and.w	r3, r3, #15
 80023da:	727b      	strb	r3, [r7, #9]

        bTemp = bitRead(
 80023dc:	7dfb      	ldrb	r3, [r7, #23]
 80023de:	687a      	ldr	r2, [r7, #4]
 80023e0:	4413      	add	r3, r2
 80023e2:	7cdb      	ldrb	r3, [r3, #19]
 80023e4:	461a      	mov	r2, r3
 80023e6:	7dbb      	ldrb	r3, [r7, #22]
 80023e8:	fa42 f303 	asr.w	r3, r2, r3
 80023ec:	f003 0301 	and.w	r3, r3, #1
 80023f0:	2b00      	cmp	r3, #0
 80023f2:	bf14      	ite	ne
 80023f4:	2301      	movne	r3, #1
 80023f6:	2300      	moveq	r3, #0
 80023f8:	723b      	strb	r3, [r7, #8]
        			modH->u8Buffer[ u8frameByte ],
                    u8bitsno );

        bitWrite(
 80023fa:	7a3b      	ldrb	r3, [r7, #8]
 80023fc:	2b00      	cmp	r3, #0
 80023fe:	d015      	beq.n	800242c <process_FC15+0xa6>
 8002400:	687b      	ldr	r3, [r7, #4]
 8002402:	f8d3 2098 	ldr.w	r2, [r3, #152]	; 0x98
 8002406:	897b      	ldrh	r3, [r7, #10]
 8002408:	005b      	lsls	r3, r3, #1
 800240a:	4413      	add	r3, r2
 800240c:	8819      	ldrh	r1, [r3, #0]
 800240e:	7a7b      	ldrb	r3, [r7, #9]
 8002410:	2201      	movs	r2, #1
 8002412:	fa02 f303 	lsl.w	r3, r2, r3
 8002416:	b29a      	uxth	r2, r3
 8002418:	687b      	ldr	r3, [r7, #4]
 800241a:	f8d3 0098 	ldr.w	r0, [r3, #152]	; 0x98
 800241e:	897b      	ldrh	r3, [r7, #10]
 8002420:	005b      	lsls	r3, r3, #1
 8002422:	4403      	add	r3, r0
 8002424:	430a      	orrs	r2, r1
 8002426:	b292      	uxth	r2, r2
 8002428:	801a      	strh	r2, [r3, #0]
 800242a:	e016      	b.n	800245a <process_FC15+0xd4>
 800242c:	687b      	ldr	r3, [r7, #4]
 800242e:	f8d3 2098 	ldr.w	r2, [r3, #152]	; 0x98
 8002432:	897b      	ldrh	r3, [r7, #10]
 8002434:	005b      	lsls	r3, r3, #1
 8002436:	4413      	add	r3, r2
 8002438:	8819      	ldrh	r1, [r3, #0]
 800243a:	7a7b      	ldrb	r3, [r7, #9]
 800243c:	2201      	movs	r2, #1
 800243e:	fa02 f303 	lsl.w	r3, r2, r3
 8002442:	b29b      	uxth	r3, r3
 8002444:	43db      	mvns	r3, r3
 8002446:	b29a      	uxth	r2, r3
 8002448:	687b      	ldr	r3, [r7, #4]
 800244a:	f8d3 0098 	ldr.w	r0, [r3, #152]	; 0x98
 800244e:	897b      	ldrh	r3, [r7, #10]
 8002450:	005b      	lsls	r3, r3, #1
 8002452:	4403      	add	r3, r0
 8002454:	400a      	ands	r2, r1
 8002456:	b292      	uxth	r2, r2
 8002458:	801a      	strh	r2, [r3, #0]
            modH->u16regs[ u16currentRegister ],
            u8currentBit,
            bTemp );

        u8bitsno ++;
 800245a:	7dbb      	ldrb	r3, [r7, #22]
 800245c:	3301      	adds	r3, #1
 800245e:	75bb      	strb	r3, [r7, #22]

        if (u8bitsno > 7)
 8002460:	7dbb      	ldrb	r3, [r7, #22]
 8002462:	2b07      	cmp	r3, #7
 8002464:	d904      	bls.n	8002470 <process_FC15+0xea>
        {
            u8bitsno = 0;
 8002466:	2300      	movs	r3, #0
 8002468:	75bb      	strb	r3, [r7, #22]
            u8frameByte++;
 800246a:	7dfb      	ldrb	r3, [r7, #23]
 800246c:	3301      	adds	r3, #1
 800246e:	75fb      	strb	r3, [r7, #23]
    for (u16currentCoil = 0; u16currentCoil < u16Coilno; u16currentCoil++)
 8002470:	8abb      	ldrh	r3, [r7, #20]
 8002472:	3301      	adds	r3, #1
 8002474:	82bb      	strh	r3, [r7, #20]
 8002476:	8aba      	ldrh	r2, [r7, #20]
 8002478:	8a3b      	ldrh	r3, [r7, #16]
 800247a:	429a      	cmp	r2, r3
 800247c:	d3a2      	bcc.n	80023c4 <process_FC15+0x3e>
        }
    }

    // send outcoming message
    // it's just a copy of the incomping frame until 6th byte
    modH->u8BufferSize         = 6;
 800247e:	687b      	ldr	r3, [r7, #4]
 8002480:	2206      	movs	r2, #6
 8002482:	f883 2093 	strb.w	r2, [r3, #147]	; 0x93
    u8CopyBufferSize = modH->u8BufferSize +2;
 8002486:	687b      	ldr	r3, [r7, #4]
 8002488:	f893 3093 	ldrb.w	r3, [r3, #147]	; 0x93
 800248c:	3302      	adds	r3, #2
 800248e:	73fb      	strb	r3, [r7, #15]
    sendTxBuffer(modH);
 8002490:	6878      	ldr	r0, [r7, #4]
 8002492:	f7ff fd47 	bl	8001f24 <sendTxBuffer>
    return u8CopyBufferSize;
 8002496:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 800249a:	4618      	mov	r0, r3
 800249c:	3718      	adds	r7, #24
 800249e:	46bd      	mov	sp, r7
 80024a0:	bd80      	pop	{r7, pc}

080024a2 <process_FC16>:
 *
 * @return u8BufferSize Response to master length
 * @ingroup register
 */
int8_t process_FC16(modbusHandler_t *modH )
{
 80024a2:	b580      	push	{r7, lr}
 80024a4:	b086      	sub	sp, #24
 80024a6:	af00      	add	r7, sp, #0
 80024a8:	6078      	str	r0, [r7, #4]
    uint16_t u16StartAdd = modH->u8Buffer[ ADD_HI ] << 8 | modH->u8Buffer[ ADD_LO ];
 80024aa:	687b      	ldr	r3, [r7, #4]
 80024ac:	7d5b      	ldrb	r3, [r3, #21]
 80024ae:	021b      	lsls	r3, r3, #8
 80024b0:	b21a      	sxth	r2, r3
 80024b2:	687b      	ldr	r3, [r7, #4]
 80024b4:	7d9b      	ldrb	r3, [r3, #22]
 80024b6:	b21b      	sxth	r3, r3
 80024b8:	4313      	orrs	r3, r2
 80024ba:	b21b      	sxth	r3, r3
 80024bc:	82bb      	strh	r3, [r7, #20]
    uint16_t u16regsno = modH->u8Buffer[ NB_HI ] << 8 | modH->u8Buffer[ NB_LO ];
 80024be:	687b      	ldr	r3, [r7, #4]
 80024c0:	7ddb      	ldrb	r3, [r3, #23]
 80024c2:	021b      	lsls	r3, r3, #8
 80024c4:	b21a      	sxth	r2, r3
 80024c6:	687b      	ldr	r3, [r7, #4]
 80024c8:	7e1b      	ldrb	r3, [r3, #24]
 80024ca:	b21b      	sxth	r3, r3
 80024cc:	4313      	orrs	r3, r2
 80024ce:	b21b      	sxth	r3, r3
 80024d0:	827b      	strh	r3, [r7, #18]
    uint8_t u8CopyBufferSize;
    uint16_t i;
    uint16_t temp;

    // build header
    modH->u8Buffer[ NB_HI ]   = 0;
 80024d2:	687b      	ldr	r3, [r7, #4]
 80024d4:	2200      	movs	r2, #0
 80024d6:	75da      	strb	r2, [r3, #23]
    modH->u8Buffer[ NB_LO ]   = (uint8_t) u16regsno; // answer is always 256 or less bytes
 80024d8:	8a7b      	ldrh	r3, [r7, #18]
 80024da:	b2da      	uxtb	r2, r3
 80024dc:	687b      	ldr	r3, [r7, #4]
 80024de:	761a      	strb	r2, [r3, #24]
    modH->u8BufferSize         = RESPONSE_SIZE;
 80024e0:	687b      	ldr	r3, [r7, #4]
 80024e2:	2206      	movs	r2, #6
 80024e4:	f883 2093 	strb.w	r2, [r3, #147]	; 0x93

    // write registers
    for (i = 0; i < u16regsno; i++)
 80024e8:	2300      	movs	r3, #0
 80024ea:	82fb      	strh	r3, [r7, #22]
 80024ec:	e01d      	b.n	800252a <process_FC16+0x88>
    {
        temp = word(
        		modH->u8Buffer[ (BYTE_CNT + 1) + i * 2 ],
 80024ee:	8afb      	ldrh	r3, [r7, #22]
 80024f0:	005b      	lsls	r3, r3, #1
 80024f2:	3307      	adds	r3, #7
        temp = word(
 80024f4:	687a      	ldr	r2, [r7, #4]
 80024f6:	4413      	add	r3, r2
 80024f8:	7cd8      	ldrb	r0, [r3, #19]
				modH->u8Buffer[ (BYTE_CNT + 2) + i * 2 ]);
 80024fa:	8afb      	ldrh	r3, [r7, #22]
 80024fc:	3304      	adds	r3, #4
 80024fe:	005b      	lsls	r3, r3, #1
        temp = word(
 8002500:	687a      	ldr	r2, [r7, #4]
 8002502:	4413      	add	r3, r2
 8002504:	7cdb      	ldrb	r3, [r3, #19]
 8002506:	4619      	mov	r1, r3
 8002508:	f7ff fc96 	bl	8001e38 <word>
 800250c:	4603      	mov	r3, r0
 800250e:	81fb      	strh	r3, [r7, #14]

        modH->u16regs[ u16StartAdd + i ] = temp;
 8002510:	687b      	ldr	r3, [r7, #4]
 8002512:	f8d3 2098 	ldr.w	r2, [r3, #152]	; 0x98
 8002516:	8ab9      	ldrh	r1, [r7, #20]
 8002518:	8afb      	ldrh	r3, [r7, #22]
 800251a:	440b      	add	r3, r1
 800251c:	005b      	lsls	r3, r3, #1
 800251e:	4413      	add	r3, r2
 8002520:	89fa      	ldrh	r2, [r7, #14]
 8002522:	801a      	strh	r2, [r3, #0]
    for (i = 0; i < u16regsno; i++)
 8002524:	8afb      	ldrh	r3, [r7, #22]
 8002526:	3301      	adds	r3, #1
 8002528:	82fb      	strh	r3, [r7, #22]
 800252a:	8afa      	ldrh	r2, [r7, #22]
 800252c:	8a7b      	ldrh	r3, [r7, #18]
 800252e:	429a      	cmp	r2, r3
 8002530:	d3dd      	bcc.n	80024ee <process_FC16+0x4c>
    }
    u8CopyBufferSize = modH->u8BufferSize +2;
 8002532:	687b      	ldr	r3, [r7, #4]
 8002534:	f893 3093 	ldrb.w	r3, [r3, #147]	; 0x93
 8002538:	3302      	adds	r3, #2
 800253a:	747b      	strb	r3, [r7, #17]
    sendTxBuffer(modH);
 800253c:	6878      	ldr	r0, [r7, #4]
 800253e:	f7ff fcf1 	bl	8001f24 <sendTxBuffer>

    return u8CopyBufferSize;
 8002542:	f997 3011 	ldrsb.w	r3, [r7, #17]
}
 8002546:	4618      	mov	r0, r3
 8002548:	3718      	adds	r7, #24
 800254a:	46bd      	mov	sp, r7
 800254c:	bd80      	pop	{r7, pc}
	...

08002550 <HAL_UART_TxCpltCallback>:
 * user should implement the correct control flow and verification to maintain
 * Modbus functionality.
 * @ingroup UartHandle UART HAL handler
 */
void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8002550:	b580      	push	{r7, lr}
 8002552:	b086      	sub	sp, #24
 8002554:	af02      	add	r7, sp, #8
 8002556:	6078      	str	r0, [r7, #4]
	/* Modbus RTU TX callback BEGIN */
	BaseType_t xHigherPriorityTaskWoken = pdFALSE;
 8002558:	2300      	movs	r3, #0
 800255a:	60bb      	str	r3, [r7, #8]
	int i;
	for (i = 0; i < numberHandlers; i++ )
 800255c:	2300      	movs	r3, #0
 800255e:	60fb      	str	r3, [r7, #12]
 8002560:	e019      	b.n	8002596 <HAL_UART_TxCpltCallback+0x46>
	{
	   	if (mHandlers[i]->port == huart  )
 8002562:	4a17      	ldr	r2, [pc, #92]	; (80025c0 <HAL_UART_TxCpltCallback+0x70>)
 8002564:	68fb      	ldr	r3, [r7, #12]
 8002566:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800256a:	685b      	ldr	r3, [r3, #4]
 800256c:	687a      	ldr	r2, [r7, #4]
 800256e:	429a      	cmp	r2, r3
 8002570:	d10e      	bne.n	8002590 <HAL_UART_TxCpltCallback+0x40>
	   	{
	   		// notify the end of TX
	   		xTaskNotifyFromISR(mHandlers[i]->myTaskModbusAHandle, 0, eNoAction, &xHigherPriorityTaskWoken);
 8002572:	4a13      	ldr	r2, [pc, #76]	; (80025c0 <HAL_UART_TxCpltCallback+0x70>)
 8002574:	68fb      	ldr	r3, [r7, #12]
 8002576:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800257a:	f8d3 00ac 	ldr.w	r0, [r3, #172]	; 0xac
 800257e:	f107 0308 	add.w	r3, r7, #8
 8002582:	9300      	str	r3, [sp, #0]
 8002584:	2300      	movs	r3, #0
 8002586:	2200      	movs	r2, #0
 8002588:	2100      	movs	r1, #0
 800258a:	f005 ffa9 	bl	80084e0 <xTaskGenericNotifyFromISR>
	   		break;
 800258e:	e008      	b.n	80025a2 <HAL_UART_TxCpltCallback+0x52>
	for (i = 0; i < numberHandlers; i++ )
 8002590:	68fb      	ldr	r3, [r7, #12]
 8002592:	3301      	adds	r3, #1
 8002594:	60fb      	str	r3, [r7, #12]
 8002596:	4b0b      	ldr	r3, [pc, #44]	; (80025c4 <HAL_UART_TxCpltCallback+0x74>)
 8002598:	781b      	ldrb	r3, [r3, #0]
 800259a:	461a      	mov	r2, r3
 800259c:	68fb      	ldr	r3, [r7, #12]
 800259e:	4293      	cmp	r3, r2
 80025a0:	dbdf      	blt.n	8002562 <HAL_UART_TxCpltCallback+0x12>
	   	}

	}
	portYIELD_FROM_ISR( xHigherPriorityTaskWoken );
 80025a2:	68bb      	ldr	r3, [r7, #8]
 80025a4:	2b00      	cmp	r3, #0
 80025a6:	d007      	beq.n	80025b8 <HAL_UART_TxCpltCallback+0x68>
 80025a8:	4b07      	ldr	r3, [pc, #28]	; (80025c8 <HAL_UART_TxCpltCallback+0x78>)
 80025aa:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80025ae:	601a      	str	r2, [r3, #0]
 80025b0:	f3bf 8f4f 	dsb	sy
 80025b4:	f3bf 8f6f 	isb	sy
	/*
	 * Here you should implement the callback code for other UARTs not used by Modbus
	 *
	 * */

}
 80025b8:	bf00      	nop
 80025ba:	3710      	adds	r7, #16
 80025bc:	46bd      	mov	sp, r7
 80025be:	bd80      	pop	{r7, pc}
 80025c0:	2000002c 	.word	0x2000002c
 80025c4:	20000034 	.word	0x20000034
 80025c8:	e000ed04 	.word	0xe000ed04

080025cc <HAL_UART_RxCpltCallback>:
 * user should implement the correct control flow and verification to maintain
 * Modbus functionality.
 * @ingroup UartHandle UART HAL handler
 */
void HAL_UART_RxCpltCallback(UART_HandleTypeDef *UartHandle)
{
 80025cc:	b590      	push	{r4, r7, lr}
 80025ce:	b087      	sub	sp, #28
 80025d0:	af02      	add	r7, sp, #8
 80025d2:	6078      	str	r0, [r7, #4]
	BaseType_t xHigherPriorityTaskWoken = pdFALSE;
 80025d4:	2300      	movs	r3, #0
 80025d6:	60bb      	str	r3, [r7, #8]

	/* Modbus RTU RX callback BEGIN */
    int i;
    for (i = 0; i < numberHandlers; i++ )
 80025d8:	2300      	movs	r3, #0
 80025da:	60fb      	str	r3, [r7, #12]
 80025dc:	e042      	b.n	8002664 <HAL_UART_RxCpltCallback+0x98>
    {
    	if (mHandlers[i]->port == UartHandle  )
 80025de:	4a2d      	ldr	r2, [pc, #180]	; (8002694 <HAL_UART_RxCpltCallback+0xc8>)
 80025e0:	68fb      	ldr	r3, [r7, #12]
 80025e2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80025e6:	685b      	ldr	r3, [r3, #4]
 80025e8:	687a      	ldr	r2, [r7, #4]
 80025ea:	429a      	cmp	r2, r3
 80025ec:	d137      	bne.n	800265e <HAL_UART_RxCpltCallback+0x92>
    	{

    		if(mHandlers[i]->xTypeHW == USART_HW)
 80025ee:	4a29      	ldr	r2, [pc, #164]	; (8002694 <HAL_UART_RxCpltCallback+0xc8>)
 80025f0:	68fb      	ldr	r3, [r7, #12]
 80025f2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80025f6:	f893 3140 	ldrb.w	r3, [r3, #320]	; 0x140
 80025fa:	2b01      	cmp	r3, #1
 80025fc:	d139      	bne.n	8002672 <HAL_UART_RxCpltCallback+0xa6>
    		{
    			RingAdd(&mHandlers[i]->xBufferRX, mHandlers[i]->dataRX);
 80025fe:	4a25      	ldr	r2, [pc, #148]	; (8002694 <HAL_UART_RxCpltCallback+0xc8>)
 8002600:	68fb      	ldr	r3, [r7, #12]
 8002602:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002606:	f103 02bc 	add.w	r2, r3, #188	; 0xbc
 800260a:	4922      	ldr	r1, [pc, #136]	; (8002694 <HAL_UART_RxCpltCallback+0xc8>)
 800260c:	68fb      	ldr	r3, [r7, #12]
 800260e:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 8002612:	f893 30a6 	ldrb.w	r3, [r3, #166]	; 0xa6
 8002616:	4619      	mov	r1, r3
 8002618:	4610      	mov	r0, r2
 800261a:	f7fe fc15 	bl	8000e48 <RingAdd>
    			HAL_UART_Receive_IT(mHandlers[i]->port, &mHandlers[i]->dataRX, 1);
 800261e:	4a1d      	ldr	r2, [pc, #116]	; (8002694 <HAL_UART_RxCpltCallback+0xc8>)
 8002620:	68fb      	ldr	r3, [r7, #12]
 8002622:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002626:	6858      	ldr	r0, [r3, #4]
 8002628:	4a1a      	ldr	r2, [pc, #104]	; (8002694 <HAL_UART_RxCpltCallback+0xc8>)
 800262a:	68fb      	ldr	r3, [r7, #12]
 800262c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002630:	33a6      	adds	r3, #166	; 0xa6
 8002632:	2201      	movs	r2, #1
 8002634:	4619      	mov	r1, r3
 8002636:	f002 ff72 	bl	800551e <HAL_UART_Receive_IT>
    			xTimerResetFromISR(mHandlers[i]->xTimerT35, &xHigherPriorityTaskWoken);
 800263a:	4a16      	ldr	r2, [pc, #88]	; (8002694 <HAL_UART_RxCpltCallback+0xc8>)
 800263c:	68fb      	ldr	r3, [r7, #12]
 800263e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002642:	f8d3 40b0 	ldr.w	r4, [r3, #176]	; 0xb0
 8002646:	f005 f98d 	bl	8007964 <xTaskGetTickCountFromISR>
 800264a:	4602      	mov	r2, r0
 800264c:	f107 0308 	add.w	r3, r7, #8
 8002650:	2100      	movs	r1, #0
 8002652:	9100      	str	r1, [sp, #0]
 8002654:	2107      	movs	r1, #7
 8002656:	4620      	mov	r0, r4
 8002658:	f006 f8fc 	bl	8008854 <xTimerGenericCommand>
    		}
    		break;
 800265c:	e009      	b.n	8002672 <HAL_UART_RxCpltCallback+0xa6>
    for (i = 0; i < numberHandlers; i++ )
 800265e:	68fb      	ldr	r3, [r7, #12]
 8002660:	3301      	adds	r3, #1
 8002662:	60fb      	str	r3, [r7, #12]
 8002664:	4b0c      	ldr	r3, [pc, #48]	; (8002698 <HAL_UART_RxCpltCallback+0xcc>)
 8002666:	781b      	ldrb	r3, [r3, #0]
 8002668:	461a      	mov	r2, r3
 800266a:	68fb      	ldr	r3, [r7, #12]
 800266c:	4293      	cmp	r3, r2
 800266e:	dbb6      	blt.n	80025de <HAL_UART_RxCpltCallback+0x12>
 8002670:	e000      	b.n	8002674 <HAL_UART_RxCpltCallback+0xa8>
    		break;
 8002672:	bf00      	nop
    	}
    }
    portYIELD_FROM_ISR( xHigherPriorityTaskWoken );
 8002674:	68bb      	ldr	r3, [r7, #8]
 8002676:	2b00      	cmp	r3, #0
 8002678:	d007      	beq.n	800268a <HAL_UART_RxCpltCallback+0xbe>
 800267a:	4b08      	ldr	r3, [pc, #32]	; (800269c <HAL_UART_RxCpltCallback+0xd0>)
 800267c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8002680:	601a      	str	r2, [r3, #0]
 8002682:	f3bf 8f4f 	dsb	sy
 8002686:	f3bf 8f6f 	isb	sy
	 * Here you should implement the callback code for other UARTs not used by Modbus
	 *
	 *
	 * */

}
 800268a:	bf00      	nop
 800268c:	3714      	adds	r7, #20
 800268e:	46bd      	mov	sp, r7
 8002690:	bd90      	pop	{r4, r7, pc}
 8002692:	bf00      	nop
 8002694:	2000002c 	.word	0x2000002c
 8002698:	20000034 	.word	0x20000034
 800269c:	e000ed04 	.word	0xe000ed04

080026a0 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80026a0:	b580      	push	{r7, lr}
 80026a2:	b082      	sub	sp, #8
 80026a4:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80026a6:	f000 fcc9 	bl	800303c <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80026aa:	f000 f875 	bl	8002798 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80026ae:	f000 f9d5 	bl	8002a5c <MX_GPIO_Init>
  MX_USART1_UART_Init();
 80026b2:	f000 f97f 	bl	80029b4 <MX_USART1_UART_Init>
  MX_USART2_UART_Init();
 80026b6:	f000 f9a7 	bl	8002a08 <MX_USART2_UART_Init>
  MX_ADC1_Init();
 80026ba:	f000 f8c9 	bl	8002850 <MX_ADC1_Init>
  MX_ADC2_Init();
 80026be:	f000 f905 	bl	80028cc <MX_ADC2_Init>
  MX_SPI2_Init();
 80026c2:	f000 f941 	bl	8002948 <MX_SPI2_Init>
  /* USER CODE BEGIN 2 */
  ModbusH.uModbusType = MB_SLAVE;
 80026c6:	4b2a      	ldr	r3, [pc, #168]	; (8002770 <main+0xd0>)
 80026c8:	2203      	movs	r2, #3
 80026ca:	701a      	strb	r2, [r3, #0]
  ModbusH.port =  &huart2;
 80026cc:	4b28      	ldr	r3, [pc, #160]	; (8002770 <main+0xd0>)
 80026ce:	4a29      	ldr	r2, [pc, #164]	; (8002774 <main+0xd4>)
 80026d0:	605a      	str	r2, [r3, #4]
  ModbusH.u8id = 17; //Modbus slave ID
 80026d2:	4b27      	ldr	r3, [pc, #156]	; (8002770 <main+0xd0>)
 80026d4:	2211      	movs	r2, #17
 80026d6:	721a      	strb	r2, [r3, #8]
  ModbusH.u16timeOut = 2000;
 80026d8:	4b25      	ldr	r3, [pc, #148]	; (8002770 <main+0xd0>)
 80026da:	f44f 62fa 	mov.w	r2, #2000	; 0x7d0
 80026de:	f8a3 20a2 	strh.w	r2, [r3, #162]	; 0xa2
  ModbusH.EN_Port = TX_EN_GPIO_Port;
 80026e2:	4b23      	ldr	r3, [pc, #140]	; (8002770 <main+0xd0>)
 80026e4:	4a24      	ldr	r2, [pc, #144]	; (8002778 <main+0xd8>)
 80026e6:	60da      	str	r2, [r3, #12]
  ModbusH.EN_Pin = TX_EN_Pin;
 80026e8:	4b21      	ldr	r3, [pc, #132]	; (8002770 <main+0xd0>)
 80026ea:	2240      	movs	r2, #64	; 0x40
 80026ec:	821a      	strh	r2, [r3, #16]
  ModbusH.u16regs = (uint16_t *) &Register;
 80026ee:	4b20      	ldr	r3, [pc, #128]	; (8002770 <main+0xd0>)
 80026f0:	4a22      	ldr	r2, [pc, #136]	; (800277c <main+0xdc>)
 80026f2:	f8c3 2098 	str.w	r2, [r3, #152]	; 0x98
  ModbusH.u16regsize= sizeof(Register)/(sizeof(uint16_t));
 80026f6:	4b1e      	ldr	r3, [pc, #120]	; (8002770 <main+0xd0>)
 80026f8:	2204      	movs	r2, #4
 80026fa:	f8a3 20a4 	strh.w	r2, [r3, #164]	; 0xa4
  ModbusH.xTypeHW = USART_HW;
 80026fe:	4b1c      	ldr	r3, [pc, #112]	; (8002770 <main+0xd0>)
 8002700:	2201      	movs	r2, #1
 8002702:	f883 2140 	strb.w	r2, [r3, #320]	; 0x140
  //Initialize Modbus library
  ModbusInit(&ModbusH);
 8002706:	481a      	ldr	r0, [pc, #104]	; (8002770 <main+0xd0>)
 8002708:	f7fe fc64 	bl	8000fd4 <ModbusInit>
  //Start capturing traffic on serial Port
  ModbusStart(&ModbusH);
 800270c:	4818      	ldr	r0, [pc, #96]	; (8002770 <main+0xd0>)
 800270e:	f7fe fd03 	bl	8001118 <ModbusStart>

  //Config ADC
  HAL_ADC_Start(&hadc1);
 8002712:	481b      	ldr	r0, [pc, #108]	; (8002780 <main+0xe0>)
 8002714:	f000 fdcc 	bl	80032b0 <HAL_ADC_Start>
  HAL_GPIO_WritePin(LED_GPIO_Port,LED_Pin,1);
 8002718:	2201      	movs	r2, #1
 800271a:	2180      	movs	r1, #128	; 0x80
 800271c:	4816      	ldr	r0, [pc, #88]	; (8002778 <main+0xd8>)
 800271e:	f001 fb6e 	bl	8003dfe <HAL_GPIO_WritePin>
  //Config SPI


  HAL_GPIO_WritePin(NSS_GPIO_Port, NSS_Pin, 0);
 8002722:	2200      	movs	r2, #0
 8002724:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8002728:	4816      	ldr	r0, [pc, #88]	; (8002784 <main+0xe4>)
 800272a:	f001 fb68 	bl	8003dfe <HAL_GPIO_WritePin>
  uint8_t testcode[] =  {0x80U,0xD2U};
 800272e:	f24d 2380 	movw	r3, #53888	; 0xd280
 8002732:	80bb      	strh	r3, [r7, #4]
   HAL_SPI_Transmit(&hspi2, testcode,2,600);
 8002734:	1d39      	adds	r1, r7, #4
 8002736:	f44f 7316 	mov.w	r3, #600	; 0x258
 800273a:	2202      	movs	r2, #2
 800273c:	4812      	ldr	r0, [pc, #72]	; (8002788 <main+0xe8>)
 800273e:	f002 f8e3 	bl	8004908 <HAL_SPI_Transmit>
   HAL_GPIO_WritePin(NSS_GPIO_Port, NSS_Pin, 1);
 8002742:	2201      	movs	r2, #1
 8002744:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8002748:	480e      	ldr	r0, [pc, #56]	; (8002784 <main+0xe4>)
 800274a:	f001 fb58 	bl	8003dfe <HAL_GPIO_WritePin>
   osDelay(500);
 800274e:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8002752:	f003 fced 	bl	8006130 <osDelay>
  /* USER CODE END 2 */

  /* Init scheduler */
  osKernelInitialize();
 8002756:	f003 fbdb 	bl	8005f10 <osKernelInitialize>
  /* add queues, ... */
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* creation of defaultTask */
  defaultTaskHandle = osThreadNew(StartDefaultTask, NULL, &defaultTask_attributes);
 800275a:	4a0c      	ldr	r2, [pc, #48]	; (800278c <main+0xec>)
 800275c:	2100      	movs	r1, #0
 800275e:	480c      	ldr	r0, [pc, #48]	; (8002790 <main+0xf0>)
 8002760:	f003 fc3c 	bl	8005fdc <osThreadNew>
 8002764:	4603      	mov	r3, r0
 8002766:	4a0b      	ldr	r2, [pc, #44]	; (8002794 <main+0xf4>)
 8002768:	6013      	str	r3, [r2, #0]
  /* USER CODE BEGIN RTOS_EVENTS */
  /* add events, ... */
  /* USER CODE END RTOS_EVENTS */

  /* Start scheduler */
  osKernelStart();
 800276a:	f003 fc03 	bl	8005f74 <osKernelStart>

  /* We should never get here as control is now taken by the scheduler */
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 800276e:	e7fe      	b.n	800276e <main+0xce>
 8002770:	2000017c 	.word	0x2000017c
 8002774:	20000134 	.word	0x20000134
 8002778:	40010800 	.word	0x40010800
 800277c:	200002c0 	.word	0x200002c0
 8002780:	20000038 	.word	0x20000038
 8002784:	40010c00 	.word	0x40010c00
 8002788:	20000098 	.word	0x20000098
 800278c:	08009714 	.word	0x08009714
 8002790:	08002b39 	.word	0x08002b39
 8002794:	20000178 	.word	0x20000178

08002798 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8002798:	b580      	push	{r7, lr}
 800279a:	b094      	sub	sp, #80	; 0x50
 800279c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800279e:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80027a2:	2228      	movs	r2, #40	; 0x28
 80027a4:	2100      	movs	r1, #0
 80027a6:	4618      	mov	r0, r3
 80027a8:	f006 ff1a 	bl	80095e0 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80027ac:	f107 0314 	add.w	r3, r7, #20
 80027b0:	2200      	movs	r2, #0
 80027b2:	601a      	str	r2, [r3, #0]
 80027b4:	605a      	str	r2, [r3, #4]
 80027b6:	609a      	str	r2, [r3, #8]
 80027b8:	60da      	str	r2, [r3, #12]
 80027ba:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 80027bc:	1d3b      	adds	r3, r7, #4
 80027be:	2200      	movs	r2, #0
 80027c0:	601a      	str	r2, [r3, #0]
 80027c2:	605a      	str	r2, [r3, #4]
 80027c4:	609a      	str	r2, [r3, #8]
 80027c6:	60da      	str	r2, [r3, #12]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 80027c8:	2301      	movs	r3, #1
 80027ca:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 80027cc:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80027d0:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.HSEPredivValue = RCC_HSE_PREDIV_DIV1;
 80027d2:	2300      	movs	r3, #0
 80027d4:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80027d6:	2301      	movs	r3, #1
 80027d8:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80027da:	2302      	movs	r3, #2
 80027dc:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 80027de:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80027e2:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL9;
 80027e4:	f44f 13e0 	mov.w	r3, #1835008	; 0x1c0000
 80027e8:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80027ea:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80027ee:	4618      	mov	r0, r3
 80027f0:	f001 fb36 	bl	8003e60 <HAL_RCC_OscConfig>
 80027f4:	4603      	mov	r3, r0
 80027f6:	2b00      	cmp	r3, #0
 80027f8:	d001      	beq.n	80027fe <SystemClock_Config+0x66>
  {
    Error_Handler();
 80027fa:	f000 fa39 	bl	8002c70 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80027fe:	230f      	movs	r3, #15
 8002800:	617b      	str	r3, [r7, #20]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8002802:	2302      	movs	r3, #2
 8002804:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8002806:	2300      	movs	r3, #0
 8002808:	61fb      	str	r3, [r7, #28]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 800280a:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800280e:	623b      	str	r3, [r7, #32]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8002810:	2300      	movs	r3, #0
 8002812:	627b      	str	r3, [r7, #36]	; 0x24

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8002814:	f107 0314 	add.w	r3, r7, #20
 8002818:	2102      	movs	r1, #2
 800281a:	4618      	mov	r0, r3
 800281c:	f001 fda2 	bl	8004364 <HAL_RCC_ClockConfig>
 8002820:	4603      	mov	r3, r0
 8002822:	2b00      	cmp	r3, #0
 8002824:	d001      	beq.n	800282a <SystemClock_Config+0x92>
  {
    Error_Handler();
 8002826:	f000 fa23 	bl	8002c70 <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_ADC;
 800282a:	2302      	movs	r3, #2
 800282c:	607b      	str	r3, [r7, #4]
  PeriphClkInit.AdcClockSelection = RCC_ADCPCLK2_DIV6;
 800282e:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8002832:	60fb      	str	r3, [r7, #12]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8002834:	1d3b      	adds	r3, r7, #4
 8002836:	4618      	mov	r0, r3
 8002838:	f001 ff2c 	bl	8004694 <HAL_RCCEx_PeriphCLKConfig>
 800283c:	4603      	mov	r3, r0
 800283e:	2b00      	cmp	r3, #0
 8002840:	d001      	beq.n	8002846 <SystemClock_Config+0xae>
  {
    Error_Handler();
 8002842:	f000 fa15 	bl	8002c70 <Error_Handler>
  }
}
 8002846:	bf00      	nop
 8002848:	3750      	adds	r7, #80	; 0x50
 800284a:	46bd      	mov	sp, r7
 800284c:	bd80      	pop	{r7, pc}
	...

08002850 <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 8002850:	b580      	push	{r7, lr}
 8002852:	b084      	sub	sp, #16
 8002854:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 8002856:	1d3b      	adds	r3, r7, #4
 8002858:	2200      	movs	r2, #0
 800285a:	601a      	str	r2, [r3, #0]
 800285c:	605a      	str	r2, [r3, #4]
 800285e:	609a      	str	r2, [r3, #8]

  /* USER CODE END ADC1_Init 1 */

  /** Common config
  */
  hadc1.Instance = ADC1;
 8002860:	4b18      	ldr	r3, [pc, #96]	; (80028c4 <MX_ADC1_Init+0x74>)
 8002862:	4a19      	ldr	r2, [pc, #100]	; (80028c8 <MX_ADC1_Init+0x78>)
 8002864:	601a      	str	r2, [r3, #0]
  hadc1.Init.ScanConvMode = ADC_SCAN_DISABLE;
 8002866:	4b17      	ldr	r3, [pc, #92]	; (80028c4 <MX_ADC1_Init+0x74>)
 8002868:	2200      	movs	r2, #0
 800286a:	609a      	str	r2, [r3, #8]
  hadc1.Init.ContinuousConvMode = ENABLE;
 800286c:	4b15      	ldr	r3, [pc, #84]	; (80028c4 <MX_ADC1_Init+0x74>)
 800286e:	2201      	movs	r2, #1
 8002870:	731a      	strb	r2, [r3, #12]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8002872:	4b14      	ldr	r3, [pc, #80]	; (80028c4 <MX_ADC1_Init+0x74>)
 8002874:	2200      	movs	r2, #0
 8002876:	751a      	strb	r2, [r3, #20]
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8002878:	4b12      	ldr	r3, [pc, #72]	; (80028c4 <MX_ADC1_Init+0x74>)
 800287a:	f44f 2260 	mov.w	r2, #917504	; 0xe0000
 800287e:	61da      	str	r2, [r3, #28]
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8002880:	4b10      	ldr	r3, [pc, #64]	; (80028c4 <MX_ADC1_Init+0x74>)
 8002882:	2200      	movs	r2, #0
 8002884:	605a      	str	r2, [r3, #4]
  hadc1.Init.NbrOfConversion = 1;
 8002886:	4b0f      	ldr	r3, [pc, #60]	; (80028c4 <MX_ADC1_Init+0x74>)
 8002888:	2201      	movs	r2, #1
 800288a:	611a      	str	r2, [r3, #16]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 800288c:	480d      	ldr	r0, [pc, #52]	; (80028c4 <MX_ADC1_Init+0x74>)
 800288e:	f000 fc37 	bl	8003100 <HAL_ADC_Init>
 8002892:	4603      	mov	r3, r0
 8002894:	2b00      	cmp	r3, #0
 8002896:	d001      	beq.n	800289c <MX_ADC1_Init+0x4c>
  {
    Error_Handler();
 8002898:	f000 f9ea 	bl	8002c70 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_1;
 800289c:	2301      	movs	r3, #1
 800289e:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 80028a0:	2301      	movs	r3, #1
 80028a2:	60bb      	str	r3, [r7, #8]
  sConfig.SamplingTime = ADC_SAMPLETIME_1CYCLE_5;
 80028a4:	2300      	movs	r3, #0
 80028a6:	60fb      	str	r3, [r7, #12]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80028a8:	1d3b      	adds	r3, r7, #4
 80028aa:	4619      	mov	r1, r3
 80028ac:	4805      	ldr	r0, [pc, #20]	; (80028c4 <MX_ADC1_Init+0x74>)
 80028ae:	f000 fdb9 	bl	8003424 <HAL_ADC_ConfigChannel>
 80028b2:	4603      	mov	r3, r0
 80028b4:	2b00      	cmp	r3, #0
 80028b6:	d001      	beq.n	80028bc <MX_ADC1_Init+0x6c>
  {
    Error_Handler();
 80028b8:	f000 f9da 	bl	8002c70 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 80028bc:	bf00      	nop
 80028be:	3710      	adds	r7, #16
 80028c0:	46bd      	mov	sp, r7
 80028c2:	bd80      	pop	{r7, pc}
 80028c4:	20000038 	.word	0x20000038
 80028c8:	40012400 	.word	0x40012400

080028cc <MX_ADC2_Init>:
  * @brief ADC2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC2_Init(void)
{
 80028cc:	b580      	push	{r7, lr}
 80028ce:	b084      	sub	sp, #16
 80028d0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC2_Init 0 */

  /* USER CODE END ADC2_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 80028d2:	1d3b      	adds	r3, r7, #4
 80028d4:	2200      	movs	r2, #0
 80028d6:	601a      	str	r2, [r3, #0]
 80028d8:	605a      	str	r2, [r3, #4]
 80028da:	609a      	str	r2, [r3, #8]

  /* USER CODE END ADC2_Init 1 */

  /** Common config
  */
  hadc2.Instance = ADC2;
 80028dc:	4b18      	ldr	r3, [pc, #96]	; (8002940 <MX_ADC2_Init+0x74>)
 80028de:	4a19      	ldr	r2, [pc, #100]	; (8002944 <MX_ADC2_Init+0x78>)
 80028e0:	601a      	str	r2, [r3, #0]
  hadc2.Init.ScanConvMode = ADC_SCAN_DISABLE;
 80028e2:	4b17      	ldr	r3, [pc, #92]	; (8002940 <MX_ADC2_Init+0x74>)
 80028e4:	2200      	movs	r2, #0
 80028e6:	609a      	str	r2, [r3, #8]
  hadc2.Init.ContinuousConvMode = ENABLE;
 80028e8:	4b15      	ldr	r3, [pc, #84]	; (8002940 <MX_ADC2_Init+0x74>)
 80028ea:	2201      	movs	r2, #1
 80028ec:	731a      	strb	r2, [r3, #12]
  hadc2.Init.DiscontinuousConvMode = DISABLE;
 80028ee:	4b14      	ldr	r3, [pc, #80]	; (8002940 <MX_ADC2_Init+0x74>)
 80028f0:	2200      	movs	r2, #0
 80028f2:	751a      	strb	r2, [r3, #20]
  hadc2.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 80028f4:	4b12      	ldr	r3, [pc, #72]	; (8002940 <MX_ADC2_Init+0x74>)
 80028f6:	f44f 2260 	mov.w	r2, #917504	; 0xe0000
 80028fa:	61da      	str	r2, [r3, #28]
  hadc2.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 80028fc:	4b10      	ldr	r3, [pc, #64]	; (8002940 <MX_ADC2_Init+0x74>)
 80028fe:	2200      	movs	r2, #0
 8002900:	605a      	str	r2, [r3, #4]
  hadc2.Init.NbrOfConversion = 1;
 8002902:	4b0f      	ldr	r3, [pc, #60]	; (8002940 <MX_ADC2_Init+0x74>)
 8002904:	2201      	movs	r2, #1
 8002906:	611a      	str	r2, [r3, #16]
  if (HAL_ADC_Init(&hadc2) != HAL_OK)
 8002908:	480d      	ldr	r0, [pc, #52]	; (8002940 <MX_ADC2_Init+0x74>)
 800290a:	f000 fbf9 	bl	8003100 <HAL_ADC_Init>
 800290e:	4603      	mov	r3, r0
 8002910:	2b00      	cmp	r3, #0
 8002912:	d001      	beq.n	8002918 <MX_ADC2_Init+0x4c>
  {
    Error_Handler();
 8002914:	f000 f9ac 	bl	8002c70 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_4;
 8002918:	2304      	movs	r3, #4
 800291a:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 800291c:	2301      	movs	r3, #1
 800291e:	60bb      	str	r3, [r7, #8]
  sConfig.SamplingTime = ADC_SAMPLETIME_1CYCLE_5;
 8002920:	2300      	movs	r3, #0
 8002922:	60fb      	str	r3, [r7, #12]
  if (HAL_ADC_ConfigChannel(&hadc2, &sConfig) != HAL_OK)
 8002924:	1d3b      	adds	r3, r7, #4
 8002926:	4619      	mov	r1, r3
 8002928:	4805      	ldr	r0, [pc, #20]	; (8002940 <MX_ADC2_Init+0x74>)
 800292a:	f000 fd7b 	bl	8003424 <HAL_ADC_ConfigChannel>
 800292e:	4603      	mov	r3, r0
 8002930:	2b00      	cmp	r3, #0
 8002932:	d001      	beq.n	8002938 <MX_ADC2_Init+0x6c>
  {
    Error_Handler();
 8002934:	f000 f99c 	bl	8002c70 <Error_Handler>
  }
  /* USER CODE BEGIN ADC2_Init 2 */

  /* USER CODE END ADC2_Init 2 */

}
 8002938:	bf00      	nop
 800293a:	3710      	adds	r7, #16
 800293c:	46bd      	mov	sp, r7
 800293e:	bd80      	pop	{r7, pc}
 8002940:	20000068 	.word	0x20000068
 8002944:	40012800 	.word	0x40012800

08002948 <MX_SPI2_Init>:
  * @brief SPI2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI2_Init(void)
{
 8002948:	b580      	push	{r7, lr}
 800294a:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI2_Init 1 */

  /* USER CODE END SPI2_Init 1 */
  /* SPI2 parameter configuration*/
  hspi2.Instance = SPI2;
 800294c:	4b17      	ldr	r3, [pc, #92]	; (80029ac <MX_SPI2_Init+0x64>)
 800294e:	4a18      	ldr	r2, [pc, #96]	; (80029b0 <MX_SPI2_Init+0x68>)
 8002950:	601a      	str	r2, [r3, #0]
  hspi2.Init.Mode = SPI_MODE_MASTER;
 8002952:	4b16      	ldr	r3, [pc, #88]	; (80029ac <MX_SPI2_Init+0x64>)
 8002954:	f44f 7282 	mov.w	r2, #260	; 0x104
 8002958:	605a      	str	r2, [r3, #4]
  hspi2.Init.Direction = SPI_DIRECTION_2LINES;
 800295a:	4b14      	ldr	r3, [pc, #80]	; (80029ac <MX_SPI2_Init+0x64>)
 800295c:	2200      	movs	r2, #0
 800295e:	609a      	str	r2, [r3, #8]
  hspi2.Init.DataSize = SPI_DATASIZE_8BIT;
 8002960:	4b12      	ldr	r3, [pc, #72]	; (80029ac <MX_SPI2_Init+0x64>)
 8002962:	2200      	movs	r2, #0
 8002964:	60da      	str	r2, [r3, #12]
  hspi2.Init.CLKPolarity = SPI_POLARITY_LOW;
 8002966:	4b11      	ldr	r3, [pc, #68]	; (80029ac <MX_SPI2_Init+0x64>)
 8002968:	2200      	movs	r2, #0
 800296a:	611a      	str	r2, [r3, #16]
  hspi2.Init.CLKPhase = SPI_PHASE_1EDGE;
 800296c:	4b0f      	ldr	r3, [pc, #60]	; (80029ac <MX_SPI2_Init+0x64>)
 800296e:	2200      	movs	r2, #0
 8002970:	615a      	str	r2, [r3, #20]
  hspi2.Init.NSS = SPI_NSS_SOFT;
 8002972:	4b0e      	ldr	r3, [pc, #56]	; (80029ac <MX_SPI2_Init+0x64>)
 8002974:	f44f 7200 	mov.w	r2, #512	; 0x200
 8002978:	619a      	str	r2, [r3, #24]
  hspi2.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_256;
 800297a:	4b0c      	ldr	r3, [pc, #48]	; (80029ac <MX_SPI2_Init+0x64>)
 800297c:	2238      	movs	r2, #56	; 0x38
 800297e:	61da      	str	r2, [r3, #28]
  hspi2.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8002980:	4b0a      	ldr	r3, [pc, #40]	; (80029ac <MX_SPI2_Init+0x64>)
 8002982:	2200      	movs	r2, #0
 8002984:	621a      	str	r2, [r3, #32]
  hspi2.Init.TIMode = SPI_TIMODE_DISABLE;
 8002986:	4b09      	ldr	r3, [pc, #36]	; (80029ac <MX_SPI2_Init+0x64>)
 8002988:	2200      	movs	r2, #0
 800298a:	625a      	str	r2, [r3, #36]	; 0x24
  hspi2.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800298c:	4b07      	ldr	r3, [pc, #28]	; (80029ac <MX_SPI2_Init+0x64>)
 800298e:	2200      	movs	r2, #0
 8002990:	629a      	str	r2, [r3, #40]	; 0x28
  hspi2.Init.CRCPolynomial = 10;
 8002992:	4b06      	ldr	r3, [pc, #24]	; (80029ac <MX_SPI2_Init+0x64>)
 8002994:	220a      	movs	r2, #10
 8002996:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi2) != HAL_OK)
 8002998:	4804      	ldr	r0, [pc, #16]	; (80029ac <MX_SPI2_Init+0x64>)
 800299a:	f001 ff31 	bl	8004800 <HAL_SPI_Init>
 800299e:	4603      	mov	r3, r0
 80029a0:	2b00      	cmp	r3, #0
 80029a2:	d001      	beq.n	80029a8 <MX_SPI2_Init+0x60>
  {
    Error_Handler();
 80029a4:	f000 f964 	bl	8002c70 <Error_Handler>
  }
  /* USER CODE BEGIN SPI2_Init 2 */

  /* USER CODE END SPI2_Init 2 */

}
 80029a8:	bf00      	nop
 80029aa:	bd80      	pop	{r7, pc}
 80029ac:	20000098 	.word	0x20000098
 80029b0:	40003800 	.word	0x40003800

080029b4 <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 80029b4:	b580      	push	{r7, lr}
 80029b6:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 80029b8:	4b11      	ldr	r3, [pc, #68]	; (8002a00 <MX_USART1_UART_Init+0x4c>)
 80029ba:	4a12      	ldr	r2, [pc, #72]	; (8002a04 <MX_USART1_UART_Init+0x50>)
 80029bc:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 80029be:	4b10      	ldr	r3, [pc, #64]	; (8002a00 <MX_USART1_UART_Init+0x4c>)
 80029c0:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 80029c4:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 80029c6:	4b0e      	ldr	r3, [pc, #56]	; (8002a00 <MX_USART1_UART_Init+0x4c>)
 80029c8:	2200      	movs	r2, #0
 80029ca:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 80029cc:	4b0c      	ldr	r3, [pc, #48]	; (8002a00 <MX_USART1_UART_Init+0x4c>)
 80029ce:	2200      	movs	r2, #0
 80029d0:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 80029d2:	4b0b      	ldr	r3, [pc, #44]	; (8002a00 <MX_USART1_UART_Init+0x4c>)
 80029d4:	2200      	movs	r2, #0
 80029d6:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 80029d8:	4b09      	ldr	r3, [pc, #36]	; (8002a00 <MX_USART1_UART_Init+0x4c>)
 80029da:	220c      	movs	r2, #12
 80029dc:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80029de:	4b08      	ldr	r3, [pc, #32]	; (8002a00 <MX_USART1_UART_Init+0x4c>)
 80029e0:	2200      	movs	r2, #0
 80029e2:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 80029e4:	4b06      	ldr	r3, [pc, #24]	; (8002a00 <MX_USART1_UART_Init+0x4c>)
 80029e6:	2200      	movs	r2, #0
 80029e8:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 80029ea:	4805      	ldr	r0, [pc, #20]	; (8002a00 <MX_USART1_UART_Init+0x4c>)
 80029ec:	f002 fc74 	bl	80052d8 <HAL_UART_Init>
 80029f0:	4603      	mov	r3, r0
 80029f2:	2b00      	cmp	r3, #0
 80029f4:	d001      	beq.n	80029fa <MX_USART1_UART_Init+0x46>
  {
    Error_Handler();
 80029f6:	f000 f93b 	bl	8002c70 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 80029fa:	bf00      	nop
 80029fc:	bd80      	pop	{r7, pc}
 80029fe:	bf00      	nop
 8002a00:	200000f0 	.word	0x200000f0
 8002a04:	40013800 	.word	0x40013800

08002a08 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8002a08:	b580      	push	{r7, lr}
 8002a0a:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8002a0c:	4b11      	ldr	r3, [pc, #68]	; (8002a54 <MX_USART2_UART_Init+0x4c>)
 8002a0e:	4a12      	ldr	r2, [pc, #72]	; (8002a58 <MX_USART2_UART_Init+0x50>)
 8002a10:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 9600;
 8002a12:	4b10      	ldr	r3, [pc, #64]	; (8002a54 <MX_USART2_UART_Init+0x4c>)
 8002a14:	f44f 5216 	mov.w	r2, #9600	; 0x2580
 8002a18:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8002a1a:	4b0e      	ldr	r3, [pc, #56]	; (8002a54 <MX_USART2_UART_Init+0x4c>)
 8002a1c:	2200      	movs	r2, #0
 8002a1e:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8002a20:	4b0c      	ldr	r3, [pc, #48]	; (8002a54 <MX_USART2_UART_Init+0x4c>)
 8002a22:	2200      	movs	r2, #0
 8002a24:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8002a26:	4b0b      	ldr	r3, [pc, #44]	; (8002a54 <MX_USART2_UART_Init+0x4c>)
 8002a28:	2200      	movs	r2, #0
 8002a2a:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8002a2c:	4b09      	ldr	r3, [pc, #36]	; (8002a54 <MX_USART2_UART_Init+0x4c>)
 8002a2e:	220c      	movs	r2, #12
 8002a30:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8002a32:	4b08      	ldr	r3, [pc, #32]	; (8002a54 <MX_USART2_UART_Init+0x4c>)
 8002a34:	2200      	movs	r2, #0
 8002a36:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8002a38:	4b06      	ldr	r3, [pc, #24]	; (8002a54 <MX_USART2_UART_Init+0x4c>)
 8002a3a:	2200      	movs	r2, #0
 8002a3c:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8002a3e:	4805      	ldr	r0, [pc, #20]	; (8002a54 <MX_USART2_UART_Init+0x4c>)
 8002a40:	f002 fc4a 	bl	80052d8 <HAL_UART_Init>
 8002a44:	4603      	mov	r3, r0
 8002a46:	2b00      	cmp	r3, #0
 8002a48:	d001      	beq.n	8002a4e <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 8002a4a:	f000 f911 	bl	8002c70 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8002a4e:	bf00      	nop
 8002a50:	bd80      	pop	{r7, pc}
 8002a52:	bf00      	nop
 8002a54:	20000134 	.word	0x20000134
 8002a58:	40004400 	.word	0x40004400

08002a5c <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8002a5c:	b580      	push	{r7, lr}
 8002a5e:	b088      	sub	sp, #32
 8002a60:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002a62:	f107 0310 	add.w	r3, r7, #16
 8002a66:	2200      	movs	r2, #0
 8002a68:	601a      	str	r2, [r3, #0]
 8002a6a:	605a      	str	r2, [r3, #4]
 8002a6c:	609a      	str	r2, [r3, #8]
 8002a6e:	60da      	str	r2, [r3, #12]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8002a70:	4b2e      	ldr	r3, [pc, #184]	; (8002b2c <MX_GPIO_Init+0xd0>)
 8002a72:	699b      	ldr	r3, [r3, #24]
 8002a74:	4a2d      	ldr	r2, [pc, #180]	; (8002b2c <MX_GPIO_Init+0xd0>)
 8002a76:	f043 0320 	orr.w	r3, r3, #32
 8002a7a:	6193      	str	r3, [r2, #24]
 8002a7c:	4b2b      	ldr	r3, [pc, #172]	; (8002b2c <MX_GPIO_Init+0xd0>)
 8002a7e:	699b      	ldr	r3, [r3, #24]
 8002a80:	f003 0320 	and.w	r3, r3, #32
 8002a84:	60fb      	str	r3, [r7, #12]
 8002a86:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8002a88:	4b28      	ldr	r3, [pc, #160]	; (8002b2c <MX_GPIO_Init+0xd0>)
 8002a8a:	699b      	ldr	r3, [r3, #24]
 8002a8c:	4a27      	ldr	r2, [pc, #156]	; (8002b2c <MX_GPIO_Init+0xd0>)
 8002a8e:	f043 0304 	orr.w	r3, r3, #4
 8002a92:	6193      	str	r3, [r2, #24]
 8002a94:	4b25      	ldr	r3, [pc, #148]	; (8002b2c <MX_GPIO_Init+0xd0>)
 8002a96:	699b      	ldr	r3, [r3, #24]
 8002a98:	f003 0304 	and.w	r3, r3, #4
 8002a9c:	60bb      	str	r3, [r7, #8]
 8002a9e:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8002aa0:	4b22      	ldr	r3, [pc, #136]	; (8002b2c <MX_GPIO_Init+0xd0>)
 8002aa2:	699b      	ldr	r3, [r3, #24]
 8002aa4:	4a21      	ldr	r2, [pc, #132]	; (8002b2c <MX_GPIO_Init+0xd0>)
 8002aa6:	f043 0308 	orr.w	r3, r3, #8
 8002aaa:	6193      	str	r3, [r2, #24]
 8002aac:	4b1f      	ldr	r3, [pc, #124]	; (8002b2c <MX_GPIO_Init+0xd0>)
 8002aae:	699b      	ldr	r3, [r3, #24]
 8002ab0:	f003 0308 	and.w	r3, r3, #8
 8002ab4:	607b      	str	r3, [r7, #4]
 8002ab6:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, TX_EN_Pin|LED_Pin, GPIO_PIN_RESET);
 8002ab8:	2200      	movs	r2, #0
 8002aba:	21c0      	movs	r1, #192	; 0xc0
 8002abc:	481c      	ldr	r0, [pc, #112]	; (8002b30 <MX_GPIO_Init+0xd4>)
 8002abe:	f001 f99e 	bl	8003dfe <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(NSS_GPIO_Port, NSS_Pin, GPIO_PIN_RESET);
 8002ac2:	2200      	movs	r2, #0
 8002ac4:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8002ac8:	481a      	ldr	r0, [pc, #104]	; (8002b34 <MX_GPIO_Init+0xd8>)
 8002aca:	f001 f998 	bl	8003dfe <HAL_GPIO_WritePin>

  /*Configure GPIO pins : TX_EN_Pin LED_Pin */
  GPIO_InitStruct.Pin = TX_EN_Pin|LED_Pin;
 8002ace:	23c0      	movs	r3, #192	; 0xc0
 8002ad0:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002ad2:	2301      	movs	r3, #1
 8002ad4:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002ad6:	2300      	movs	r3, #0
 8002ad8:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002ada:	2302      	movs	r3, #2
 8002adc:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002ade:	f107 0310 	add.w	r3, r7, #16
 8002ae2:	4619      	mov	r1, r3
 8002ae4:	4812      	ldr	r0, [pc, #72]	; (8002b30 <MX_GPIO_Init+0xd4>)
 8002ae6:	f000 ffef 	bl	8003ac8 <HAL_GPIO_Init>

  /*Configure GPIO pin : NSS_Pin */
  GPIO_InitStruct.Pin = NSS_Pin;
 8002aea:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8002aee:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002af0:	2301      	movs	r3, #1
 8002af2:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002af4:	2300      	movs	r3, #0
 8002af6:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002af8:	2302      	movs	r3, #2
 8002afa:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(NSS_GPIO_Port, &GPIO_InitStruct);
 8002afc:	f107 0310 	add.w	r3, r7, #16
 8002b00:	4619      	mov	r1, r3
 8002b02:	480c      	ldr	r0, [pc, #48]	; (8002b34 <MX_GPIO_Init+0xd8>)
 8002b04:	f000 ffe0 	bl	8003ac8 <HAL_GPIO_Init>

  /*Configure GPIO pin : READY_Pin */
  GPIO_InitStruct.Pin = READY_Pin;
 8002b08:	f44f 7380 	mov.w	r3, #256	; 0x100
 8002b0c:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8002b0e:	2300      	movs	r3, #0
 8002b10:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002b12:	2300      	movs	r3, #0
 8002b14:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(READY_GPIO_Port, &GPIO_InitStruct);
 8002b16:	f107 0310 	add.w	r3, r7, #16
 8002b1a:	4619      	mov	r1, r3
 8002b1c:	4804      	ldr	r0, [pc, #16]	; (8002b30 <MX_GPIO_Init+0xd4>)
 8002b1e:	f000 ffd3 	bl	8003ac8 <HAL_GPIO_Init>

}
 8002b22:	bf00      	nop
 8002b24:	3720      	adds	r7, #32
 8002b26:	46bd      	mov	sp, r7
 8002b28:	bd80      	pop	{r7, pc}
 8002b2a:	bf00      	nop
 8002b2c:	40021000 	.word	0x40021000
 8002b30:	40010800 	.word	0x40010800
 8002b34:	40010c00 	.word	0x40010c00

08002b38 <StartDefaultTask>:
  * @param  argument: Not used
  * @retval None
  */
/* USER CODE END Header_StartDefaultTask */
void StartDefaultTask(void *argument)
{
 8002b38:	b580      	push	{r7, lr}
 8002b3a:	b088      	sub	sp, #32
 8002b3c:	af00      	add	r7, sp, #0
 8002b3e:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 5 */
  /* Infinite loop */
  for(;;)
  {
	  xSemaphoreTake(ModbusH.ModBusSphrHandle , 100);
 8002b40:	4b41      	ldr	r3, [pc, #260]	; (8002c48 <StartDefaultTask+0x110>)
 8002b42:	f8d3 30b8 	ldr.w	r3, [r3, #184]	; 0xb8
 8002b46:	2164      	movs	r1, #100	; 0x64
 8002b48:	4618      	mov	r0, r3
 8002b4a:	f004 f943 	bl	8006dd4 <xQueueSemaphoreTake>
	  Register.ADC = HAL_ADC_GetValue(&hadc1);
 8002b4e:	483f      	ldr	r0, [pc, #252]	; (8002c4c <StartDefaultTask+0x114>)
 8002b50:	f000 fc5c 	bl	800340c <HAL_ADC_GetValue>
 8002b54:	4603      	mov	r3, r0
 8002b56:	b29a      	uxth	r2, r3
 8002b58:	4b3d      	ldr	r3, [pc, #244]	; (8002c50 <StartDefaultTask+0x118>)
 8002b5a:	801a      	strh	r2, [r3, #0]

	  if(!HAL_GPIO_ReadPin(READY_GPIO_Port, READY_Pin)){
 8002b5c:	f44f 7180 	mov.w	r1, #256	; 0x100
 8002b60:	483c      	ldr	r0, [pc, #240]	; (8002c54 <StartDefaultTask+0x11c>)
 8002b62:	f001 f935 	bl	8003dd0 <HAL_GPIO_ReadPin>
 8002b66:	4603      	mov	r3, r0
 8002b68:	2b00      	cmp	r3, #0
 8002b6a:	d160      	bne.n	8002c2e <StartDefaultTask+0xf6>
		  HAL_GPIO_TogglePin(LED_GPIO_Port,LED_Pin);
 8002b6c:	2180      	movs	r1, #128	; 0x80
 8002b6e:	4839      	ldr	r0, [pc, #228]	; (8002c54 <StartDefaultTask+0x11c>)
 8002b70:	f001 f95d 	bl	8003e2e <HAL_GPIO_TogglePin>
	  HAL_GPIO_WritePin(NSS_GPIO_Port, NSS_Pin, 0);
 8002b74:	2200      	movs	r2, #0
 8002b76:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8002b7a:	4837      	ldr	r0, [pc, #220]	; (8002c58 <StartDefaultTask+0x120>)
 8002b7c:	f001 f93f 	bl	8003dfe <HAL_GPIO_WritePin>
	  uint8_t test1[] = {0x00U};
 8002b80:	2300      	movs	r3, #0
 8002b82:	753b      	strb	r3, [r7, #20]
	  uint8_t data[8];
	  MAX31865 rdata;
	  HAL_SPI_Transmit(&hspi2, test1, 1, 60);
 8002b84:	f107 0114 	add.w	r1, r7, #20
 8002b88:	233c      	movs	r3, #60	; 0x3c
 8002b8a:	2201      	movs	r2, #1
 8002b8c:	4833      	ldr	r0, [pc, #204]	; (8002c5c <StartDefaultTask+0x124>)
 8002b8e:	f001 febb 	bl	8004908 <HAL_SPI_Transmit>
		for(int i = 0; i < 8; i++)
 8002b92:	2300      	movs	r3, #0
 8002b94:	61fb      	str	r3, [r7, #28]
 8002b96:	e00b      	b.n	8002bb0 <StartDefaultTask+0x78>
		{
			HAL_SPI_Receive(&hspi2, &data[i], 1, 60);
 8002b98:	f107 020c 	add.w	r2, r7, #12
 8002b9c:	69fb      	ldr	r3, [r7, #28]
 8002b9e:	18d1      	adds	r1, r2, r3
 8002ba0:	233c      	movs	r3, #60	; 0x3c
 8002ba2:	2201      	movs	r2, #1
 8002ba4:	482d      	ldr	r0, [pc, #180]	; (8002c5c <StartDefaultTask+0x124>)
 8002ba6:	f001 ffeb 	bl	8004b80 <HAL_SPI_Receive>
		for(int i = 0; i < 8; i++)
 8002baa:	69fb      	ldr	r3, [r7, #28]
 8002bac:	3301      	adds	r3, #1
 8002bae:	61fb      	str	r3, [r7, #28]
 8002bb0:	69fb      	ldr	r3, [r7, #28]
 8002bb2:	2b07      	cmp	r3, #7
 8002bb4:	ddf0      	ble.n	8002b98 <StartDefaultTask+0x60>
		}
	HAL_UART_Transmit(&huart1, (uint8_t *)data, sizeof(data), 1000);
 8002bb6:	f107 010c 	add.w	r1, r7, #12
 8002bba:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8002bbe:	2208      	movs	r2, #8
 8002bc0:	4827      	ldr	r0, [pc, #156]	; (8002c60 <StartDefaultTask+0x128>)
 8002bc2:	f002 fbd6 	bl	8005372 <HAL_UART_Transmit>
	float alpha = 0.00385055;
 8002bc6:	4b27      	ldr	r3, [pc, #156]	; (8002c64 <StartDefaultTask+0x12c>)
 8002bc8:	61bb      	str	r3, [r7, #24]
	rdata.dataframe[0] = data[2];
 8002bca:	7bbb      	ldrb	r3, [r7, #14]
 8002bcc:	723b      	strb	r3, [r7, #8]
	rdata.dataframe[1] = data[1];
 8002bce:	7b7b      	ldrb	r3, [r7, #13]
 8002bd0:	727b      	strb	r3, [r7, #9]
	Register.RSPI1 = ((float) (rdata.adc * 430 / pow(2,15))/100 - 1)/alpha;
 8002bd2:	893b      	ldrh	r3, [r7, #8]
 8002bd4:	461a      	mov	r2, r3
 8002bd6:	f44f 73d7 	mov.w	r3, #430	; 0x1ae
 8002bda:	fb02 f303 	mul.w	r3, r2, r3
 8002bde:	4618      	mov	r0, r3
 8002be0:	f7fd fc08 	bl	80003f4 <__aeabi_i2d>
 8002be4:	f04f 0200 	mov.w	r2, #0
 8002be8:	4b1f      	ldr	r3, [pc, #124]	; (8002c68 <StartDefaultTask+0x130>)
 8002bea:	f7fd fd97 	bl	800071c <__aeabi_ddiv>
 8002bee:	4602      	mov	r2, r0
 8002bf0:	460b      	mov	r3, r1
 8002bf2:	4610      	mov	r0, r2
 8002bf4:	4619      	mov	r1, r3
 8002bf6:	f7fd fe79 	bl	80008ec <__aeabi_d2f>
 8002bfa:	4603      	mov	r3, r0
 8002bfc:	491b      	ldr	r1, [pc, #108]	; (8002c6c <StartDefaultTask+0x134>)
 8002bfe:	4618      	mov	r0, r3
 8002c00:	f7fe f886 	bl	8000d10 <__aeabi_fdiv>
 8002c04:	4603      	mov	r3, r0
 8002c06:	f04f 517e 	mov.w	r1, #1065353216	; 0x3f800000
 8002c0a:	4618      	mov	r0, r3
 8002c0c:	f7fd fec2 	bl	8000994 <__aeabi_fsub>
 8002c10:	4603      	mov	r3, r0
 8002c12:	69b9      	ldr	r1, [r7, #24]
 8002c14:	4618      	mov	r0, r3
 8002c16:	f7fe f87b 	bl	8000d10 <__aeabi_fdiv>
 8002c1a:	4603      	mov	r3, r0
 8002c1c:	461a      	mov	r2, r3
 8002c1e:	4b0c      	ldr	r3, [pc, #48]	; (8002c50 <StartDefaultTask+0x118>)
 8002c20:	605a      	str	r2, [r3, #4]
	  HAL_GPIO_WritePin(NSS_GPIO_Port, NSS_Pin, 1);
 8002c22:	2201      	movs	r2, #1
 8002c24:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8002c28:	480b      	ldr	r0, [pc, #44]	; (8002c58 <StartDefaultTask+0x120>)
 8002c2a:	f001 f8e8 	bl	8003dfe <HAL_GPIO_WritePin>
	  }
	  xSemaphoreGive(ModbusH.ModBusSphrHandle);
 8002c2e:	4b06      	ldr	r3, [pc, #24]	; (8002c48 <StartDefaultTask+0x110>)
 8002c30:	f8d3 00b8 	ldr.w	r0, [r3, #184]	; 0xb8
 8002c34:	2300      	movs	r3, #0
 8002c36:	2200      	movs	r2, #0
 8002c38:	2100      	movs	r1, #0
 8002c3a:	f003 fe55 	bl	80068e8 <xQueueGenericSend>
    osDelay(1000);
 8002c3e:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8002c42:	f003 fa75 	bl	8006130 <osDelay>
	  xSemaphoreTake(ModbusH.ModBusSphrHandle , 100);
 8002c46:	e77b      	b.n	8002b40 <StartDefaultTask+0x8>
 8002c48:	2000017c 	.word	0x2000017c
 8002c4c:	20000038 	.word	0x20000038
 8002c50:	200002c0 	.word	0x200002c0
 8002c54:	40010800 	.word	0x40010800
 8002c58:	40010c00 	.word	0x40010c00
 8002c5c:	20000098 	.word	0x20000098
 8002c60:	200000f0 	.word	0x200000f0
 8002c64:	3b7c5982 	.word	0x3b7c5982
 8002c68:	40e00000 	.word	0x40e00000
 8002c6c:	42c80000 	.word	0x42c80000

08002c70 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8002c70:	b480      	push	{r7}
 8002c72:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8002c74:	b672      	cpsid	i
}
 8002c76:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8002c78:	e7fe      	b.n	8002c78 <Error_Handler+0x8>
	...

08002c7c <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8002c7c:	b580      	push	{r7, lr}
 8002c7e:	b084      	sub	sp, #16
 8002c80:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 8002c82:	4b18      	ldr	r3, [pc, #96]	; (8002ce4 <HAL_MspInit+0x68>)
 8002c84:	699b      	ldr	r3, [r3, #24]
 8002c86:	4a17      	ldr	r2, [pc, #92]	; (8002ce4 <HAL_MspInit+0x68>)
 8002c88:	f043 0301 	orr.w	r3, r3, #1
 8002c8c:	6193      	str	r3, [r2, #24]
 8002c8e:	4b15      	ldr	r3, [pc, #84]	; (8002ce4 <HAL_MspInit+0x68>)
 8002c90:	699b      	ldr	r3, [r3, #24]
 8002c92:	f003 0301 	and.w	r3, r3, #1
 8002c96:	60bb      	str	r3, [r7, #8]
 8002c98:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 8002c9a:	4b12      	ldr	r3, [pc, #72]	; (8002ce4 <HAL_MspInit+0x68>)
 8002c9c:	69db      	ldr	r3, [r3, #28]
 8002c9e:	4a11      	ldr	r2, [pc, #68]	; (8002ce4 <HAL_MspInit+0x68>)
 8002ca0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002ca4:	61d3      	str	r3, [r2, #28]
 8002ca6:	4b0f      	ldr	r3, [pc, #60]	; (8002ce4 <HAL_MspInit+0x68>)
 8002ca8:	69db      	ldr	r3, [r3, #28]
 8002caa:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002cae:	607b      	str	r3, [r7, #4]
 8002cb0:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 8002cb2:	2200      	movs	r2, #0
 8002cb4:	210f      	movs	r1, #15
 8002cb6:	f06f 0001 	mvn.w	r0, #1
 8002cba:	f000 fe1e 	bl	80038fa <HAL_NVIC_SetPriority>

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 8002cbe:	4b0a      	ldr	r3, [pc, #40]	; (8002ce8 <HAL_MspInit+0x6c>)
 8002cc0:	685b      	ldr	r3, [r3, #4]
 8002cc2:	60fb      	str	r3, [r7, #12]
 8002cc4:	68fb      	ldr	r3, [r7, #12]
 8002cc6:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
 8002cca:	60fb      	str	r3, [r7, #12]
 8002ccc:	68fb      	ldr	r3, [r7, #12]
 8002cce:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8002cd2:	60fb      	str	r3, [r7, #12]
 8002cd4:	4a04      	ldr	r2, [pc, #16]	; (8002ce8 <HAL_MspInit+0x6c>)
 8002cd6:	68fb      	ldr	r3, [r7, #12]
 8002cd8:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8002cda:	bf00      	nop
 8002cdc:	3710      	adds	r7, #16
 8002cde:	46bd      	mov	sp, r7
 8002ce0:	bd80      	pop	{r7, pc}
 8002ce2:	bf00      	nop
 8002ce4:	40021000 	.word	0x40021000
 8002ce8:	40010000 	.word	0x40010000

08002cec <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8002cec:	b580      	push	{r7, lr}
 8002cee:	b08a      	sub	sp, #40	; 0x28
 8002cf0:	af00      	add	r7, sp, #0
 8002cf2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002cf4:	f107 0318 	add.w	r3, r7, #24
 8002cf8:	2200      	movs	r2, #0
 8002cfa:	601a      	str	r2, [r3, #0]
 8002cfc:	605a      	str	r2, [r3, #4]
 8002cfe:	609a      	str	r2, [r3, #8]
 8002d00:	60da      	str	r2, [r3, #12]
  if(hadc->Instance==ADC1)
 8002d02:	687b      	ldr	r3, [r7, #4]
 8002d04:	681b      	ldr	r3, [r3, #0]
 8002d06:	4a28      	ldr	r2, [pc, #160]	; (8002da8 <HAL_ADC_MspInit+0xbc>)
 8002d08:	4293      	cmp	r3, r2
 8002d0a:	d122      	bne.n	8002d52 <HAL_ADC_MspInit+0x66>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 8002d0c:	4b27      	ldr	r3, [pc, #156]	; (8002dac <HAL_ADC_MspInit+0xc0>)
 8002d0e:	699b      	ldr	r3, [r3, #24]
 8002d10:	4a26      	ldr	r2, [pc, #152]	; (8002dac <HAL_ADC_MspInit+0xc0>)
 8002d12:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8002d16:	6193      	str	r3, [r2, #24]
 8002d18:	4b24      	ldr	r3, [pc, #144]	; (8002dac <HAL_ADC_MspInit+0xc0>)
 8002d1a:	699b      	ldr	r3, [r3, #24]
 8002d1c:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8002d20:	617b      	str	r3, [r7, #20]
 8002d22:	697b      	ldr	r3, [r7, #20]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002d24:	4b21      	ldr	r3, [pc, #132]	; (8002dac <HAL_ADC_MspInit+0xc0>)
 8002d26:	699b      	ldr	r3, [r3, #24]
 8002d28:	4a20      	ldr	r2, [pc, #128]	; (8002dac <HAL_ADC_MspInit+0xc0>)
 8002d2a:	f043 0304 	orr.w	r3, r3, #4
 8002d2e:	6193      	str	r3, [r2, #24]
 8002d30:	4b1e      	ldr	r3, [pc, #120]	; (8002dac <HAL_ADC_MspInit+0xc0>)
 8002d32:	699b      	ldr	r3, [r3, #24]
 8002d34:	f003 0304 	and.w	r3, r3, #4
 8002d38:	613b      	str	r3, [r7, #16]
 8002d3a:	693b      	ldr	r3, [r7, #16]
    /**ADC1 GPIO Configuration
    PA1     ------> ADC1_IN1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_1;
 8002d3c:	2302      	movs	r3, #2
 8002d3e:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8002d40:	2303      	movs	r3, #3
 8002d42:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002d44:	f107 0318 	add.w	r3, r7, #24
 8002d48:	4619      	mov	r1, r3
 8002d4a:	4819      	ldr	r0, [pc, #100]	; (8002db0 <HAL_ADC_MspInit+0xc4>)
 8002d4c:	f000 febc 	bl	8003ac8 <HAL_GPIO_Init>
  /* USER CODE BEGIN ADC2_MspInit 1 */

  /* USER CODE END ADC2_MspInit 1 */
  }

}
 8002d50:	e026      	b.n	8002da0 <HAL_ADC_MspInit+0xb4>
  else if(hadc->Instance==ADC2)
 8002d52:	687b      	ldr	r3, [r7, #4]
 8002d54:	681b      	ldr	r3, [r3, #0]
 8002d56:	4a17      	ldr	r2, [pc, #92]	; (8002db4 <HAL_ADC_MspInit+0xc8>)
 8002d58:	4293      	cmp	r3, r2
 8002d5a:	d121      	bne.n	8002da0 <HAL_ADC_MspInit+0xb4>
    __HAL_RCC_ADC2_CLK_ENABLE();
 8002d5c:	4b13      	ldr	r3, [pc, #76]	; (8002dac <HAL_ADC_MspInit+0xc0>)
 8002d5e:	699b      	ldr	r3, [r3, #24]
 8002d60:	4a12      	ldr	r2, [pc, #72]	; (8002dac <HAL_ADC_MspInit+0xc0>)
 8002d62:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8002d66:	6193      	str	r3, [r2, #24]
 8002d68:	4b10      	ldr	r3, [pc, #64]	; (8002dac <HAL_ADC_MspInit+0xc0>)
 8002d6a:	699b      	ldr	r3, [r3, #24]
 8002d6c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002d70:	60fb      	str	r3, [r7, #12]
 8002d72:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002d74:	4b0d      	ldr	r3, [pc, #52]	; (8002dac <HAL_ADC_MspInit+0xc0>)
 8002d76:	699b      	ldr	r3, [r3, #24]
 8002d78:	4a0c      	ldr	r2, [pc, #48]	; (8002dac <HAL_ADC_MspInit+0xc0>)
 8002d7a:	f043 0304 	orr.w	r3, r3, #4
 8002d7e:	6193      	str	r3, [r2, #24]
 8002d80:	4b0a      	ldr	r3, [pc, #40]	; (8002dac <HAL_ADC_MspInit+0xc0>)
 8002d82:	699b      	ldr	r3, [r3, #24]
 8002d84:	f003 0304 	and.w	r3, r3, #4
 8002d88:	60bb      	str	r3, [r7, #8]
 8002d8a:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_4;
 8002d8c:	2310      	movs	r3, #16
 8002d8e:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8002d90:	2303      	movs	r3, #3
 8002d92:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002d94:	f107 0318 	add.w	r3, r7, #24
 8002d98:	4619      	mov	r1, r3
 8002d9a:	4805      	ldr	r0, [pc, #20]	; (8002db0 <HAL_ADC_MspInit+0xc4>)
 8002d9c:	f000 fe94 	bl	8003ac8 <HAL_GPIO_Init>
}
 8002da0:	bf00      	nop
 8002da2:	3728      	adds	r7, #40	; 0x28
 8002da4:	46bd      	mov	sp, r7
 8002da6:	bd80      	pop	{r7, pc}
 8002da8:	40012400 	.word	0x40012400
 8002dac:	40021000 	.word	0x40021000
 8002db0:	40010800 	.word	0x40010800
 8002db4:	40012800 	.word	0x40012800

08002db8 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8002db8:	b580      	push	{r7, lr}
 8002dba:	b088      	sub	sp, #32
 8002dbc:	af00      	add	r7, sp, #0
 8002dbe:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002dc0:	f107 0310 	add.w	r3, r7, #16
 8002dc4:	2200      	movs	r2, #0
 8002dc6:	601a      	str	r2, [r3, #0]
 8002dc8:	605a      	str	r2, [r3, #4]
 8002dca:	609a      	str	r2, [r3, #8]
 8002dcc:	60da      	str	r2, [r3, #12]
  if(hspi->Instance==SPI2)
 8002dce:	687b      	ldr	r3, [r7, #4]
 8002dd0:	681b      	ldr	r3, [r3, #0]
 8002dd2:	4a1c      	ldr	r2, [pc, #112]	; (8002e44 <HAL_SPI_MspInit+0x8c>)
 8002dd4:	4293      	cmp	r3, r2
 8002dd6:	d131      	bne.n	8002e3c <HAL_SPI_MspInit+0x84>
  {
  /* USER CODE BEGIN SPI2_MspInit 0 */

  /* USER CODE END SPI2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI2_CLK_ENABLE();
 8002dd8:	4b1b      	ldr	r3, [pc, #108]	; (8002e48 <HAL_SPI_MspInit+0x90>)
 8002dda:	69db      	ldr	r3, [r3, #28]
 8002ddc:	4a1a      	ldr	r2, [pc, #104]	; (8002e48 <HAL_SPI_MspInit+0x90>)
 8002dde:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8002de2:	61d3      	str	r3, [r2, #28]
 8002de4:	4b18      	ldr	r3, [pc, #96]	; (8002e48 <HAL_SPI_MspInit+0x90>)
 8002de6:	69db      	ldr	r3, [r3, #28]
 8002de8:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002dec:	60fb      	str	r3, [r7, #12]
 8002dee:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002df0:	4b15      	ldr	r3, [pc, #84]	; (8002e48 <HAL_SPI_MspInit+0x90>)
 8002df2:	699b      	ldr	r3, [r3, #24]
 8002df4:	4a14      	ldr	r2, [pc, #80]	; (8002e48 <HAL_SPI_MspInit+0x90>)
 8002df6:	f043 0308 	orr.w	r3, r3, #8
 8002dfa:	6193      	str	r3, [r2, #24]
 8002dfc:	4b12      	ldr	r3, [pc, #72]	; (8002e48 <HAL_SPI_MspInit+0x90>)
 8002dfe:	699b      	ldr	r3, [r3, #24]
 8002e00:	f003 0308 	and.w	r3, r3, #8
 8002e04:	60bb      	str	r3, [r7, #8]
 8002e06:	68bb      	ldr	r3, [r7, #8]
    /**SPI2 GPIO Configuration
    PB13     ------> SPI2_SCK
    PB14     ------> SPI2_MISO
    PB15     ------> SPI2_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_13|GPIO_PIN_15;
 8002e08:	f44f 4320 	mov.w	r3, #40960	; 0xa000
 8002e0c:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002e0e:	2302      	movs	r3, #2
 8002e10:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8002e12:	2303      	movs	r3, #3
 8002e14:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002e16:	f107 0310 	add.w	r3, r7, #16
 8002e1a:	4619      	mov	r1, r3
 8002e1c:	480b      	ldr	r0, [pc, #44]	; (8002e4c <HAL_SPI_MspInit+0x94>)
 8002e1e:	f000 fe53 	bl	8003ac8 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_14;
 8002e22:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8002e26:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8002e28:	2300      	movs	r3, #0
 8002e2a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002e2c:	2300      	movs	r3, #0
 8002e2e:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002e30:	f107 0310 	add.w	r3, r7, #16
 8002e34:	4619      	mov	r1, r3
 8002e36:	4805      	ldr	r0, [pc, #20]	; (8002e4c <HAL_SPI_MspInit+0x94>)
 8002e38:	f000 fe46 	bl	8003ac8 <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI2_MspInit 1 */

  /* USER CODE END SPI2_MspInit 1 */
  }

}
 8002e3c:	bf00      	nop
 8002e3e:	3720      	adds	r7, #32
 8002e40:	46bd      	mov	sp, r7
 8002e42:	bd80      	pop	{r7, pc}
 8002e44:	40003800 	.word	0x40003800
 8002e48:	40021000 	.word	0x40021000
 8002e4c:	40010c00 	.word	0x40010c00

08002e50 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8002e50:	b580      	push	{r7, lr}
 8002e52:	b08a      	sub	sp, #40	; 0x28
 8002e54:	af00      	add	r7, sp, #0
 8002e56:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002e58:	f107 0318 	add.w	r3, r7, #24
 8002e5c:	2200      	movs	r2, #0
 8002e5e:	601a      	str	r2, [r3, #0]
 8002e60:	605a      	str	r2, [r3, #4]
 8002e62:	609a      	str	r2, [r3, #8]
 8002e64:	60da      	str	r2, [r3, #12]
  if(huart->Instance==USART1)
 8002e66:	687b      	ldr	r3, [r7, #4]
 8002e68:	681b      	ldr	r3, [r3, #0]
 8002e6a:	4a3f      	ldr	r2, [pc, #252]	; (8002f68 <HAL_UART_MspInit+0x118>)
 8002e6c:	4293      	cmp	r3, r2
 8002e6e:	d13a      	bne.n	8002ee6 <HAL_UART_MspInit+0x96>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8002e70:	4b3e      	ldr	r3, [pc, #248]	; (8002f6c <HAL_UART_MspInit+0x11c>)
 8002e72:	699b      	ldr	r3, [r3, #24]
 8002e74:	4a3d      	ldr	r2, [pc, #244]	; (8002f6c <HAL_UART_MspInit+0x11c>)
 8002e76:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8002e7a:	6193      	str	r3, [r2, #24]
 8002e7c:	4b3b      	ldr	r3, [pc, #236]	; (8002f6c <HAL_UART_MspInit+0x11c>)
 8002e7e:	699b      	ldr	r3, [r3, #24]
 8002e80:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002e84:	617b      	str	r3, [r7, #20]
 8002e86:	697b      	ldr	r3, [r7, #20]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002e88:	4b38      	ldr	r3, [pc, #224]	; (8002f6c <HAL_UART_MspInit+0x11c>)
 8002e8a:	699b      	ldr	r3, [r3, #24]
 8002e8c:	4a37      	ldr	r2, [pc, #220]	; (8002f6c <HAL_UART_MspInit+0x11c>)
 8002e8e:	f043 0304 	orr.w	r3, r3, #4
 8002e92:	6193      	str	r3, [r2, #24]
 8002e94:	4b35      	ldr	r3, [pc, #212]	; (8002f6c <HAL_UART_MspInit+0x11c>)
 8002e96:	699b      	ldr	r3, [r3, #24]
 8002e98:	f003 0304 	and.w	r3, r3, #4
 8002e9c:	613b      	str	r3, [r7, #16]
 8002e9e:	693b      	ldr	r3, [r7, #16]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9;
 8002ea0:	f44f 7300 	mov.w	r3, #512	; 0x200
 8002ea4:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002ea6:	2302      	movs	r3, #2
 8002ea8:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8002eaa:	2303      	movs	r3, #3
 8002eac:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002eae:	f107 0318 	add.w	r3, r7, #24
 8002eb2:	4619      	mov	r1, r3
 8002eb4:	482e      	ldr	r0, [pc, #184]	; (8002f70 <HAL_UART_MspInit+0x120>)
 8002eb6:	f000 fe07 	bl	8003ac8 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_10;
 8002eba:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8002ebe:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8002ec0:	2300      	movs	r3, #0
 8002ec2:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002ec4:	2300      	movs	r3, #0
 8002ec6:	623b      	str	r3, [r7, #32]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002ec8:	f107 0318 	add.w	r3, r7, #24
 8002ecc:	4619      	mov	r1, r3
 8002ece:	4828      	ldr	r0, [pc, #160]	; (8002f70 <HAL_UART_MspInit+0x120>)
 8002ed0:	f000 fdfa 	bl	8003ac8 <HAL_GPIO_Init>

    /* USART1 interrupt Init */
    HAL_NVIC_SetPriority(USART1_IRQn, 5, 0);
 8002ed4:	2200      	movs	r2, #0
 8002ed6:	2105      	movs	r1, #5
 8002ed8:	2025      	movs	r0, #37	; 0x25
 8002eda:	f000 fd0e 	bl	80038fa <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 8002ede:	2025      	movs	r0, #37	; 0x25
 8002ee0:	f000 fd27 	bl	8003932 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 8002ee4:	e03c      	b.n	8002f60 <HAL_UART_MspInit+0x110>
  else if(huart->Instance==USART2)
 8002ee6:	687b      	ldr	r3, [r7, #4]
 8002ee8:	681b      	ldr	r3, [r3, #0]
 8002eea:	4a22      	ldr	r2, [pc, #136]	; (8002f74 <HAL_UART_MspInit+0x124>)
 8002eec:	4293      	cmp	r3, r2
 8002eee:	d137      	bne.n	8002f60 <HAL_UART_MspInit+0x110>
    __HAL_RCC_USART2_CLK_ENABLE();
 8002ef0:	4b1e      	ldr	r3, [pc, #120]	; (8002f6c <HAL_UART_MspInit+0x11c>)
 8002ef2:	69db      	ldr	r3, [r3, #28]
 8002ef4:	4a1d      	ldr	r2, [pc, #116]	; (8002f6c <HAL_UART_MspInit+0x11c>)
 8002ef6:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002efa:	61d3      	str	r3, [r2, #28]
 8002efc:	4b1b      	ldr	r3, [pc, #108]	; (8002f6c <HAL_UART_MspInit+0x11c>)
 8002efe:	69db      	ldr	r3, [r3, #28]
 8002f00:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002f04:	60fb      	str	r3, [r7, #12]
 8002f06:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002f08:	4b18      	ldr	r3, [pc, #96]	; (8002f6c <HAL_UART_MspInit+0x11c>)
 8002f0a:	699b      	ldr	r3, [r3, #24]
 8002f0c:	4a17      	ldr	r2, [pc, #92]	; (8002f6c <HAL_UART_MspInit+0x11c>)
 8002f0e:	f043 0304 	orr.w	r3, r3, #4
 8002f12:	6193      	str	r3, [r2, #24]
 8002f14:	4b15      	ldr	r3, [pc, #84]	; (8002f6c <HAL_UART_MspInit+0x11c>)
 8002f16:	699b      	ldr	r3, [r3, #24]
 8002f18:	f003 0304 	and.w	r3, r3, #4
 8002f1c:	60bb      	str	r3, [r7, #8]
 8002f1e:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_2;
 8002f20:	2304      	movs	r3, #4
 8002f22:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002f24:	2302      	movs	r3, #2
 8002f26:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8002f28:	2303      	movs	r3, #3
 8002f2a:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002f2c:	f107 0318 	add.w	r3, r7, #24
 8002f30:	4619      	mov	r1, r3
 8002f32:	480f      	ldr	r0, [pc, #60]	; (8002f70 <HAL_UART_MspInit+0x120>)
 8002f34:	f000 fdc8 	bl	8003ac8 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_3;
 8002f38:	2308      	movs	r3, #8
 8002f3a:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8002f3c:	2300      	movs	r3, #0
 8002f3e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002f40:	2300      	movs	r3, #0
 8002f42:	623b      	str	r3, [r7, #32]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002f44:	f107 0318 	add.w	r3, r7, #24
 8002f48:	4619      	mov	r1, r3
 8002f4a:	4809      	ldr	r0, [pc, #36]	; (8002f70 <HAL_UART_MspInit+0x120>)
 8002f4c:	f000 fdbc 	bl	8003ac8 <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(USART2_IRQn, 5, 0);
 8002f50:	2200      	movs	r2, #0
 8002f52:	2105      	movs	r1, #5
 8002f54:	2026      	movs	r0, #38	; 0x26
 8002f56:	f000 fcd0 	bl	80038fa <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 8002f5a:	2026      	movs	r0, #38	; 0x26
 8002f5c:	f000 fce9 	bl	8003932 <HAL_NVIC_EnableIRQ>
}
 8002f60:	bf00      	nop
 8002f62:	3728      	adds	r7, #40	; 0x28
 8002f64:	46bd      	mov	sp, r7
 8002f66:	bd80      	pop	{r7, pc}
 8002f68:	40013800 	.word	0x40013800
 8002f6c:	40021000 	.word	0x40021000
 8002f70:	40010800 	.word	0x40010800
 8002f74:	40004400 	.word	0x40004400

08002f78 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8002f78:	b480      	push	{r7}
 8002f7a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8002f7c:	e7fe      	b.n	8002f7c <NMI_Handler+0x4>

08002f7e <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8002f7e:	b480      	push	{r7}
 8002f80:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8002f82:	e7fe      	b.n	8002f82 <HardFault_Handler+0x4>

08002f84 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8002f84:	b480      	push	{r7}
 8002f86:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8002f88:	e7fe      	b.n	8002f88 <MemManage_Handler+0x4>

08002f8a <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8002f8a:	b480      	push	{r7}
 8002f8c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8002f8e:	e7fe      	b.n	8002f8e <BusFault_Handler+0x4>

08002f90 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8002f90:	b480      	push	{r7}
 8002f92:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8002f94:	e7fe      	b.n	8002f94 <UsageFault_Handler+0x4>

08002f96 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8002f96:	b480      	push	{r7}
 8002f98:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8002f9a:	bf00      	nop
 8002f9c:	46bd      	mov	sp, r7
 8002f9e:	bc80      	pop	{r7}
 8002fa0:	4770      	bx	lr

08002fa2 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8002fa2:	b580      	push	{r7, lr}
 8002fa4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8002fa6:	f000 f88f 	bl	80030c8 <HAL_IncTick>
#if (INCLUDE_xTaskGetSchedulerState == 1 )
  if (xTaskGetSchedulerState() != taskSCHEDULER_NOT_STARTED)
 8002faa:	f005 f819 	bl	8007fe0 <xTaskGetSchedulerState>
 8002fae:	4603      	mov	r3, r0
 8002fb0:	2b01      	cmp	r3, #1
 8002fb2:	d001      	beq.n	8002fb8 <SysTick_Handler+0x16>
  {
#endif /* INCLUDE_xTaskGetSchedulerState */
  xPortSysTickHandler();
 8002fb4:	f006 f888 	bl	80090c8 <xPortSysTickHandler>
  }
#endif /* INCLUDE_xTaskGetSchedulerState */
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8002fb8:	bf00      	nop
 8002fba:	bd80      	pop	{r7, pc}

08002fbc <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt.
  */
void USART1_IRQHandler(void)
{
 8002fbc:	b580      	push	{r7, lr}
 8002fbe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 8002fc0:	4802      	ldr	r0, [pc, #8]	; (8002fcc <USART1_IRQHandler+0x10>)
 8002fc2:	f002 fb47 	bl	8005654 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 8002fc6:	bf00      	nop
 8002fc8:	bd80      	pop	{r7, pc}
 8002fca:	bf00      	nop
 8002fcc:	200000f0 	.word	0x200000f0

08002fd0 <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt.
  */
void USART2_IRQHandler(void)
{
 8002fd0:	b580      	push	{r7, lr}
 8002fd2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 8002fd4:	4802      	ldr	r0, [pc, #8]	; (8002fe0 <USART2_IRQHandler+0x10>)
 8002fd6:	f002 fb3d 	bl	8005654 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 8002fda:	bf00      	nop
 8002fdc:	bd80      	pop	{r7, pc}
 8002fde:	bf00      	nop
 8002fe0:	20000134 	.word	0x20000134

08002fe4 <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8002fe4:	b480      	push	{r7}
 8002fe6:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8002fe8:	bf00      	nop
 8002fea:	46bd      	mov	sp, r7
 8002fec:	bc80      	pop	{r7}
 8002fee:	4770      	bx	lr

08002ff0 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8002ff0:	480c      	ldr	r0, [pc, #48]	; (8003024 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8002ff2:	490d      	ldr	r1, [pc, #52]	; (8003028 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8002ff4:	4a0d      	ldr	r2, [pc, #52]	; (800302c <LoopFillZerobss+0x1a>)
  movs r3, #0
 8002ff6:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8002ff8:	e002      	b.n	8003000 <LoopCopyDataInit>

08002ffa <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8002ffa:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8002ffc:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8002ffe:	3304      	adds	r3, #4

08003000 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8003000:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8003002:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8003004:	d3f9      	bcc.n	8002ffa <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8003006:	4a0a      	ldr	r2, [pc, #40]	; (8003030 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8003008:	4c0a      	ldr	r4, [pc, #40]	; (8003034 <LoopFillZerobss+0x22>)
  movs r3, #0
 800300a:	2300      	movs	r3, #0
  b LoopFillZerobss
 800300c:	e001      	b.n	8003012 <LoopFillZerobss>

0800300e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800300e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8003010:	3204      	adds	r2, #4

08003012 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8003012:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8003014:	d3fb      	bcc.n	800300e <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 8003016:	f7ff ffe5 	bl	8002fe4 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 800301a:	f006 faaf 	bl	800957c <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 800301e:	f7ff fb3f 	bl	80026a0 <main>
  bx lr
 8003022:	4770      	bx	lr
  ldr r0, =_sdata
 8003024:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8003028:	20000010 	.word	0x20000010
  ldr r2, =_sidata
 800302c:	08009758 	.word	0x08009758
  ldr r2, =_sbss
 8003030:	20000010 	.word	0x20000010
  ldr r4, =_ebss
 8003034:	20001c14 	.word	0x20001c14

08003038 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8003038:	e7fe      	b.n	8003038 <ADC1_2_IRQHandler>
	...

0800303c <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 800303c:	b580      	push	{r7, lr}
 800303e:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8003040:	4b08      	ldr	r3, [pc, #32]	; (8003064 <HAL_Init+0x28>)
 8003042:	681b      	ldr	r3, [r3, #0]
 8003044:	4a07      	ldr	r2, [pc, #28]	; (8003064 <HAL_Init+0x28>)
 8003046:	f043 0310 	orr.w	r3, r3, #16
 800304a:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800304c:	2003      	movs	r0, #3
 800304e:	f000 fc49 	bl	80038e4 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8003052:	200f      	movs	r0, #15
 8003054:	f000 f808 	bl	8003068 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8003058:	f7ff fe10 	bl	8002c7c <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 800305c:	2300      	movs	r3, #0
}
 800305e:	4618      	mov	r0, r3
 8003060:	bd80      	pop	{r7, pc}
 8003062:	bf00      	nop
 8003064:	40022000 	.word	0x40022000

08003068 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8003068:	b580      	push	{r7, lr}
 800306a:	b082      	sub	sp, #8
 800306c:	af00      	add	r7, sp, #0
 800306e:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8003070:	4b12      	ldr	r3, [pc, #72]	; (80030bc <HAL_InitTick+0x54>)
 8003072:	681a      	ldr	r2, [r3, #0]
 8003074:	4b12      	ldr	r3, [pc, #72]	; (80030c0 <HAL_InitTick+0x58>)
 8003076:	781b      	ldrb	r3, [r3, #0]
 8003078:	4619      	mov	r1, r3
 800307a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800307e:	fbb3 f3f1 	udiv	r3, r3, r1
 8003082:	fbb2 f3f3 	udiv	r3, r2, r3
 8003086:	4618      	mov	r0, r3
 8003088:	f000 fc61 	bl	800394e <HAL_SYSTICK_Config>
 800308c:	4603      	mov	r3, r0
 800308e:	2b00      	cmp	r3, #0
 8003090:	d001      	beq.n	8003096 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8003092:	2301      	movs	r3, #1
 8003094:	e00e      	b.n	80030b4 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8003096:	687b      	ldr	r3, [r7, #4]
 8003098:	2b0f      	cmp	r3, #15
 800309a:	d80a      	bhi.n	80030b2 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 800309c:	2200      	movs	r2, #0
 800309e:	6879      	ldr	r1, [r7, #4]
 80030a0:	f04f 30ff 	mov.w	r0, #4294967295
 80030a4:	f000 fc29 	bl	80038fa <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80030a8:	4a06      	ldr	r2, [pc, #24]	; (80030c4 <HAL_InitTick+0x5c>)
 80030aa:	687b      	ldr	r3, [r7, #4]
 80030ac:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 80030ae:	2300      	movs	r3, #0
 80030b0:	e000      	b.n	80030b4 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 80030b2:	2301      	movs	r3, #1
}
 80030b4:	4618      	mov	r0, r3
 80030b6:	3708      	adds	r7, #8
 80030b8:	46bd      	mov	sp, r7
 80030ba:	bd80      	pop	{r7, pc}
 80030bc:	20000000 	.word	0x20000000
 80030c0:	20000008 	.word	0x20000008
 80030c4:	20000004 	.word	0x20000004

080030c8 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80030c8:	b480      	push	{r7}
 80030ca:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80030cc:	4b05      	ldr	r3, [pc, #20]	; (80030e4 <HAL_IncTick+0x1c>)
 80030ce:	781b      	ldrb	r3, [r3, #0]
 80030d0:	461a      	mov	r2, r3
 80030d2:	4b05      	ldr	r3, [pc, #20]	; (80030e8 <HAL_IncTick+0x20>)
 80030d4:	681b      	ldr	r3, [r3, #0]
 80030d6:	4413      	add	r3, r2
 80030d8:	4a03      	ldr	r2, [pc, #12]	; (80030e8 <HAL_IncTick+0x20>)
 80030da:	6013      	str	r3, [r2, #0]
}
 80030dc:	bf00      	nop
 80030de:	46bd      	mov	sp, r7
 80030e0:	bc80      	pop	{r7}
 80030e2:	4770      	bx	lr
 80030e4:	20000008 	.word	0x20000008
 80030e8:	200002c8 	.word	0x200002c8

080030ec <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80030ec:	b480      	push	{r7}
 80030ee:	af00      	add	r7, sp, #0
  return uwTick;
 80030f0:	4b02      	ldr	r3, [pc, #8]	; (80030fc <HAL_GetTick+0x10>)
 80030f2:	681b      	ldr	r3, [r3, #0]
}
 80030f4:	4618      	mov	r0, r3
 80030f6:	46bd      	mov	sp, r7
 80030f8:	bc80      	pop	{r7}
 80030fa:	4770      	bx	lr
 80030fc:	200002c8 	.word	0x200002c8

08003100 <HAL_ADC_Init>:
  *         of structure "ADC_InitTypeDef".
  * @param  hadc: ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 8003100:	b580      	push	{r7, lr}
 8003102:	b086      	sub	sp, #24
 8003104:	af00      	add	r7, sp, #0
 8003106:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8003108:	2300      	movs	r3, #0
 800310a:	75fb      	strb	r3, [r7, #23]
  uint32_t tmp_cr1 = 0U;
 800310c:	2300      	movs	r3, #0
 800310e:	613b      	str	r3, [r7, #16]
  uint32_t tmp_cr2 = 0U;
 8003110:	2300      	movs	r3, #0
 8003112:	60bb      	str	r3, [r7, #8]
  uint32_t tmp_sqr1 = 0U;
 8003114:	2300      	movs	r3, #0
 8003116:	60fb      	str	r3, [r7, #12]
  
  /* Check ADC handle */
  if(hadc == NULL)
 8003118:	687b      	ldr	r3, [r7, #4]
 800311a:	2b00      	cmp	r3, #0
 800311c:	d101      	bne.n	8003122 <HAL_ADC_Init+0x22>
  {
    return HAL_ERROR;
 800311e:	2301      	movs	r3, #1
 8003120:	e0be      	b.n	80032a0 <HAL_ADC_Init+0x1a0>
  assert_param(IS_ADC_DATA_ALIGN(hadc->Init.DataAlign));
  assert_param(IS_ADC_SCAN_MODE(hadc->Init.ScanConvMode));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EXTTRIG(hadc->Init.ExternalTrigConv));
  
  if(hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 8003122:	687b      	ldr	r3, [r7, #4]
 8003124:	689b      	ldr	r3, [r3, #8]
 8003126:	2b00      	cmp	r3, #0
  /* Refer to header of this file for more details on clock enabling          */
  /* procedure.                                                               */

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 8003128:	687b      	ldr	r3, [r7, #4]
 800312a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800312c:	2b00      	cmp	r3, #0
 800312e:	d109      	bne.n	8003144 <HAL_ADC_Init+0x44>
  {
    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 8003130:	687b      	ldr	r3, [r7, #4]
 8003132:	2200      	movs	r2, #0
 8003134:	62da      	str	r2, [r3, #44]	; 0x2c
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 8003136:	687b      	ldr	r3, [r7, #4]
 8003138:	2200      	movs	r2, #0
 800313a:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
    
    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 800313e:	6878      	ldr	r0, [r7, #4]
 8003140:	f7ff fdd4 	bl	8002cec <HAL_ADC_MspInit>
  /* Stop potential conversion on going, on regular and injected groups */
  /* Disable ADC peripheral */
  /* Note: In case of ADC already enabled, precaution to not launch an        */
  /*       unwanted conversion while modifying register CR2 by writing 1 to   */
  /*       bit ADON.                                                          */
  tmp_hal_status = ADC_ConversionStop_Disable(hadc);
 8003144:	6878      	ldr	r0, [r7, #4]
 8003146:	f000 fabf 	bl	80036c8 <ADC_ConversionStop_Disable>
 800314a:	4603      	mov	r3, r0
 800314c:	75fb      	strb	r3, [r7, #23]
  
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL) &&
 800314e:	687b      	ldr	r3, [r7, #4]
 8003150:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003152:	f003 0310 	and.w	r3, r3, #16
 8003156:	2b00      	cmp	r3, #0
 8003158:	f040 8099 	bne.w	800328e <HAL_ADC_Init+0x18e>
 800315c:	7dfb      	ldrb	r3, [r7, #23]
 800315e:	2b00      	cmp	r3, #0
 8003160:	f040 8095 	bne.w	800328e <HAL_ADC_Init+0x18e>
      (tmp_hal_status == HAL_OK)                                  )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8003164:	687b      	ldr	r3, [r7, #4]
 8003166:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003168:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 800316c:	f023 0302 	bic.w	r3, r3, #2
 8003170:	f043 0202 	orr.w	r2, r3, #2
 8003174:	687b      	ldr	r3, [r7, #4]
 8003176:	629a      	str	r2, [r3, #40]	; 0x28
    /*  - continuous conversion mode                                          */
    /* Note: External trigger polarity (ADC_CR2_EXTTRIG) is set into          */
    /*       HAL_ADC_Start_xxx functions because if set in this function,     */
    /*       a conversion on injected group would start a conversion also on  */
    /*       regular group after ADC enabling.                                */
    tmp_cr2 |= (hadc->Init.DataAlign                                          |
 8003178:	687b      	ldr	r3, [r7, #4]
 800317a:	685a      	ldr	r2, [r3, #4]
                ADC_CFGR_EXTSEL(hadc, hadc->Init.ExternalTrigConv)            |
 800317c:	687b      	ldr	r3, [r7, #4]
 800317e:	69db      	ldr	r3, [r3, #28]
    tmp_cr2 |= (hadc->Init.DataAlign                                          |
 8003180:	431a      	orrs	r2, r3
                ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)   );
 8003182:	687b      	ldr	r3, [r7, #4]
 8003184:	7b1b      	ldrb	r3, [r3, #12]
 8003186:	005b      	lsls	r3, r3, #1
                ADC_CFGR_EXTSEL(hadc, hadc->Init.ExternalTrigConv)            |
 8003188:	4313      	orrs	r3, r2
    tmp_cr2 |= (hadc->Init.DataAlign                                          |
 800318a:	68ba      	ldr	r2, [r7, #8]
 800318c:	4313      	orrs	r3, r2
 800318e:	60bb      	str	r3, [r7, #8]

    /* Configuration of ADC:                                                  */
    /*  - scan mode                                                           */
    /*  - discontinuous mode disable/enable                                   */
    /*  - discontinuous mode number of conversions                            */
    tmp_cr1 |= (ADC_CR1_SCAN_SET(hadc->Init.ScanConvMode));
 8003190:	687b      	ldr	r3, [r7, #4]
 8003192:	689b      	ldr	r3, [r3, #8]
 8003194:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8003198:	d003      	beq.n	80031a2 <HAL_ADC_Init+0xa2>
 800319a:	687b      	ldr	r3, [r7, #4]
 800319c:	689b      	ldr	r3, [r3, #8]
 800319e:	2b01      	cmp	r3, #1
 80031a0:	d102      	bne.n	80031a8 <HAL_ADC_Init+0xa8>
 80031a2:	f44f 7380 	mov.w	r3, #256	; 0x100
 80031a6:	e000      	b.n	80031aa <HAL_ADC_Init+0xaa>
 80031a8:	2300      	movs	r3, #0
 80031aa:	693a      	ldr	r2, [r7, #16]
 80031ac:	4313      	orrs	r3, r2
 80031ae:	613b      	str	r3, [r7, #16]
    
    /* Enable discontinuous mode only if continuous mode is disabled */
    /* Note: If parameter "Init.ScanConvMode" is set to disable, parameter    */
    /*       discontinuous is set anyway, but will have no effect on ADC HW.  */
    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 80031b0:	687b      	ldr	r3, [r7, #4]
 80031b2:	7d1b      	ldrb	r3, [r3, #20]
 80031b4:	2b01      	cmp	r3, #1
 80031b6:	d119      	bne.n	80031ec <HAL_ADC_Init+0xec>
    {
      if (hadc->Init.ContinuousConvMode == DISABLE)
 80031b8:	687b      	ldr	r3, [r7, #4]
 80031ba:	7b1b      	ldrb	r3, [r3, #12]
 80031bc:	2b00      	cmp	r3, #0
 80031be:	d109      	bne.n	80031d4 <HAL_ADC_Init+0xd4>
      {
        /* Enable the selected ADC regular discontinuous mode */
        /* Set the number of channels to be converted in discontinuous mode */
        SET_BIT(tmp_cr1, ADC_CR1_DISCEN                                            |
 80031c0:	687b      	ldr	r3, [r7, #4]
 80031c2:	699b      	ldr	r3, [r3, #24]
 80031c4:	3b01      	subs	r3, #1
 80031c6:	035a      	lsls	r2, r3, #13
 80031c8:	693b      	ldr	r3, [r7, #16]
 80031ca:	4313      	orrs	r3, r2
 80031cc:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 80031d0:	613b      	str	r3, [r7, #16]
 80031d2:	e00b      	b.n	80031ec <HAL_ADC_Init+0xec>
      {
        /* ADC regular group settings continuous and sequencer discontinuous*/
        /* cannot be enabled simultaneously.                                */
        
        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80031d4:	687b      	ldr	r3, [r7, #4]
 80031d6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80031d8:	f043 0220 	orr.w	r2, r3, #32
 80031dc:	687b      	ldr	r3, [r7, #4]
 80031de:	629a      	str	r2, [r3, #40]	; 0x28
        
        /* Set ADC error code to ADC IP internal error */
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80031e0:	687b      	ldr	r3, [r7, #4]
 80031e2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80031e4:	f043 0201 	orr.w	r2, r3, #1
 80031e8:	687b      	ldr	r3, [r7, #4]
 80031ea:	62da      	str	r2, [r3, #44]	; 0x2c
      }
    }
    
    /* Update ADC configuration register CR1 with previous settings */
      MODIFY_REG(hadc->Instance->CR1,
 80031ec:	687b      	ldr	r3, [r7, #4]
 80031ee:	681b      	ldr	r3, [r3, #0]
 80031f0:	685b      	ldr	r3, [r3, #4]
 80031f2:	f423 4169 	bic.w	r1, r3, #59648	; 0xe900
 80031f6:	687b      	ldr	r3, [r7, #4]
 80031f8:	681b      	ldr	r3, [r3, #0]
 80031fa:	693a      	ldr	r2, [r7, #16]
 80031fc:	430a      	orrs	r2, r1
 80031fe:	605a      	str	r2, [r3, #4]
                 ADC_CR1_DISCEN  |
                 ADC_CR1_DISCNUM    ,
                 tmp_cr1             );
    
    /* Update ADC configuration register CR2 with previous settings */
      MODIFY_REG(hadc->Instance->CR2,
 8003200:	687b      	ldr	r3, [r7, #4]
 8003202:	681b      	ldr	r3, [r3, #0]
 8003204:	689a      	ldr	r2, [r3, #8]
 8003206:	4b28      	ldr	r3, [pc, #160]	; (80032a8 <HAL_ADC_Init+0x1a8>)
 8003208:	4013      	ands	r3, r2
 800320a:	687a      	ldr	r2, [r7, #4]
 800320c:	6812      	ldr	r2, [r2, #0]
 800320e:	68b9      	ldr	r1, [r7, #8]
 8003210:	430b      	orrs	r3, r1
 8003212:	6093      	str	r3, [r2, #8]
    /*   Note: Scan mode is present by hardware on this device and, if        */
    /*   disabled, discards automatically nb of conversions. Anyway, nb of    */
    /*   conversions is forced to 0x00 for alignment over all STM32 devices.  */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion"                                          */
    if (ADC_CR1_SCAN_SET(hadc->Init.ScanConvMode) == ADC_SCAN_ENABLE)
 8003214:	687b      	ldr	r3, [r7, #4]
 8003216:	689b      	ldr	r3, [r3, #8]
 8003218:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800321c:	d003      	beq.n	8003226 <HAL_ADC_Init+0x126>
 800321e:	687b      	ldr	r3, [r7, #4]
 8003220:	689b      	ldr	r3, [r3, #8]
 8003222:	2b01      	cmp	r3, #1
 8003224:	d104      	bne.n	8003230 <HAL_ADC_Init+0x130>
    {
      tmp_sqr1 = ADC_SQR1_L_SHIFT(hadc->Init.NbrOfConversion);
 8003226:	687b      	ldr	r3, [r7, #4]
 8003228:	691b      	ldr	r3, [r3, #16]
 800322a:	3b01      	subs	r3, #1
 800322c:	051b      	lsls	r3, r3, #20
 800322e:	60fb      	str	r3, [r7, #12]
    }
      
    MODIFY_REG(hadc->Instance->SQR1,
 8003230:	687b      	ldr	r3, [r7, #4]
 8003232:	681b      	ldr	r3, [r3, #0]
 8003234:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003236:	f423 0170 	bic.w	r1, r3, #15728640	; 0xf00000
 800323a:	687b      	ldr	r3, [r7, #4]
 800323c:	681b      	ldr	r3, [r3, #0]
 800323e:	68fa      	ldr	r2, [r7, #12]
 8003240:	430a      	orrs	r2, r1
 8003242:	62da      	str	r2, [r3, #44]	; 0x2c
    /* ensure of no potential problem of ADC core IP clocking.                */
    /* Check through register CR2 (excluding bits set in other functions:     */
    /* execution control bits (ADON, JSWSTART, SWSTART), regular group bits   */
    /* (DMA), injected group bits (JEXTTRIG and JEXTSEL), channel internal    */
    /* measurement path bit (TSVREFE).                                        */
    if (READ_BIT(hadc->Instance->CR2, ~(ADC_CR2_ADON | ADC_CR2_DMA |
 8003244:	687b      	ldr	r3, [r7, #4]
 8003246:	681b      	ldr	r3, [r3, #0]
 8003248:	689a      	ldr	r2, [r3, #8]
 800324a:	4b18      	ldr	r3, [pc, #96]	; (80032ac <HAL_ADC_Init+0x1ac>)
 800324c:	4013      	ands	r3, r2
 800324e:	68ba      	ldr	r2, [r7, #8]
 8003250:	429a      	cmp	r2, r3
 8003252:	d10b      	bne.n	800326c <HAL_ADC_Init+0x16c>
                                        ADC_CR2_JEXTTRIG | ADC_CR2_JEXTSEL |
                                        ADC_CR2_TSVREFE                     ))
         == tmp_cr2)
    {
      /* Set ADC error code to none */
      ADC_CLEAR_ERRORCODE(hadc);
 8003254:	687b      	ldr	r3, [r7, #4]
 8003256:	2200      	movs	r2, #0
 8003258:	62da      	str	r2, [r3, #44]	; 0x2c
      
      /* Set the ADC state */
      ADC_STATE_CLR_SET(hadc->State,
 800325a:	687b      	ldr	r3, [r7, #4]
 800325c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800325e:	f023 0303 	bic.w	r3, r3, #3
 8003262:	f043 0201 	orr.w	r2, r3, #1
 8003266:	687b      	ldr	r3, [r7, #4]
 8003268:	629a      	str	r2, [r3, #40]	; 0x28
    if (READ_BIT(hadc->Instance->CR2, ~(ADC_CR2_ADON | ADC_CR2_DMA |
 800326a:	e018      	b.n	800329e <HAL_ADC_Init+0x19e>
                        HAL_ADC_STATE_READY);
    }
    else
    {
      /* Update ADC state machine to error */
      ADC_STATE_CLR_SET(hadc->State,
 800326c:	687b      	ldr	r3, [r7, #4]
 800326e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003270:	f023 0312 	bic.w	r3, r3, #18
 8003274:	f043 0210 	orr.w	r2, r3, #16
 8003278:	687b      	ldr	r3, [r7, #4]
 800327a:	629a      	str	r2, [r3, #40]	; 0x28
                        HAL_ADC_STATE_BUSY_INTERNAL,
                        HAL_ADC_STATE_ERROR_INTERNAL);
      
      /* Set ADC error code to ADC IP internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800327c:	687b      	ldr	r3, [r7, #4]
 800327e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003280:	f043 0201 	orr.w	r2, r3, #1
 8003284:	687b      	ldr	r3, [r7, #4]
 8003286:	62da      	str	r2, [r3, #44]	; 0x2c
      
      tmp_hal_status = HAL_ERROR;
 8003288:	2301      	movs	r3, #1
 800328a:	75fb      	strb	r3, [r7, #23]
    if (READ_BIT(hadc->Instance->CR2, ~(ADC_CR2_ADON | ADC_CR2_DMA |
 800328c:	e007      	b.n	800329e <HAL_ADC_Init+0x19e>
  
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800328e:	687b      	ldr	r3, [r7, #4]
 8003290:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003292:	f043 0210 	orr.w	r2, r3, #16
 8003296:	687b      	ldr	r3, [r7, #4]
 8003298:	629a      	str	r2, [r3, #40]	; 0x28
        
    tmp_hal_status = HAL_ERROR;
 800329a:	2301      	movs	r3, #1
 800329c:	75fb      	strb	r3, [r7, #23]
  }
  
  /* Return function status */
  return tmp_hal_status;
 800329e:	7dfb      	ldrb	r3, [r7, #23]
}
 80032a0:	4618      	mov	r0, r3
 80032a2:	3718      	adds	r7, #24
 80032a4:	46bd      	mov	sp, r7
 80032a6:	bd80      	pop	{r7, pc}
 80032a8:	ffe1f7fd 	.word	0xffe1f7fd
 80032ac:	ff1f0efe 	.word	0xff1f0efe

080032b0 <HAL_ADC_Start>:
  *         Interruptions enabled in this function: None.
  * @param  hadc: ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start(ADC_HandleTypeDef* hadc)
{
 80032b0:	b580      	push	{r7, lr}
 80032b2:	b084      	sub	sp, #16
 80032b4:	af00      	add	r7, sp, #0
 80032b6:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80032b8:	2300      	movs	r3, #0
 80032ba:	73fb      	strb	r3, [r7, #15]
  
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 80032bc:	687b      	ldr	r3, [r7, #4]
 80032be:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 80032c2:	2b01      	cmp	r3, #1
 80032c4:	d101      	bne.n	80032ca <HAL_ADC_Start+0x1a>
 80032c6:	2302      	movs	r3, #2
 80032c8:	e098      	b.n	80033fc <HAL_ADC_Start+0x14c>
 80032ca:	687b      	ldr	r3, [r7, #4]
 80032cc:	2201      	movs	r2, #1
 80032ce:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
   
  /* Enable the ADC peripheral */
  tmp_hal_status = ADC_Enable(hadc);
 80032d2:	6878      	ldr	r0, [r7, #4]
 80032d4:	f000 f99e 	bl	8003614 <ADC_Enable>
 80032d8:	4603      	mov	r3, r0
 80032da:	73fb      	strb	r3, [r7, #15]
  
  /* Start conversion if ADC is effectively enabled */
  if (tmp_hal_status == HAL_OK)
 80032dc:	7bfb      	ldrb	r3, [r7, #15]
 80032de:	2b00      	cmp	r3, #0
 80032e0:	f040 8087 	bne.w	80033f2 <HAL_ADC_Start+0x142>
  {
    /* Set ADC state                                                          */
    /* - Clear state bitfield related to regular group conversion results     */
    /* - Set state bitfield related to regular operation                      */
    ADC_STATE_CLR_SET(hadc->State,
 80032e4:	687b      	ldr	r3, [r7, #4]
 80032e6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80032e8:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80032ec:	f023 0301 	bic.w	r3, r3, #1
 80032f0:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 80032f4:	687b      	ldr	r3, [r7, #4]
 80032f6:	629a      	str	r2, [r3, #40]	; 0x28
                      HAL_ADC_STATE_REG_BUSY);
    
    /* Set group injected state (from auto-injection) and multimode state     */
    /* for all cases of multimode: independent mode, multimode ADC master     */
    /* or multimode ADC slave (for devices with several ADCs):                */
    if (ADC_NONMULTIMODE_OR_MULTIMODEMASTER(hadc))
 80032f8:	687b      	ldr	r3, [r7, #4]
 80032fa:	681b      	ldr	r3, [r3, #0]
 80032fc:	4a41      	ldr	r2, [pc, #260]	; (8003404 <HAL_ADC_Start+0x154>)
 80032fe:	4293      	cmp	r3, r2
 8003300:	d105      	bne.n	800330e <HAL_ADC_Start+0x5e>
 8003302:	4b41      	ldr	r3, [pc, #260]	; (8003408 <HAL_ADC_Start+0x158>)
 8003304:	685b      	ldr	r3, [r3, #4]
 8003306:	f403 2370 	and.w	r3, r3, #983040	; 0xf0000
 800330a:	2b00      	cmp	r3, #0
 800330c:	d115      	bne.n	800333a <HAL_ADC_Start+0x8a>
    {
      /* Set ADC state (ADC independent or master) */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 800330e:	687b      	ldr	r3, [r7, #4]
 8003310:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003312:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 8003316:	687b      	ldr	r3, [r7, #4]
 8003318:	629a      	str	r2, [r3, #40]	; 0x28
      
      /* If conversions on group regular are also triggering group injected,  */
      /* update ADC state.                                                    */
      if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 800331a:	687b      	ldr	r3, [r7, #4]
 800331c:	681b      	ldr	r3, [r3, #0]
 800331e:	685b      	ldr	r3, [r3, #4]
 8003320:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003324:	2b00      	cmp	r3, #0
 8003326:	d026      	beq.n	8003376 <HAL_ADC_Start+0xc6>
      {
        ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);  
 8003328:	687b      	ldr	r3, [r7, #4]
 800332a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800332c:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 8003330:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 8003334:	687b      	ldr	r3, [r7, #4]
 8003336:	629a      	str	r2, [r3, #40]	; 0x28
      if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 8003338:	e01d      	b.n	8003376 <HAL_ADC_Start+0xc6>
      }
    }
    else
    {
      /* Set ADC state (ADC slave) */
      SET_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 800333a:	687b      	ldr	r3, [r7, #4]
 800333c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800333e:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 8003342:	687b      	ldr	r3, [r7, #4]
 8003344:	629a      	str	r2, [r3, #40]	; 0x28
      
      /* If conversions on group regular are also triggering group injected,  */
      /* update ADC state.                                                    */
      if (ADC_MULTIMODE_AUTO_INJECTED(hadc))
 8003346:	687b      	ldr	r3, [r7, #4]
 8003348:	681b      	ldr	r3, [r3, #0]
 800334a:	4a2f      	ldr	r2, [pc, #188]	; (8003408 <HAL_ADC_Start+0x158>)
 800334c:	4293      	cmp	r3, r2
 800334e:	d004      	beq.n	800335a <HAL_ADC_Start+0xaa>
 8003350:	687b      	ldr	r3, [r7, #4]
 8003352:	681b      	ldr	r3, [r3, #0]
 8003354:	4a2b      	ldr	r2, [pc, #172]	; (8003404 <HAL_ADC_Start+0x154>)
 8003356:	4293      	cmp	r3, r2
 8003358:	d10d      	bne.n	8003376 <HAL_ADC_Start+0xc6>
 800335a:	4b2b      	ldr	r3, [pc, #172]	; (8003408 <HAL_ADC_Start+0x158>)
 800335c:	685b      	ldr	r3, [r3, #4]
 800335e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003362:	2b00      	cmp	r3, #0
 8003364:	d007      	beq.n	8003376 <HAL_ADC_Start+0xc6>
      {
        ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);
 8003366:	687b      	ldr	r3, [r7, #4]
 8003368:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800336a:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 800336e:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 8003372:	687b      	ldr	r3, [r7, #4]
 8003374:	629a      	str	r2, [r3, #40]	; 0x28
      }
    }
    
    /* State machine update: Check if an injected conversion is ongoing */
    if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8003376:	687b      	ldr	r3, [r7, #4]
 8003378:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800337a:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800337e:	2b00      	cmp	r3, #0
 8003380:	d006      	beq.n	8003390 <HAL_ADC_Start+0xe0>
    {
      /* Reset ADC error code fields related to conversions on group regular */
      CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));         
 8003382:	687b      	ldr	r3, [r7, #4]
 8003384:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003386:	f023 0206 	bic.w	r2, r3, #6
 800338a:	687b      	ldr	r3, [r7, #4]
 800338c:	62da      	str	r2, [r3, #44]	; 0x2c
 800338e:	e002      	b.n	8003396 <HAL_ADC_Start+0xe6>
    }
    else
    {
      /* Reset ADC all error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
 8003390:	687b      	ldr	r3, [r7, #4]
 8003392:	2200      	movs	r2, #0
 8003394:	62da      	str	r2, [r3, #44]	; 0x2c
    }
    
    /* Process unlocked */
    /* Unlock before starting ADC conversions: in case of potential           */
    /* interruption, to let the process to ADC IRQ Handler.                   */
    __HAL_UNLOCK(hadc);
 8003396:	687b      	ldr	r3, [r7, #4]
 8003398:	2200      	movs	r2, #0
 800339a:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  
    /* Clear regular group conversion flag */
    /* (To ensure of no unknown state from potential previous ADC operations) */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC);
 800339e:	687b      	ldr	r3, [r7, #4]
 80033a0:	681b      	ldr	r3, [r3, #0]
 80033a2:	f06f 0202 	mvn.w	r2, #2
 80033a6:	601a      	str	r2, [r3, #0]
    /*  - if ADC is slave, ADC is enabled only (conversion is not started).   */
    /*  - if ADC is master, ADC is enabled and conversion is started.         */
    /* If ADC is master, ADC is enabled and conversion is started.            */
    /* Note: Alternate trigger for single conversion could be to force an     */
    /*       additional set of bit ADON "hadc->Instance->CR2 |= ADC_CR2_ADON;"*/
    if (ADC_IS_SOFTWARE_START_REGULAR(hadc)      &&
 80033a8:	687b      	ldr	r3, [r7, #4]
 80033aa:	681b      	ldr	r3, [r3, #0]
 80033ac:	689b      	ldr	r3, [r3, #8]
 80033ae:	f403 2360 	and.w	r3, r3, #917504	; 0xe0000
 80033b2:	f5b3 2f60 	cmp.w	r3, #917504	; 0xe0000
 80033b6:	d113      	bne.n	80033e0 <HAL_ADC_Start+0x130>
        ADC_NONMULTIMODE_OR_MULTIMODEMASTER(hadc)  )
 80033b8:	687b      	ldr	r3, [r7, #4]
 80033ba:	681b      	ldr	r3, [r3, #0]
    if (ADC_IS_SOFTWARE_START_REGULAR(hadc)      &&
 80033bc:	4a11      	ldr	r2, [pc, #68]	; (8003404 <HAL_ADC_Start+0x154>)
 80033be:	4293      	cmp	r3, r2
 80033c0:	d105      	bne.n	80033ce <HAL_ADC_Start+0x11e>
        ADC_NONMULTIMODE_OR_MULTIMODEMASTER(hadc)  )
 80033c2:	4b11      	ldr	r3, [pc, #68]	; (8003408 <HAL_ADC_Start+0x158>)
 80033c4:	685b      	ldr	r3, [r3, #4]
 80033c6:	f403 2370 	and.w	r3, r3, #983040	; 0xf0000
    if (ADC_IS_SOFTWARE_START_REGULAR(hadc)      &&
 80033ca:	2b00      	cmp	r3, #0
 80033cc:	d108      	bne.n	80033e0 <HAL_ADC_Start+0x130>
    {
      /* Start ADC conversion on regular group with SW start */
      SET_BIT(hadc->Instance->CR2, (ADC_CR2_SWSTART | ADC_CR2_EXTTRIG));
 80033ce:	687b      	ldr	r3, [r7, #4]
 80033d0:	681b      	ldr	r3, [r3, #0]
 80033d2:	689a      	ldr	r2, [r3, #8]
 80033d4:	687b      	ldr	r3, [r7, #4]
 80033d6:	681b      	ldr	r3, [r3, #0]
 80033d8:	f442 02a0 	orr.w	r2, r2, #5242880	; 0x500000
 80033dc:	609a      	str	r2, [r3, #8]
 80033de:	e00c      	b.n	80033fa <HAL_ADC_Start+0x14a>
    }
    else
    {
      /* Start ADC conversion on regular group with external trigger */
      SET_BIT(hadc->Instance->CR2, ADC_CR2_EXTTRIG);
 80033e0:	687b      	ldr	r3, [r7, #4]
 80033e2:	681b      	ldr	r3, [r3, #0]
 80033e4:	689a      	ldr	r2, [r3, #8]
 80033e6:	687b      	ldr	r3, [r7, #4]
 80033e8:	681b      	ldr	r3, [r3, #0]
 80033ea:	f442 1280 	orr.w	r2, r2, #1048576	; 0x100000
 80033ee:	609a      	str	r2, [r3, #8]
 80033f0:	e003      	b.n	80033fa <HAL_ADC_Start+0x14a>
    }
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 80033f2:	687b      	ldr	r3, [r7, #4]
 80033f4:	2200      	movs	r2, #0
 80033f6:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  }
    
  /* Return function status */
  return tmp_hal_status;
 80033fa:	7bfb      	ldrb	r3, [r7, #15]
}
 80033fc:	4618      	mov	r0, r3
 80033fe:	3710      	adds	r7, #16
 8003400:	46bd      	mov	sp, r7
 8003402:	bd80      	pop	{r7, pc}
 8003404:	40012800 	.word	0x40012800
 8003408:	40012400 	.word	0x40012400

0800340c <HAL_ADC_GetValue>:
  *         or @ref __HAL_ADC_CLEAR_FLAG(&hadc, ADC_FLAG_EOS).
  * @param  hadc: ADC handle
  * @retval ADC group regular conversion data
  */
uint32_t HAL_ADC_GetValue(ADC_HandleTypeDef* hadc)
{
 800340c:	b480      	push	{r7}
 800340e:	b083      	sub	sp, #12
 8003410:	af00      	add	r7, sp, #0
 8003412:	6078      	str	r0, [r7, #4]

  /* Note: EOC flag is not cleared here by software because automatically     */
  /*       cleared by hardware when reading register DR.                      */
  
  /* Return ADC converted value */ 
  return hadc->Instance->DR;
 8003414:	687b      	ldr	r3, [r7, #4]
 8003416:	681b      	ldr	r3, [r3, #0]
 8003418:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
}
 800341a:	4618      	mov	r0, r3
 800341c:	370c      	adds	r7, #12
 800341e:	46bd      	mov	sp, r7
 8003420:	bc80      	pop	{r7}
 8003422:	4770      	bx	lr

08003424 <HAL_ADC_ConfigChannel>:
  * @param  hadc: ADC handle
  * @param  sConfig: Structure of ADC channel for regular group.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{ 
 8003424:	b480      	push	{r7}
 8003426:	b085      	sub	sp, #20
 8003428:	af00      	add	r7, sp, #0
 800342a:	6078      	str	r0, [r7, #4]
 800342c:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 800342e:	2300      	movs	r3, #0
 8003430:	73fb      	strb	r3, [r7, #15]
  __IO uint32_t wait_loop_index = 0U;
 8003432:	2300      	movs	r3, #0
 8003434:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8003436:	687b      	ldr	r3, [r7, #4]
 8003438:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 800343c:	2b01      	cmp	r3, #1
 800343e:	d101      	bne.n	8003444 <HAL_ADC_ConfigChannel+0x20>
 8003440:	2302      	movs	r3, #2
 8003442:	e0dc      	b.n	80035fe <HAL_ADC_ConfigChannel+0x1da>
 8003444:	687b      	ldr	r3, [r7, #4]
 8003446:	2201      	movs	r2, #1
 8003448:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  
  
  /* Regular sequence configuration */
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 800344c:	683b      	ldr	r3, [r7, #0]
 800344e:	685b      	ldr	r3, [r3, #4]
 8003450:	2b06      	cmp	r3, #6
 8003452:	d81c      	bhi.n	800348e <HAL_ADC_ConfigChannel+0x6a>
  {
    MODIFY_REG(hadc->Instance->SQR3                        ,
 8003454:	687b      	ldr	r3, [r7, #4]
 8003456:	681b      	ldr	r3, [r3, #0]
 8003458:	6b59      	ldr	r1, [r3, #52]	; 0x34
 800345a:	683b      	ldr	r3, [r7, #0]
 800345c:	685a      	ldr	r2, [r3, #4]
 800345e:	4613      	mov	r3, r2
 8003460:	009b      	lsls	r3, r3, #2
 8003462:	4413      	add	r3, r2
 8003464:	3b05      	subs	r3, #5
 8003466:	221f      	movs	r2, #31
 8003468:	fa02 f303 	lsl.w	r3, r2, r3
 800346c:	43db      	mvns	r3, r3
 800346e:	4019      	ands	r1, r3
 8003470:	683b      	ldr	r3, [r7, #0]
 8003472:	6818      	ldr	r0, [r3, #0]
 8003474:	683b      	ldr	r3, [r7, #0]
 8003476:	685a      	ldr	r2, [r3, #4]
 8003478:	4613      	mov	r3, r2
 800347a:	009b      	lsls	r3, r3, #2
 800347c:	4413      	add	r3, r2
 800347e:	3b05      	subs	r3, #5
 8003480:	fa00 f203 	lsl.w	r2, r0, r3
 8003484:	687b      	ldr	r3, [r7, #4]
 8003486:	681b      	ldr	r3, [r3, #0]
 8003488:	430a      	orrs	r2, r1
 800348a:	635a      	str	r2, [r3, #52]	; 0x34
 800348c:	e03c      	b.n	8003508 <HAL_ADC_ConfigChannel+0xe4>
               ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank)    ,
               ADC_SQR3_RK(sConfig->Channel, sConfig->Rank) );
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 800348e:	683b      	ldr	r3, [r7, #0]
 8003490:	685b      	ldr	r3, [r3, #4]
 8003492:	2b0c      	cmp	r3, #12
 8003494:	d81c      	bhi.n	80034d0 <HAL_ADC_ConfigChannel+0xac>
  {
    MODIFY_REG(hadc->Instance->SQR2                        ,
 8003496:	687b      	ldr	r3, [r7, #4]
 8003498:	681b      	ldr	r3, [r3, #0]
 800349a:	6b19      	ldr	r1, [r3, #48]	; 0x30
 800349c:	683b      	ldr	r3, [r7, #0]
 800349e:	685a      	ldr	r2, [r3, #4]
 80034a0:	4613      	mov	r3, r2
 80034a2:	009b      	lsls	r3, r3, #2
 80034a4:	4413      	add	r3, r2
 80034a6:	3b23      	subs	r3, #35	; 0x23
 80034a8:	221f      	movs	r2, #31
 80034aa:	fa02 f303 	lsl.w	r3, r2, r3
 80034ae:	43db      	mvns	r3, r3
 80034b0:	4019      	ands	r1, r3
 80034b2:	683b      	ldr	r3, [r7, #0]
 80034b4:	6818      	ldr	r0, [r3, #0]
 80034b6:	683b      	ldr	r3, [r7, #0]
 80034b8:	685a      	ldr	r2, [r3, #4]
 80034ba:	4613      	mov	r3, r2
 80034bc:	009b      	lsls	r3, r3, #2
 80034be:	4413      	add	r3, r2
 80034c0:	3b23      	subs	r3, #35	; 0x23
 80034c2:	fa00 f203 	lsl.w	r2, r0, r3
 80034c6:	687b      	ldr	r3, [r7, #4]
 80034c8:	681b      	ldr	r3, [r3, #0]
 80034ca:	430a      	orrs	r2, r1
 80034cc:	631a      	str	r2, [r3, #48]	; 0x30
 80034ce:	e01b      	b.n	8003508 <HAL_ADC_ConfigChannel+0xe4>
               ADC_SQR2_RK(sConfig->Channel, sConfig->Rank) );
  }
  /* For Rank 13 to 16 */
  else
  {
    MODIFY_REG(hadc->Instance->SQR1                        ,
 80034d0:	687b      	ldr	r3, [r7, #4]
 80034d2:	681b      	ldr	r3, [r3, #0]
 80034d4:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 80034d6:	683b      	ldr	r3, [r7, #0]
 80034d8:	685a      	ldr	r2, [r3, #4]
 80034da:	4613      	mov	r3, r2
 80034dc:	009b      	lsls	r3, r3, #2
 80034de:	4413      	add	r3, r2
 80034e0:	3b41      	subs	r3, #65	; 0x41
 80034e2:	221f      	movs	r2, #31
 80034e4:	fa02 f303 	lsl.w	r3, r2, r3
 80034e8:	43db      	mvns	r3, r3
 80034ea:	4019      	ands	r1, r3
 80034ec:	683b      	ldr	r3, [r7, #0]
 80034ee:	6818      	ldr	r0, [r3, #0]
 80034f0:	683b      	ldr	r3, [r7, #0]
 80034f2:	685a      	ldr	r2, [r3, #4]
 80034f4:	4613      	mov	r3, r2
 80034f6:	009b      	lsls	r3, r3, #2
 80034f8:	4413      	add	r3, r2
 80034fa:	3b41      	subs	r3, #65	; 0x41
 80034fc:	fa00 f203 	lsl.w	r2, r0, r3
 8003500:	687b      	ldr	r3, [r7, #4]
 8003502:	681b      	ldr	r3, [r3, #0]
 8003504:	430a      	orrs	r2, r1
 8003506:	62da      	str	r2, [r3, #44]	; 0x2c
  }
  
  
  /* Channel sampling time configuration */
  /* For channels 10 to 17 */
  if (sConfig->Channel >= ADC_CHANNEL_10)
 8003508:	683b      	ldr	r3, [r7, #0]
 800350a:	681b      	ldr	r3, [r3, #0]
 800350c:	2b09      	cmp	r3, #9
 800350e:	d91c      	bls.n	800354a <HAL_ADC_ConfigChannel+0x126>
  {
    MODIFY_REG(hadc->Instance->SMPR1                             ,
 8003510:	687b      	ldr	r3, [r7, #4]
 8003512:	681b      	ldr	r3, [r3, #0]
 8003514:	68d9      	ldr	r1, [r3, #12]
 8003516:	683b      	ldr	r3, [r7, #0]
 8003518:	681a      	ldr	r2, [r3, #0]
 800351a:	4613      	mov	r3, r2
 800351c:	005b      	lsls	r3, r3, #1
 800351e:	4413      	add	r3, r2
 8003520:	3b1e      	subs	r3, #30
 8003522:	2207      	movs	r2, #7
 8003524:	fa02 f303 	lsl.w	r3, r2, r3
 8003528:	43db      	mvns	r3, r3
 800352a:	4019      	ands	r1, r3
 800352c:	683b      	ldr	r3, [r7, #0]
 800352e:	6898      	ldr	r0, [r3, #8]
 8003530:	683b      	ldr	r3, [r7, #0]
 8003532:	681a      	ldr	r2, [r3, #0]
 8003534:	4613      	mov	r3, r2
 8003536:	005b      	lsls	r3, r3, #1
 8003538:	4413      	add	r3, r2
 800353a:	3b1e      	subs	r3, #30
 800353c:	fa00 f203 	lsl.w	r2, r0, r3
 8003540:	687b      	ldr	r3, [r7, #4]
 8003542:	681b      	ldr	r3, [r3, #0]
 8003544:	430a      	orrs	r2, r1
 8003546:	60da      	str	r2, [r3, #12]
 8003548:	e019      	b.n	800357e <HAL_ADC_ConfigChannel+0x15a>
               ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel)      ,
               ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel) );
  }
  else /* For channels 0 to 9 */
  {
    MODIFY_REG(hadc->Instance->SMPR2                             ,
 800354a:	687b      	ldr	r3, [r7, #4]
 800354c:	681b      	ldr	r3, [r3, #0]
 800354e:	6919      	ldr	r1, [r3, #16]
 8003550:	683b      	ldr	r3, [r7, #0]
 8003552:	681a      	ldr	r2, [r3, #0]
 8003554:	4613      	mov	r3, r2
 8003556:	005b      	lsls	r3, r3, #1
 8003558:	4413      	add	r3, r2
 800355a:	2207      	movs	r2, #7
 800355c:	fa02 f303 	lsl.w	r3, r2, r3
 8003560:	43db      	mvns	r3, r3
 8003562:	4019      	ands	r1, r3
 8003564:	683b      	ldr	r3, [r7, #0]
 8003566:	6898      	ldr	r0, [r3, #8]
 8003568:	683b      	ldr	r3, [r7, #0]
 800356a:	681a      	ldr	r2, [r3, #0]
 800356c:	4613      	mov	r3, r2
 800356e:	005b      	lsls	r3, r3, #1
 8003570:	4413      	add	r3, r2
 8003572:	fa00 f203 	lsl.w	r2, r0, r3
 8003576:	687b      	ldr	r3, [r7, #4]
 8003578:	681b      	ldr	r3, [r3, #0]
 800357a:	430a      	orrs	r2, r1
 800357c:	611a      	str	r2, [r3, #16]
               ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel) );
  }
  
  /* If ADC1 Channel_16 or Channel_17 is selected, enable Temperature sensor  */
  /* and VREFINT measurement path.                                            */
  if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) ||
 800357e:	683b      	ldr	r3, [r7, #0]
 8003580:	681b      	ldr	r3, [r3, #0]
 8003582:	2b10      	cmp	r3, #16
 8003584:	d003      	beq.n	800358e <HAL_ADC_ConfigChannel+0x16a>
      (sConfig->Channel == ADC_CHANNEL_VREFINT)      )
 8003586:	683b      	ldr	r3, [r7, #0]
 8003588:	681b      	ldr	r3, [r3, #0]
  if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) ||
 800358a:	2b11      	cmp	r3, #17
 800358c:	d132      	bne.n	80035f4 <HAL_ADC_ConfigChannel+0x1d0>
  {
    /* For STM32F1 devices with several ADC: Only ADC1 can access internal    */
    /* measurement channels (VrefInt/TempSensor). If these channels are       */
    /* intended to be set on other ADC instances, an error is reported.       */
    if (hadc->Instance == ADC1)
 800358e:	687b      	ldr	r3, [r7, #4]
 8003590:	681b      	ldr	r3, [r3, #0]
 8003592:	4a1d      	ldr	r2, [pc, #116]	; (8003608 <HAL_ADC_ConfigChannel+0x1e4>)
 8003594:	4293      	cmp	r3, r2
 8003596:	d125      	bne.n	80035e4 <HAL_ADC_ConfigChannel+0x1c0>
    {
      if (READ_BIT(hadc->Instance->CR2, ADC_CR2_TSVREFE) == RESET)
 8003598:	687b      	ldr	r3, [r7, #4]
 800359a:	681b      	ldr	r3, [r3, #0]
 800359c:	689b      	ldr	r3, [r3, #8]
 800359e:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 80035a2:	2b00      	cmp	r3, #0
 80035a4:	d126      	bne.n	80035f4 <HAL_ADC_ConfigChannel+0x1d0>
      {
        SET_BIT(hadc->Instance->CR2, ADC_CR2_TSVREFE);
 80035a6:	687b      	ldr	r3, [r7, #4]
 80035a8:	681b      	ldr	r3, [r3, #0]
 80035aa:	689a      	ldr	r2, [r3, #8]
 80035ac:	687b      	ldr	r3, [r7, #4]
 80035ae:	681b      	ldr	r3, [r3, #0]
 80035b0:	f442 0200 	orr.w	r2, r2, #8388608	; 0x800000
 80035b4:	609a      	str	r2, [r3, #8]
        
        if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 80035b6:	683b      	ldr	r3, [r7, #0]
 80035b8:	681b      	ldr	r3, [r3, #0]
 80035ba:	2b10      	cmp	r3, #16
 80035bc:	d11a      	bne.n	80035f4 <HAL_ADC_ConfigChannel+0x1d0>
        {
          /* Delay for temperature sensor stabilization time */
          /* Compute number of CPU cycles to wait for */
          wait_loop_index = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 80035be:	4b13      	ldr	r3, [pc, #76]	; (800360c <HAL_ADC_ConfigChannel+0x1e8>)
 80035c0:	681b      	ldr	r3, [r3, #0]
 80035c2:	4a13      	ldr	r2, [pc, #76]	; (8003610 <HAL_ADC_ConfigChannel+0x1ec>)
 80035c4:	fba2 2303 	umull	r2, r3, r2, r3
 80035c8:	0c9a      	lsrs	r2, r3, #18
 80035ca:	4613      	mov	r3, r2
 80035cc:	009b      	lsls	r3, r3, #2
 80035ce:	4413      	add	r3, r2
 80035d0:	005b      	lsls	r3, r3, #1
 80035d2:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 80035d4:	e002      	b.n	80035dc <HAL_ADC_ConfigChannel+0x1b8>
          {
            wait_loop_index--;
 80035d6:	68bb      	ldr	r3, [r7, #8]
 80035d8:	3b01      	subs	r3, #1
 80035da:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 80035dc:	68bb      	ldr	r3, [r7, #8]
 80035de:	2b00      	cmp	r3, #0
 80035e0:	d1f9      	bne.n	80035d6 <HAL_ADC_ConfigChannel+0x1b2>
 80035e2:	e007      	b.n	80035f4 <HAL_ADC_ConfigChannel+0x1d0>
      }
    }
    else
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80035e4:	687b      	ldr	r3, [r7, #4]
 80035e6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80035e8:	f043 0220 	orr.w	r2, r3, #32
 80035ec:	687b      	ldr	r3, [r7, #4]
 80035ee:	629a      	str	r2, [r3, #40]	; 0x28
      
      tmp_hal_status = HAL_ERROR;
 80035f0:	2301      	movs	r3, #1
 80035f2:	73fb      	strb	r3, [r7, #15]
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 80035f4:	687b      	ldr	r3, [r7, #4]
 80035f6:	2200      	movs	r2, #0
 80035f8:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  
  /* Return function status */
  return tmp_hal_status;
 80035fc:	7bfb      	ldrb	r3, [r7, #15]
}
 80035fe:	4618      	mov	r0, r3
 8003600:	3714      	adds	r7, #20
 8003602:	46bd      	mov	sp, r7
 8003604:	bc80      	pop	{r7}
 8003606:	4770      	bx	lr
 8003608:	40012400 	.word	0x40012400
 800360c:	20000000 	.word	0x20000000
 8003610:	431bde83 	.word	0x431bde83

08003614 <ADC_Enable>:
  *         and voltage regulator must be enabled (done into HAL_ADC_Init()).
  * @param  hadc: ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Enable(ADC_HandleTypeDef* hadc)
{
 8003614:	b580      	push	{r7, lr}
 8003616:	b084      	sub	sp, #16
 8003618:	af00      	add	r7, sp, #0
 800361a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 800361c:	2300      	movs	r3, #0
 800361e:	60fb      	str	r3, [r7, #12]
  __IO uint32_t wait_loop_index = 0U;
 8003620:	2300      	movs	r3, #0
 8003622:	60bb      	str	r3, [r7, #8]
  
  /* ADC enable and wait for ADC ready (in case of ADC is disabled or         */
  /* enabling phase not yet completed: flag ADC ready not yet set).           */
  /* Timeout implemented to not be stuck if ADC cannot be enabled (possible   */
  /* causes: ADC clock not running, ...).                                     */
  if (ADC_IS_ENABLE(hadc) == RESET)
 8003624:	687b      	ldr	r3, [r7, #4]
 8003626:	681b      	ldr	r3, [r3, #0]
 8003628:	689b      	ldr	r3, [r3, #8]
 800362a:	f003 0301 	and.w	r3, r3, #1
 800362e:	2b01      	cmp	r3, #1
 8003630:	d040      	beq.n	80036b4 <ADC_Enable+0xa0>
  {
    /* Enable the Peripheral */
    __HAL_ADC_ENABLE(hadc);
 8003632:	687b      	ldr	r3, [r7, #4]
 8003634:	681b      	ldr	r3, [r3, #0]
 8003636:	689a      	ldr	r2, [r3, #8]
 8003638:	687b      	ldr	r3, [r7, #4]
 800363a:	681b      	ldr	r3, [r3, #0]
 800363c:	f042 0201 	orr.w	r2, r2, #1
 8003640:	609a      	str	r2, [r3, #8]
    
    /* Delay for ADC stabilization time */
    /* Compute number of CPU cycles to wait for */
    wait_loop_index = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 8003642:	4b1f      	ldr	r3, [pc, #124]	; (80036c0 <ADC_Enable+0xac>)
 8003644:	681b      	ldr	r3, [r3, #0]
 8003646:	4a1f      	ldr	r2, [pc, #124]	; (80036c4 <ADC_Enable+0xb0>)
 8003648:	fba2 2303 	umull	r2, r3, r2, r3
 800364c:	0c9b      	lsrs	r3, r3, #18
 800364e:	60bb      	str	r3, [r7, #8]
    while(wait_loop_index != 0U)
 8003650:	e002      	b.n	8003658 <ADC_Enable+0x44>
    {
      wait_loop_index--;
 8003652:	68bb      	ldr	r3, [r7, #8]
 8003654:	3b01      	subs	r3, #1
 8003656:	60bb      	str	r3, [r7, #8]
    while(wait_loop_index != 0U)
 8003658:	68bb      	ldr	r3, [r7, #8]
 800365a:	2b00      	cmp	r3, #0
 800365c:	d1f9      	bne.n	8003652 <ADC_Enable+0x3e>
    }
    
    /* Get tick count */
    tickstart = HAL_GetTick();
 800365e:	f7ff fd45 	bl	80030ec <HAL_GetTick>
 8003662:	60f8      	str	r0, [r7, #12]

    /* Wait for ADC effectively enabled */
    while(ADC_IS_ENABLE(hadc) == RESET)
 8003664:	e01f      	b.n	80036a6 <ADC_Enable+0x92>
    {
      if((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 8003666:	f7ff fd41 	bl	80030ec <HAL_GetTick>
 800366a:	4602      	mov	r2, r0
 800366c:	68fb      	ldr	r3, [r7, #12]
 800366e:	1ad3      	subs	r3, r2, r3
 8003670:	2b02      	cmp	r3, #2
 8003672:	d918      	bls.n	80036a6 <ADC_Enable+0x92>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if(ADC_IS_ENABLE(hadc) == RESET)
 8003674:	687b      	ldr	r3, [r7, #4]
 8003676:	681b      	ldr	r3, [r3, #0]
 8003678:	689b      	ldr	r3, [r3, #8]
 800367a:	f003 0301 	and.w	r3, r3, #1
 800367e:	2b01      	cmp	r3, #1
 8003680:	d011      	beq.n	80036a6 <ADC_Enable+0x92>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8003682:	687b      	ldr	r3, [r7, #4]
 8003684:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003686:	f043 0210 	orr.w	r2, r3, #16
 800368a:	687b      	ldr	r3, [r7, #4]
 800368c:	629a      	str	r2, [r3, #40]	; 0x28

          /* Set ADC error code to ADC IP internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800368e:	687b      	ldr	r3, [r7, #4]
 8003690:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003692:	f043 0201 	orr.w	r2, r3, #1
 8003696:	687b      	ldr	r3, [r7, #4]
 8003698:	62da      	str	r2, [r3, #44]	; 0x2c

          /* Process unlocked */
          __HAL_UNLOCK(hadc);
 800369a:	687b      	ldr	r3, [r7, #4]
 800369c:	2200      	movs	r2, #0
 800369e:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

          return HAL_ERROR;
 80036a2:	2301      	movs	r3, #1
 80036a4:	e007      	b.n	80036b6 <ADC_Enable+0xa2>
    while(ADC_IS_ENABLE(hadc) == RESET)
 80036a6:	687b      	ldr	r3, [r7, #4]
 80036a8:	681b      	ldr	r3, [r3, #0]
 80036aa:	689b      	ldr	r3, [r3, #8]
 80036ac:	f003 0301 	and.w	r3, r3, #1
 80036b0:	2b01      	cmp	r3, #1
 80036b2:	d1d8      	bne.n	8003666 <ADC_Enable+0x52>
      }
    }
  }
   
  /* Return HAL status */
  return HAL_OK;
 80036b4:	2300      	movs	r3, #0
}
 80036b6:	4618      	mov	r0, r3
 80036b8:	3710      	adds	r7, #16
 80036ba:	46bd      	mov	sp, r7
 80036bc:	bd80      	pop	{r7, pc}
 80036be:	bf00      	nop
 80036c0:	20000000 	.word	0x20000000
 80036c4:	431bde83 	.word	0x431bde83

080036c8 <ADC_ConversionStop_Disable>:
  *         stopped to disable the ADC.
  * @param  hadc: ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_ConversionStop_Disable(ADC_HandleTypeDef* hadc)
{
 80036c8:	b580      	push	{r7, lr}
 80036ca:	b084      	sub	sp, #16
 80036cc:	af00      	add	r7, sp, #0
 80036ce:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 80036d0:	2300      	movs	r3, #0
 80036d2:	60fb      	str	r3, [r7, #12]
  
  /* Verification if ADC is not already disabled */
  if (ADC_IS_ENABLE(hadc) != RESET)
 80036d4:	687b      	ldr	r3, [r7, #4]
 80036d6:	681b      	ldr	r3, [r3, #0]
 80036d8:	689b      	ldr	r3, [r3, #8]
 80036da:	f003 0301 	and.w	r3, r3, #1
 80036de:	2b01      	cmp	r3, #1
 80036e0:	d12e      	bne.n	8003740 <ADC_ConversionStop_Disable+0x78>
  {
    /* Disable the ADC peripheral */
    __HAL_ADC_DISABLE(hadc);
 80036e2:	687b      	ldr	r3, [r7, #4]
 80036e4:	681b      	ldr	r3, [r3, #0]
 80036e6:	689a      	ldr	r2, [r3, #8]
 80036e8:	687b      	ldr	r3, [r7, #4]
 80036ea:	681b      	ldr	r3, [r3, #0]
 80036ec:	f022 0201 	bic.w	r2, r2, #1
 80036f0:	609a      	str	r2, [r3, #8]
     
    /* Get tick count */
    tickstart = HAL_GetTick();
 80036f2:	f7ff fcfb 	bl	80030ec <HAL_GetTick>
 80036f6:	60f8      	str	r0, [r7, #12]
    
    /* Wait for ADC effectively disabled */
    while(ADC_IS_ENABLE(hadc) != RESET)
 80036f8:	e01b      	b.n	8003732 <ADC_ConversionStop_Disable+0x6a>
    {
      if((HAL_GetTick() - tickstart) > ADC_DISABLE_TIMEOUT)
 80036fa:	f7ff fcf7 	bl	80030ec <HAL_GetTick>
 80036fe:	4602      	mov	r2, r0
 8003700:	68fb      	ldr	r3, [r7, #12]
 8003702:	1ad3      	subs	r3, r2, r3
 8003704:	2b02      	cmp	r3, #2
 8003706:	d914      	bls.n	8003732 <ADC_ConversionStop_Disable+0x6a>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if(ADC_IS_ENABLE(hadc) != RESET)
 8003708:	687b      	ldr	r3, [r7, #4]
 800370a:	681b      	ldr	r3, [r3, #0]
 800370c:	689b      	ldr	r3, [r3, #8]
 800370e:	f003 0301 	and.w	r3, r3, #1
 8003712:	2b01      	cmp	r3, #1
 8003714:	d10d      	bne.n	8003732 <ADC_ConversionStop_Disable+0x6a>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8003716:	687b      	ldr	r3, [r7, #4]
 8003718:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800371a:	f043 0210 	orr.w	r2, r3, #16
 800371e:	687b      	ldr	r3, [r7, #4]
 8003720:	629a      	str	r2, [r3, #40]	; 0x28

          /* Set ADC error code to ADC IP internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8003722:	687b      	ldr	r3, [r7, #4]
 8003724:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003726:	f043 0201 	orr.w	r2, r3, #1
 800372a:	687b      	ldr	r3, [r7, #4]
 800372c:	62da      	str	r2, [r3, #44]	; 0x2c

          return HAL_ERROR;
 800372e:	2301      	movs	r3, #1
 8003730:	e007      	b.n	8003742 <ADC_ConversionStop_Disable+0x7a>
    while(ADC_IS_ENABLE(hadc) != RESET)
 8003732:	687b      	ldr	r3, [r7, #4]
 8003734:	681b      	ldr	r3, [r3, #0]
 8003736:	689b      	ldr	r3, [r3, #8]
 8003738:	f003 0301 	and.w	r3, r3, #1
 800373c:	2b01      	cmp	r3, #1
 800373e:	d0dc      	beq.n	80036fa <ADC_ConversionStop_Disable+0x32>
      }
    }
  }
  
  /* Return HAL status */
  return HAL_OK;
 8003740:	2300      	movs	r3, #0
}
 8003742:	4618      	mov	r0, r3
 8003744:	3710      	adds	r7, #16
 8003746:	46bd      	mov	sp, r7
 8003748:	bd80      	pop	{r7, pc}
	...

0800374c <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800374c:	b480      	push	{r7}
 800374e:	b085      	sub	sp, #20
 8003750:	af00      	add	r7, sp, #0
 8003752:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8003754:	687b      	ldr	r3, [r7, #4]
 8003756:	f003 0307 	and.w	r3, r3, #7
 800375a:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 800375c:	4b0c      	ldr	r3, [pc, #48]	; (8003790 <__NVIC_SetPriorityGrouping+0x44>)
 800375e:	68db      	ldr	r3, [r3, #12]
 8003760:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8003762:	68ba      	ldr	r2, [r7, #8]
 8003764:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8003768:	4013      	ands	r3, r2
 800376a:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 800376c:	68fb      	ldr	r3, [r7, #12]
 800376e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8003770:	68bb      	ldr	r3, [r7, #8]
 8003772:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8003774:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8003778:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800377c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800377e:	4a04      	ldr	r2, [pc, #16]	; (8003790 <__NVIC_SetPriorityGrouping+0x44>)
 8003780:	68bb      	ldr	r3, [r7, #8]
 8003782:	60d3      	str	r3, [r2, #12]
}
 8003784:	bf00      	nop
 8003786:	3714      	adds	r7, #20
 8003788:	46bd      	mov	sp, r7
 800378a:	bc80      	pop	{r7}
 800378c:	4770      	bx	lr
 800378e:	bf00      	nop
 8003790:	e000ed00 	.word	0xe000ed00

08003794 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8003794:	b480      	push	{r7}
 8003796:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8003798:	4b04      	ldr	r3, [pc, #16]	; (80037ac <__NVIC_GetPriorityGrouping+0x18>)
 800379a:	68db      	ldr	r3, [r3, #12]
 800379c:	0a1b      	lsrs	r3, r3, #8
 800379e:	f003 0307 	and.w	r3, r3, #7
}
 80037a2:	4618      	mov	r0, r3
 80037a4:	46bd      	mov	sp, r7
 80037a6:	bc80      	pop	{r7}
 80037a8:	4770      	bx	lr
 80037aa:	bf00      	nop
 80037ac:	e000ed00 	.word	0xe000ed00

080037b0 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80037b0:	b480      	push	{r7}
 80037b2:	b083      	sub	sp, #12
 80037b4:	af00      	add	r7, sp, #0
 80037b6:	4603      	mov	r3, r0
 80037b8:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80037ba:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80037be:	2b00      	cmp	r3, #0
 80037c0:	db0b      	blt.n	80037da <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80037c2:	79fb      	ldrb	r3, [r7, #7]
 80037c4:	f003 021f 	and.w	r2, r3, #31
 80037c8:	4906      	ldr	r1, [pc, #24]	; (80037e4 <__NVIC_EnableIRQ+0x34>)
 80037ca:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80037ce:	095b      	lsrs	r3, r3, #5
 80037d0:	2001      	movs	r0, #1
 80037d2:	fa00 f202 	lsl.w	r2, r0, r2
 80037d6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 80037da:	bf00      	nop
 80037dc:	370c      	adds	r7, #12
 80037de:	46bd      	mov	sp, r7
 80037e0:	bc80      	pop	{r7}
 80037e2:	4770      	bx	lr
 80037e4:	e000e100 	.word	0xe000e100

080037e8 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80037e8:	b480      	push	{r7}
 80037ea:	b083      	sub	sp, #12
 80037ec:	af00      	add	r7, sp, #0
 80037ee:	4603      	mov	r3, r0
 80037f0:	6039      	str	r1, [r7, #0]
 80037f2:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80037f4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80037f8:	2b00      	cmp	r3, #0
 80037fa:	db0a      	blt.n	8003812 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80037fc:	683b      	ldr	r3, [r7, #0]
 80037fe:	b2da      	uxtb	r2, r3
 8003800:	490c      	ldr	r1, [pc, #48]	; (8003834 <__NVIC_SetPriority+0x4c>)
 8003802:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003806:	0112      	lsls	r2, r2, #4
 8003808:	b2d2      	uxtb	r2, r2
 800380a:	440b      	add	r3, r1
 800380c:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8003810:	e00a      	b.n	8003828 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003812:	683b      	ldr	r3, [r7, #0]
 8003814:	b2da      	uxtb	r2, r3
 8003816:	4908      	ldr	r1, [pc, #32]	; (8003838 <__NVIC_SetPriority+0x50>)
 8003818:	79fb      	ldrb	r3, [r7, #7]
 800381a:	f003 030f 	and.w	r3, r3, #15
 800381e:	3b04      	subs	r3, #4
 8003820:	0112      	lsls	r2, r2, #4
 8003822:	b2d2      	uxtb	r2, r2
 8003824:	440b      	add	r3, r1
 8003826:	761a      	strb	r2, [r3, #24]
}
 8003828:	bf00      	nop
 800382a:	370c      	adds	r7, #12
 800382c:	46bd      	mov	sp, r7
 800382e:	bc80      	pop	{r7}
 8003830:	4770      	bx	lr
 8003832:	bf00      	nop
 8003834:	e000e100 	.word	0xe000e100
 8003838:	e000ed00 	.word	0xe000ed00

0800383c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800383c:	b480      	push	{r7}
 800383e:	b089      	sub	sp, #36	; 0x24
 8003840:	af00      	add	r7, sp, #0
 8003842:	60f8      	str	r0, [r7, #12]
 8003844:	60b9      	str	r1, [r7, #8]
 8003846:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8003848:	68fb      	ldr	r3, [r7, #12]
 800384a:	f003 0307 	and.w	r3, r3, #7
 800384e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8003850:	69fb      	ldr	r3, [r7, #28]
 8003852:	f1c3 0307 	rsb	r3, r3, #7
 8003856:	2b04      	cmp	r3, #4
 8003858:	bf28      	it	cs
 800385a:	2304      	movcs	r3, #4
 800385c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800385e:	69fb      	ldr	r3, [r7, #28]
 8003860:	3304      	adds	r3, #4
 8003862:	2b06      	cmp	r3, #6
 8003864:	d902      	bls.n	800386c <NVIC_EncodePriority+0x30>
 8003866:	69fb      	ldr	r3, [r7, #28]
 8003868:	3b03      	subs	r3, #3
 800386a:	e000      	b.n	800386e <NVIC_EncodePriority+0x32>
 800386c:	2300      	movs	r3, #0
 800386e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003870:	f04f 32ff 	mov.w	r2, #4294967295
 8003874:	69bb      	ldr	r3, [r7, #24]
 8003876:	fa02 f303 	lsl.w	r3, r2, r3
 800387a:	43da      	mvns	r2, r3
 800387c:	68bb      	ldr	r3, [r7, #8]
 800387e:	401a      	ands	r2, r3
 8003880:	697b      	ldr	r3, [r7, #20]
 8003882:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8003884:	f04f 31ff 	mov.w	r1, #4294967295
 8003888:	697b      	ldr	r3, [r7, #20]
 800388a:	fa01 f303 	lsl.w	r3, r1, r3
 800388e:	43d9      	mvns	r1, r3
 8003890:	687b      	ldr	r3, [r7, #4]
 8003892:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003894:	4313      	orrs	r3, r2
         );
}
 8003896:	4618      	mov	r0, r3
 8003898:	3724      	adds	r7, #36	; 0x24
 800389a:	46bd      	mov	sp, r7
 800389c:	bc80      	pop	{r7}
 800389e:	4770      	bx	lr

080038a0 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80038a0:	b580      	push	{r7, lr}
 80038a2:	b082      	sub	sp, #8
 80038a4:	af00      	add	r7, sp, #0
 80038a6:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80038a8:	687b      	ldr	r3, [r7, #4]
 80038aa:	3b01      	subs	r3, #1
 80038ac:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80038b0:	d301      	bcc.n	80038b6 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80038b2:	2301      	movs	r3, #1
 80038b4:	e00f      	b.n	80038d6 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80038b6:	4a0a      	ldr	r2, [pc, #40]	; (80038e0 <SysTick_Config+0x40>)
 80038b8:	687b      	ldr	r3, [r7, #4]
 80038ba:	3b01      	subs	r3, #1
 80038bc:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80038be:	210f      	movs	r1, #15
 80038c0:	f04f 30ff 	mov.w	r0, #4294967295
 80038c4:	f7ff ff90 	bl	80037e8 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80038c8:	4b05      	ldr	r3, [pc, #20]	; (80038e0 <SysTick_Config+0x40>)
 80038ca:	2200      	movs	r2, #0
 80038cc:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80038ce:	4b04      	ldr	r3, [pc, #16]	; (80038e0 <SysTick_Config+0x40>)
 80038d0:	2207      	movs	r2, #7
 80038d2:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80038d4:	2300      	movs	r3, #0
}
 80038d6:	4618      	mov	r0, r3
 80038d8:	3708      	adds	r7, #8
 80038da:	46bd      	mov	sp, r7
 80038dc:	bd80      	pop	{r7, pc}
 80038de:	bf00      	nop
 80038e0:	e000e010 	.word	0xe000e010

080038e4 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80038e4:	b580      	push	{r7, lr}
 80038e6:	b082      	sub	sp, #8
 80038e8:	af00      	add	r7, sp, #0
 80038ea:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80038ec:	6878      	ldr	r0, [r7, #4]
 80038ee:	f7ff ff2d 	bl	800374c <__NVIC_SetPriorityGrouping>
}
 80038f2:	bf00      	nop
 80038f4:	3708      	adds	r7, #8
 80038f6:	46bd      	mov	sp, r7
 80038f8:	bd80      	pop	{r7, pc}

080038fa <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80038fa:	b580      	push	{r7, lr}
 80038fc:	b086      	sub	sp, #24
 80038fe:	af00      	add	r7, sp, #0
 8003900:	4603      	mov	r3, r0
 8003902:	60b9      	str	r1, [r7, #8]
 8003904:	607a      	str	r2, [r7, #4]
 8003906:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8003908:	2300      	movs	r3, #0
 800390a:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 800390c:	f7ff ff42 	bl	8003794 <__NVIC_GetPriorityGrouping>
 8003910:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8003912:	687a      	ldr	r2, [r7, #4]
 8003914:	68b9      	ldr	r1, [r7, #8]
 8003916:	6978      	ldr	r0, [r7, #20]
 8003918:	f7ff ff90 	bl	800383c <NVIC_EncodePriority>
 800391c:	4602      	mov	r2, r0
 800391e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8003922:	4611      	mov	r1, r2
 8003924:	4618      	mov	r0, r3
 8003926:	f7ff ff5f 	bl	80037e8 <__NVIC_SetPriority>
}
 800392a:	bf00      	nop
 800392c:	3718      	adds	r7, #24
 800392e:	46bd      	mov	sp, r7
 8003930:	bd80      	pop	{r7, pc}

08003932 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8003932:	b580      	push	{r7, lr}
 8003934:	b082      	sub	sp, #8
 8003936:	af00      	add	r7, sp, #0
 8003938:	4603      	mov	r3, r0
 800393a:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 800393c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003940:	4618      	mov	r0, r3
 8003942:	f7ff ff35 	bl	80037b0 <__NVIC_EnableIRQ>
}
 8003946:	bf00      	nop
 8003948:	3708      	adds	r7, #8
 800394a:	46bd      	mov	sp, r7
 800394c:	bd80      	pop	{r7, pc}

0800394e <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800394e:	b580      	push	{r7, lr}
 8003950:	b082      	sub	sp, #8
 8003952:	af00      	add	r7, sp, #0
 8003954:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8003956:	6878      	ldr	r0, [r7, #4]
 8003958:	f7ff ffa2 	bl	80038a0 <SysTick_Config>
 800395c:	4603      	mov	r3, r0
}
 800395e:	4618      	mov	r0, r3
 8003960:	3708      	adds	r7, #8
 8003962:	46bd      	mov	sp, r7
 8003964:	bd80      	pop	{r7, pc}

08003966 <HAL_DMA_Abort>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8003966:	b480      	push	{r7}
 8003968:	b085      	sub	sp, #20
 800396a:	af00      	add	r7, sp, #0
 800396c:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800396e:	2300      	movs	r3, #0
 8003970:	73fb      	strb	r3, [r7, #15]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8003972:	687b      	ldr	r3, [r7, #4]
 8003974:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 8003978:	2b02      	cmp	r3, #2
 800397a:	d008      	beq.n	800398e <HAL_DMA_Abort+0x28>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 800397c:	687b      	ldr	r3, [r7, #4]
 800397e:	2204      	movs	r2, #4
 8003980:	639a      	str	r2, [r3, #56]	; 0x38
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8003982:	687b      	ldr	r3, [r7, #4]
 8003984:	2200      	movs	r2, #0
 8003986:	f883 2020 	strb.w	r2, [r3, #32]
    
    return HAL_ERROR;
 800398a:	2301      	movs	r3, #1
 800398c:	e020      	b.n	80039d0 <HAL_DMA_Abort+0x6a>
  }
  else

  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 800398e:	687b      	ldr	r3, [r7, #4]
 8003990:	681b      	ldr	r3, [r3, #0]
 8003992:	681a      	ldr	r2, [r3, #0]
 8003994:	687b      	ldr	r3, [r7, #4]
 8003996:	681b      	ldr	r3, [r3, #0]
 8003998:	f022 020e 	bic.w	r2, r2, #14
 800399c:	601a      	str	r2, [r3, #0]
      
    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 800399e:	687b      	ldr	r3, [r7, #4]
 80039a0:	681b      	ldr	r3, [r3, #0]
 80039a2:	681a      	ldr	r2, [r3, #0]
 80039a4:	687b      	ldr	r3, [r7, #4]
 80039a6:	681b      	ldr	r3, [r3, #0]
 80039a8:	f022 0201 	bic.w	r2, r2, #1
 80039ac:	601a      	str	r2, [r3, #0]
      
    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << hdma->ChannelIndex);
 80039ae:	687b      	ldr	r3, [r7, #4]
 80039b0:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80039b2:	687b      	ldr	r3, [r7, #4]
 80039b4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80039b6:	2101      	movs	r1, #1
 80039b8:	fa01 f202 	lsl.w	r2, r1, r2
 80039bc:	605a      	str	r2, [r3, #4]
  }
  /* Change the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 80039be:	687b      	ldr	r3, [r7, #4]
 80039c0:	2201      	movs	r2, #1
 80039c2:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  /* Process Unlocked */
  __HAL_UNLOCK(hdma);      
 80039c6:	687b      	ldr	r3, [r7, #4]
 80039c8:	2200      	movs	r2, #0
 80039ca:	f883 2020 	strb.w	r2, [r3, #32]
  
  return status; 
 80039ce:	7bfb      	ldrb	r3, [r7, #15]
}
 80039d0:	4618      	mov	r0, r3
 80039d2:	3714      	adds	r7, #20
 80039d4:	46bd      	mov	sp, r7
 80039d6:	bc80      	pop	{r7}
 80039d8:	4770      	bx	lr
	...

080039dc <HAL_DMA_Abort_IT>:
  * @param  hdma  : pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{  
 80039dc:	b580      	push	{r7, lr}
 80039de:	b084      	sub	sp, #16
 80039e0:	af00      	add	r7, sp, #0
 80039e2:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80039e4:	2300      	movs	r3, #0
 80039e6:	73fb      	strb	r3, [r7, #15]
  
  if(HAL_DMA_STATE_BUSY != hdma->State)
 80039e8:	687b      	ldr	r3, [r7, #4]
 80039ea:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 80039ee:	2b02      	cmp	r3, #2
 80039f0:	d005      	beq.n	80039fe <HAL_DMA_Abort_IT+0x22>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80039f2:	687b      	ldr	r3, [r7, #4]
 80039f4:	2204      	movs	r2, #4
 80039f6:	639a      	str	r2, [r3, #56]	; 0x38
        
    status = HAL_ERROR;
 80039f8:	2301      	movs	r3, #1
 80039fa:	73fb      	strb	r3, [r7, #15]
 80039fc:	e051      	b.n	8003aa2 <HAL_DMA_Abort_IT+0xc6>
  }
  else
  { 
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 80039fe:	687b      	ldr	r3, [r7, #4]
 8003a00:	681b      	ldr	r3, [r3, #0]
 8003a02:	681a      	ldr	r2, [r3, #0]
 8003a04:	687b      	ldr	r3, [r7, #4]
 8003a06:	681b      	ldr	r3, [r3, #0]
 8003a08:	f022 020e 	bic.w	r2, r2, #14
 8003a0c:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8003a0e:	687b      	ldr	r3, [r7, #4]
 8003a10:	681b      	ldr	r3, [r3, #0]
 8003a12:	681a      	ldr	r2, [r3, #0]
 8003a14:	687b      	ldr	r3, [r7, #4]
 8003a16:	681b      	ldr	r3, [r3, #0]
 8003a18:	f022 0201 	bic.w	r2, r2, #1
 8003a1c:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_GI_FLAG_INDEX(hdma));
 8003a1e:	687b      	ldr	r3, [r7, #4]
 8003a20:	681b      	ldr	r3, [r3, #0]
 8003a22:	4a22      	ldr	r2, [pc, #136]	; (8003aac <HAL_DMA_Abort_IT+0xd0>)
 8003a24:	4293      	cmp	r3, r2
 8003a26:	d029      	beq.n	8003a7c <HAL_DMA_Abort_IT+0xa0>
 8003a28:	687b      	ldr	r3, [r7, #4]
 8003a2a:	681b      	ldr	r3, [r3, #0]
 8003a2c:	4a20      	ldr	r2, [pc, #128]	; (8003ab0 <HAL_DMA_Abort_IT+0xd4>)
 8003a2e:	4293      	cmp	r3, r2
 8003a30:	d022      	beq.n	8003a78 <HAL_DMA_Abort_IT+0x9c>
 8003a32:	687b      	ldr	r3, [r7, #4]
 8003a34:	681b      	ldr	r3, [r3, #0]
 8003a36:	4a1f      	ldr	r2, [pc, #124]	; (8003ab4 <HAL_DMA_Abort_IT+0xd8>)
 8003a38:	4293      	cmp	r3, r2
 8003a3a:	d01a      	beq.n	8003a72 <HAL_DMA_Abort_IT+0x96>
 8003a3c:	687b      	ldr	r3, [r7, #4]
 8003a3e:	681b      	ldr	r3, [r3, #0]
 8003a40:	4a1d      	ldr	r2, [pc, #116]	; (8003ab8 <HAL_DMA_Abort_IT+0xdc>)
 8003a42:	4293      	cmp	r3, r2
 8003a44:	d012      	beq.n	8003a6c <HAL_DMA_Abort_IT+0x90>
 8003a46:	687b      	ldr	r3, [r7, #4]
 8003a48:	681b      	ldr	r3, [r3, #0]
 8003a4a:	4a1c      	ldr	r2, [pc, #112]	; (8003abc <HAL_DMA_Abort_IT+0xe0>)
 8003a4c:	4293      	cmp	r3, r2
 8003a4e:	d00a      	beq.n	8003a66 <HAL_DMA_Abort_IT+0x8a>
 8003a50:	687b      	ldr	r3, [r7, #4]
 8003a52:	681b      	ldr	r3, [r3, #0]
 8003a54:	4a1a      	ldr	r2, [pc, #104]	; (8003ac0 <HAL_DMA_Abort_IT+0xe4>)
 8003a56:	4293      	cmp	r3, r2
 8003a58:	d102      	bne.n	8003a60 <HAL_DMA_Abort_IT+0x84>
 8003a5a:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 8003a5e:	e00e      	b.n	8003a7e <HAL_DMA_Abort_IT+0xa2>
 8003a60:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8003a64:	e00b      	b.n	8003a7e <HAL_DMA_Abort_IT+0xa2>
 8003a66:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8003a6a:	e008      	b.n	8003a7e <HAL_DMA_Abort_IT+0xa2>
 8003a6c:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8003a70:	e005      	b.n	8003a7e <HAL_DMA_Abort_IT+0xa2>
 8003a72:	f44f 7380 	mov.w	r3, #256	; 0x100
 8003a76:	e002      	b.n	8003a7e <HAL_DMA_Abort_IT+0xa2>
 8003a78:	2310      	movs	r3, #16
 8003a7a:	e000      	b.n	8003a7e <HAL_DMA_Abort_IT+0xa2>
 8003a7c:	2301      	movs	r3, #1
 8003a7e:	4a11      	ldr	r2, [pc, #68]	; (8003ac4 <HAL_DMA_Abort_IT+0xe8>)
 8003a80:	6053      	str	r3, [r2, #4]

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8003a82:	687b      	ldr	r3, [r7, #4]
 8003a84:	2201      	movs	r2, #1
 8003a86:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8003a8a:	687b      	ldr	r3, [r7, #4]
 8003a8c:	2200      	movs	r2, #0
 8003a8e:	f883 2020 	strb.w	r2, [r3, #32]

    /* Call User Abort callback */
    if(hdma->XferAbortCallback != NULL)
 8003a92:	687b      	ldr	r3, [r7, #4]
 8003a94:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003a96:	2b00      	cmp	r3, #0
 8003a98:	d003      	beq.n	8003aa2 <HAL_DMA_Abort_IT+0xc6>
    {
      hdma->XferAbortCallback(hdma);
 8003a9a:	687b      	ldr	r3, [r7, #4]
 8003a9c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003a9e:	6878      	ldr	r0, [r7, #4]
 8003aa0:	4798      	blx	r3
    } 
  }
  return status;
 8003aa2:	7bfb      	ldrb	r3, [r7, #15]
}
 8003aa4:	4618      	mov	r0, r3
 8003aa6:	3710      	adds	r7, #16
 8003aa8:	46bd      	mov	sp, r7
 8003aaa:	bd80      	pop	{r7, pc}
 8003aac:	40020008 	.word	0x40020008
 8003ab0:	4002001c 	.word	0x4002001c
 8003ab4:	40020030 	.word	0x40020030
 8003ab8:	40020044 	.word	0x40020044
 8003abc:	40020058 	.word	0x40020058
 8003ac0:	4002006c 	.word	0x4002006c
 8003ac4:	40020000 	.word	0x40020000

08003ac8 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8003ac8:	b480      	push	{r7}
 8003aca:	b08b      	sub	sp, #44	; 0x2c
 8003acc:	af00      	add	r7, sp, #0
 8003ace:	6078      	str	r0, [r7, #4]
 8003ad0:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8003ad2:	2300      	movs	r3, #0
 8003ad4:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 8003ad6:	2300      	movs	r3, #0
 8003ad8:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8003ada:	e169      	b.n	8003db0 <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 8003adc:	2201      	movs	r2, #1
 8003ade:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003ae0:	fa02 f303 	lsl.w	r3, r2, r3
 8003ae4:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8003ae6:	683b      	ldr	r3, [r7, #0]
 8003ae8:	681b      	ldr	r3, [r3, #0]
 8003aea:	69fa      	ldr	r2, [r7, #28]
 8003aec:	4013      	ands	r3, r2
 8003aee:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 8003af0:	69ba      	ldr	r2, [r7, #24]
 8003af2:	69fb      	ldr	r3, [r7, #28]
 8003af4:	429a      	cmp	r2, r3
 8003af6:	f040 8158 	bne.w	8003daa <HAL_GPIO_Init+0x2e2>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 8003afa:	683b      	ldr	r3, [r7, #0]
 8003afc:	685b      	ldr	r3, [r3, #4]
 8003afe:	4a9a      	ldr	r2, [pc, #616]	; (8003d68 <HAL_GPIO_Init+0x2a0>)
 8003b00:	4293      	cmp	r3, r2
 8003b02:	d05e      	beq.n	8003bc2 <HAL_GPIO_Init+0xfa>
 8003b04:	4a98      	ldr	r2, [pc, #608]	; (8003d68 <HAL_GPIO_Init+0x2a0>)
 8003b06:	4293      	cmp	r3, r2
 8003b08:	d875      	bhi.n	8003bf6 <HAL_GPIO_Init+0x12e>
 8003b0a:	4a98      	ldr	r2, [pc, #608]	; (8003d6c <HAL_GPIO_Init+0x2a4>)
 8003b0c:	4293      	cmp	r3, r2
 8003b0e:	d058      	beq.n	8003bc2 <HAL_GPIO_Init+0xfa>
 8003b10:	4a96      	ldr	r2, [pc, #600]	; (8003d6c <HAL_GPIO_Init+0x2a4>)
 8003b12:	4293      	cmp	r3, r2
 8003b14:	d86f      	bhi.n	8003bf6 <HAL_GPIO_Init+0x12e>
 8003b16:	4a96      	ldr	r2, [pc, #600]	; (8003d70 <HAL_GPIO_Init+0x2a8>)
 8003b18:	4293      	cmp	r3, r2
 8003b1a:	d052      	beq.n	8003bc2 <HAL_GPIO_Init+0xfa>
 8003b1c:	4a94      	ldr	r2, [pc, #592]	; (8003d70 <HAL_GPIO_Init+0x2a8>)
 8003b1e:	4293      	cmp	r3, r2
 8003b20:	d869      	bhi.n	8003bf6 <HAL_GPIO_Init+0x12e>
 8003b22:	4a94      	ldr	r2, [pc, #592]	; (8003d74 <HAL_GPIO_Init+0x2ac>)
 8003b24:	4293      	cmp	r3, r2
 8003b26:	d04c      	beq.n	8003bc2 <HAL_GPIO_Init+0xfa>
 8003b28:	4a92      	ldr	r2, [pc, #584]	; (8003d74 <HAL_GPIO_Init+0x2ac>)
 8003b2a:	4293      	cmp	r3, r2
 8003b2c:	d863      	bhi.n	8003bf6 <HAL_GPIO_Init+0x12e>
 8003b2e:	4a92      	ldr	r2, [pc, #584]	; (8003d78 <HAL_GPIO_Init+0x2b0>)
 8003b30:	4293      	cmp	r3, r2
 8003b32:	d046      	beq.n	8003bc2 <HAL_GPIO_Init+0xfa>
 8003b34:	4a90      	ldr	r2, [pc, #576]	; (8003d78 <HAL_GPIO_Init+0x2b0>)
 8003b36:	4293      	cmp	r3, r2
 8003b38:	d85d      	bhi.n	8003bf6 <HAL_GPIO_Init+0x12e>
 8003b3a:	2b12      	cmp	r3, #18
 8003b3c:	d82a      	bhi.n	8003b94 <HAL_GPIO_Init+0xcc>
 8003b3e:	2b12      	cmp	r3, #18
 8003b40:	d859      	bhi.n	8003bf6 <HAL_GPIO_Init+0x12e>
 8003b42:	a201      	add	r2, pc, #4	; (adr r2, 8003b48 <HAL_GPIO_Init+0x80>)
 8003b44:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003b48:	08003bc3 	.word	0x08003bc3
 8003b4c:	08003b9d 	.word	0x08003b9d
 8003b50:	08003baf 	.word	0x08003baf
 8003b54:	08003bf1 	.word	0x08003bf1
 8003b58:	08003bf7 	.word	0x08003bf7
 8003b5c:	08003bf7 	.word	0x08003bf7
 8003b60:	08003bf7 	.word	0x08003bf7
 8003b64:	08003bf7 	.word	0x08003bf7
 8003b68:	08003bf7 	.word	0x08003bf7
 8003b6c:	08003bf7 	.word	0x08003bf7
 8003b70:	08003bf7 	.word	0x08003bf7
 8003b74:	08003bf7 	.word	0x08003bf7
 8003b78:	08003bf7 	.word	0x08003bf7
 8003b7c:	08003bf7 	.word	0x08003bf7
 8003b80:	08003bf7 	.word	0x08003bf7
 8003b84:	08003bf7 	.word	0x08003bf7
 8003b88:	08003bf7 	.word	0x08003bf7
 8003b8c:	08003ba5 	.word	0x08003ba5
 8003b90:	08003bb9 	.word	0x08003bb9
 8003b94:	4a79      	ldr	r2, [pc, #484]	; (8003d7c <HAL_GPIO_Init+0x2b4>)
 8003b96:	4293      	cmp	r3, r2
 8003b98:	d013      	beq.n	8003bc2 <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 8003b9a:	e02c      	b.n	8003bf6 <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 8003b9c:	683b      	ldr	r3, [r7, #0]
 8003b9e:	68db      	ldr	r3, [r3, #12]
 8003ba0:	623b      	str	r3, [r7, #32]
          break;
 8003ba2:	e029      	b.n	8003bf8 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 8003ba4:	683b      	ldr	r3, [r7, #0]
 8003ba6:	68db      	ldr	r3, [r3, #12]
 8003ba8:	3304      	adds	r3, #4
 8003baa:	623b      	str	r3, [r7, #32]
          break;
 8003bac:	e024      	b.n	8003bf8 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 8003bae:	683b      	ldr	r3, [r7, #0]
 8003bb0:	68db      	ldr	r3, [r3, #12]
 8003bb2:	3308      	adds	r3, #8
 8003bb4:	623b      	str	r3, [r7, #32]
          break;
 8003bb6:	e01f      	b.n	8003bf8 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 8003bb8:	683b      	ldr	r3, [r7, #0]
 8003bba:	68db      	ldr	r3, [r3, #12]
 8003bbc:	330c      	adds	r3, #12
 8003bbe:	623b      	str	r3, [r7, #32]
          break;
 8003bc0:	e01a      	b.n	8003bf8 <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 8003bc2:	683b      	ldr	r3, [r7, #0]
 8003bc4:	689b      	ldr	r3, [r3, #8]
 8003bc6:	2b00      	cmp	r3, #0
 8003bc8:	d102      	bne.n	8003bd0 <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 8003bca:	2304      	movs	r3, #4
 8003bcc:	623b      	str	r3, [r7, #32]
          break;
 8003bce:	e013      	b.n	8003bf8 <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 8003bd0:	683b      	ldr	r3, [r7, #0]
 8003bd2:	689b      	ldr	r3, [r3, #8]
 8003bd4:	2b01      	cmp	r3, #1
 8003bd6:	d105      	bne.n	8003be4 <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8003bd8:	2308      	movs	r3, #8
 8003bda:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 8003bdc:	687b      	ldr	r3, [r7, #4]
 8003bde:	69fa      	ldr	r2, [r7, #28]
 8003be0:	611a      	str	r2, [r3, #16]
          break;
 8003be2:	e009      	b.n	8003bf8 <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8003be4:	2308      	movs	r3, #8
 8003be6:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 8003be8:	687b      	ldr	r3, [r7, #4]
 8003bea:	69fa      	ldr	r2, [r7, #28]
 8003bec:	615a      	str	r2, [r3, #20]
          break;
 8003bee:	e003      	b.n	8003bf8 <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 8003bf0:	2300      	movs	r3, #0
 8003bf2:	623b      	str	r3, [r7, #32]
          break;
 8003bf4:	e000      	b.n	8003bf8 <HAL_GPIO_Init+0x130>
          break;
 8003bf6:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 8003bf8:	69bb      	ldr	r3, [r7, #24]
 8003bfa:	2bff      	cmp	r3, #255	; 0xff
 8003bfc:	d801      	bhi.n	8003c02 <HAL_GPIO_Init+0x13a>
 8003bfe:	687b      	ldr	r3, [r7, #4]
 8003c00:	e001      	b.n	8003c06 <HAL_GPIO_Init+0x13e>
 8003c02:	687b      	ldr	r3, [r7, #4]
 8003c04:	3304      	adds	r3, #4
 8003c06:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 8003c08:	69bb      	ldr	r3, [r7, #24]
 8003c0a:	2bff      	cmp	r3, #255	; 0xff
 8003c0c:	d802      	bhi.n	8003c14 <HAL_GPIO_Init+0x14c>
 8003c0e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003c10:	009b      	lsls	r3, r3, #2
 8003c12:	e002      	b.n	8003c1a <HAL_GPIO_Init+0x152>
 8003c14:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003c16:	3b08      	subs	r3, #8
 8003c18:	009b      	lsls	r3, r3, #2
 8003c1a:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 8003c1c:	697b      	ldr	r3, [r7, #20]
 8003c1e:	681a      	ldr	r2, [r3, #0]
 8003c20:	210f      	movs	r1, #15
 8003c22:	693b      	ldr	r3, [r7, #16]
 8003c24:	fa01 f303 	lsl.w	r3, r1, r3
 8003c28:	43db      	mvns	r3, r3
 8003c2a:	401a      	ands	r2, r3
 8003c2c:	6a39      	ldr	r1, [r7, #32]
 8003c2e:	693b      	ldr	r3, [r7, #16]
 8003c30:	fa01 f303 	lsl.w	r3, r1, r3
 8003c34:	431a      	orrs	r2, r3
 8003c36:	697b      	ldr	r3, [r7, #20]
 8003c38:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8003c3a:	683b      	ldr	r3, [r7, #0]
 8003c3c:	685b      	ldr	r3, [r3, #4]
 8003c3e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003c42:	2b00      	cmp	r3, #0
 8003c44:	f000 80b1 	beq.w	8003daa <HAL_GPIO_Init+0x2e2>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 8003c48:	4b4d      	ldr	r3, [pc, #308]	; (8003d80 <HAL_GPIO_Init+0x2b8>)
 8003c4a:	699b      	ldr	r3, [r3, #24]
 8003c4c:	4a4c      	ldr	r2, [pc, #304]	; (8003d80 <HAL_GPIO_Init+0x2b8>)
 8003c4e:	f043 0301 	orr.w	r3, r3, #1
 8003c52:	6193      	str	r3, [r2, #24]
 8003c54:	4b4a      	ldr	r3, [pc, #296]	; (8003d80 <HAL_GPIO_Init+0x2b8>)
 8003c56:	699b      	ldr	r3, [r3, #24]
 8003c58:	f003 0301 	and.w	r3, r3, #1
 8003c5c:	60bb      	str	r3, [r7, #8]
 8003c5e:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 8003c60:	4a48      	ldr	r2, [pc, #288]	; (8003d84 <HAL_GPIO_Init+0x2bc>)
 8003c62:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003c64:	089b      	lsrs	r3, r3, #2
 8003c66:	3302      	adds	r3, #2
 8003c68:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003c6c:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 8003c6e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003c70:	f003 0303 	and.w	r3, r3, #3
 8003c74:	009b      	lsls	r3, r3, #2
 8003c76:	220f      	movs	r2, #15
 8003c78:	fa02 f303 	lsl.w	r3, r2, r3
 8003c7c:	43db      	mvns	r3, r3
 8003c7e:	68fa      	ldr	r2, [r7, #12]
 8003c80:	4013      	ands	r3, r2
 8003c82:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 8003c84:	687b      	ldr	r3, [r7, #4]
 8003c86:	4a40      	ldr	r2, [pc, #256]	; (8003d88 <HAL_GPIO_Init+0x2c0>)
 8003c88:	4293      	cmp	r3, r2
 8003c8a:	d013      	beq.n	8003cb4 <HAL_GPIO_Init+0x1ec>
 8003c8c:	687b      	ldr	r3, [r7, #4]
 8003c8e:	4a3f      	ldr	r2, [pc, #252]	; (8003d8c <HAL_GPIO_Init+0x2c4>)
 8003c90:	4293      	cmp	r3, r2
 8003c92:	d00d      	beq.n	8003cb0 <HAL_GPIO_Init+0x1e8>
 8003c94:	687b      	ldr	r3, [r7, #4]
 8003c96:	4a3e      	ldr	r2, [pc, #248]	; (8003d90 <HAL_GPIO_Init+0x2c8>)
 8003c98:	4293      	cmp	r3, r2
 8003c9a:	d007      	beq.n	8003cac <HAL_GPIO_Init+0x1e4>
 8003c9c:	687b      	ldr	r3, [r7, #4]
 8003c9e:	4a3d      	ldr	r2, [pc, #244]	; (8003d94 <HAL_GPIO_Init+0x2cc>)
 8003ca0:	4293      	cmp	r3, r2
 8003ca2:	d101      	bne.n	8003ca8 <HAL_GPIO_Init+0x1e0>
 8003ca4:	2303      	movs	r3, #3
 8003ca6:	e006      	b.n	8003cb6 <HAL_GPIO_Init+0x1ee>
 8003ca8:	2304      	movs	r3, #4
 8003caa:	e004      	b.n	8003cb6 <HAL_GPIO_Init+0x1ee>
 8003cac:	2302      	movs	r3, #2
 8003cae:	e002      	b.n	8003cb6 <HAL_GPIO_Init+0x1ee>
 8003cb0:	2301      	movs	r3, #1
 8003cb2:	e000      	b.n	8003cb6 <HAL_GPIO_Init+0x1ee>
 8003cb4:	2300      	movs	r3, #0
 8003cb6:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003cb8:	f002 0203 	and.w	r2, r2, #3
 8003cbc:	0092      	lsls	r2, r2, #2
 8003cbe:	4093      	lsls	r3, r2
 8003cc0:	68fa      	ldr	r2, [r7, #12]
 8003cc2:	4313      	orrs	r3, r2
 8003cc4:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 8003cc6:	492f      	ldr	r1, [pc, #188]	; (8003d84 <HAL_GPIO_Init+0x2bc>)
 8003cc8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003cca:	089b      	lsrs	r3, r3, #2
 8003ccc:	3302      	adds	r3, #2
 8003cce:	68fa      	ldr	r2, [r7, #12]
 8003cd0:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8003cd4:	683b      	ldr	r3, [r7, #0]
 8003cd6:	685b      	ldr	r3, [r3, #4]
 8003cd8:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003cdc:	2b00      	cmp	r3, #0
 8003cde:	d006      	beq.n	8003cee <HAL_GPIO_Init+0x226>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 8003ce0:	4b2d      	ldr	r3, [pc, #180]	; (8003d98 <HAL_GPIO_Init+0x2d0>)
 8003ce2:	681a      	ldr	r2, [r3, #0]
 8003ce4:	492c      	ldr	r1, [pc, #176]	; (8003d98 <HAL_GPIO_Init+0x2d0>)
 8003ce6:	69bb      	ldr	r3, [r7, #24]
 8003ce8:	4313      	orrs	r3, r2
 8003cea:	600b      	str	r3, [r1, #0]
 8003cec:	e006      	b.n	8003cfc <HAL_GPIO_Init+0x234>
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 8003cee:	4b2a      	ldr	r3, [pc, #168]	; (8003d98 <HAL_GPIO_Init+0x2d0>)
 8003cf0:	681a      	ldr	r2, [r3, #0]
 8003cf2:	69bb      	ldr	r3, [r7, #24]
 8003cf4:	43db      	mvns	r3, r3
 8003cf6:	4928      	ldr	r1, [pc, #160]	; (8003d98 <HAL_GPIO_Init+0x2d0>)
 8003cf8:	4013      	ands	r3, r2
 8003cfa:	600b      	str	r3, [r1, #0]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8003cfc:	683b      	ldr	r3, [r7, #0]
 8003cfe:	685b      	ldr	r3, [r3, #4]
 8003d00:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003d04:	2b00      	cmp	r3, #0
 8003d06:	d006      	beq.n	8003d16 <HAL_GPIO_Init+0x24e>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 8003d08:	4b23      	ldr	r3, [pc, #140]	; (8003d98 <HAL_GPIO_Init+0x2d0>)
 8003d0a:	685a      	ldr	r2, [r3, #4]
 8003d0c:	4922      	ldr	r1, [pc, #136]	; (8003d98 <HAL_GPIO_Init+0x2d0>)
 8003d0e:	69bb      	ldr	r3, [r7, #24]
 8003d10:	4313      	orrs	r3, r2
 8003d12:	604b      	str	r3, [r1, #4]
 8003d14:	e006      	b.n	8003d24 <HAL_GPIO_Init+0x25c>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 8003d16:	4b20      	ldr	r3, [pc, #128]	; (8003d98 <HAL_GPIO_Init+0x2d0>)
 8003d18:	685a      	ldr	r2, [r3, #4]
 8003d1a:	69bb      	ldr	r3, [r7, #24]
 8003d1c:	43db      	mvns	r3, r3
 8003d1e:	491e      	ldr	r1, [pc, #120]	; (8003d98 <HAL_GPIO_Init+0x2d0>)
 8003d20:	4013      	ands	r3, r2
 8003d22:	604b      	str	r3, [r1, #4]
        }

        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8003d24:	683b      	ldr	r3, [r7, #0]
 8003d26:	685b      	ldr	r3, [r3, #4]
 8003d28:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8003d2c:	2b00      	cmp	r3, #0
 8003d2e:	d006      	beq.n	8003d3e <HAL_GPIO_Init+0x276>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 8003d30:	4b19      	ldr	r3, [pc, #100]	; (8003d98 <HAL_GPIO_Init+0x2d0>)
 8003d32:	689a      	ldr	r2, [r3, #8]
 8003d34:	4918      	ldr	r1, [pc, #96]	; (8003d98 <HAL_GPIO_Init+0x2d0>)
 8003d36:	69bb      	ldr	r3, [r7, #24]
 8003d38:	4313      	orrs	r3, r2
 8003d3a:	608b      	str	r3, [r1, #8]
 8003d3c:	e006      	b.n	8003d4c <HAL_GPIO_Init+0x284>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 8003d3e:	4b16      	ldr	r3, [pc, #88]	; (8003d98 <HAL_GPIO_Init+0x2d0>)
 8003d40:	689a      	ldr	r2, [r3, #8]
 8003d42:	69bb      	ldr	r3, [r7, #24]
 8003d44:	43db      	mvns	r3, r3
 8003d46:	4914      	ldr	r1, [pc, #80]	; (8003d98 <HAL_GPIO_Init+0x2d0>)
 8003d48:	4013      	ands	r3, r2
 8003d4a:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8003d4c:	683b      	ldr	r3, [r7, #0]
 8003d4e:	685b      	ldr	r3, [r3, #4]
 8003d50:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8003d54:	2b00      	cmp	r3, #0
 8003d56:	d021      	beq.n	8003d9c <HAL_GPIO_Init+0x2d4>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 8003d58:	4b0f      	ldr	r3, [pc, #60]	; (8003d98 <HAL_GPIO_Init+0x2d0>)
 8003d5a:	68da      	ldr	r2, [r3, #12]
 8003d5c:	490e      	ldr	r1, [pc, #56]	; (8003d98 <HAL_GPIO_Init+0x2d0>)
 8003d5e:	69bb      	ldr	r3, [r7, #24]
 8003d60:	4313      	orrs	r3, r2
 8003d62:	60cb      	str	r3, [r1, #12]
 8003d64:	e021      	b.n	8003daa <HAL_GPIO_Init+0x2e2>
 8003d66:	bf00      	nop
 8003d68:	10320000 	.word	0x10320000
 8003d6c:	10310000 	.word	0x10310000
 8003d70:	10220000 	.word	0x10220000
 8003d74:	10210000 	.word	0x10210000
 8003d78:	10120000 	.word	0x10120000
 8003d7c:	10110000 	.word	0x10110000
 8003d80:	40021000 	.word	0x40021000
 8003d84:	40010000 	.word	0x40010000
 8003d88:	40010800 	.word	0x40010800
 8003d8c:	40010c00 	.word	0x40010c00
 8003d90:	40011000 	.word	0x40011000
 8003d94:	40011400 	.word	0x40011400
 8003d98:	40010400 	.word	0x40010400
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 8003d9c:	4b0b      	ldr	r3, [pc, #44]	; (8003dcc <HAL_GPIO_Init+0x304>)
 8003d9e:	68da      	ldr	r2, [r3, #12]
 8003da0:	69bb      	ldr	r3, [r7, #24]
 8003da2:	43db      	mvns	r3, r3
 8003da4:	4909      	ldr	r1, [pc, #36]	; (8003dcc <HAL_GPIO_Init+0x304>)
 8003da6:	4013      	ands	r3, r2
 8003da8:	60cb      	str	r3, [r1, #12]
        }
      }
    }

	position++;
 8003daa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003dac:	3301      	adds	r3, #1
 8003dae:	627b      	str	r3, [r7, #36]	; 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8003db0:	683b      	ldr	r3, [r7, #0]
 8003db2:	681a      	ldr	r2, [r3, #0]
 8003db4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003db6:	fa22 f303 	lsr.w	r3, r2, r3
 8003dba:	2b00      	cmp	r3, #0
 8003dbc:	f47f ae8e 	bne.w	8003adc <HAL_GPIO_Init+0x14>
  }
}
 8003dc0:	bf00      	nop
 8003dc2:	bf00      	nop
 8003dc4:	372c      	adds	r7, #44	; 0x2c
 8003dc6:	46bd      	mov	sp, r7
 8003dc8:	bc80      	pop	{r7}
 8003dca:	4770      	bx	lr
 8003dcc:	40010400 	.word	0x40010400

08003dd0 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin: specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8003dd0:	b480      	push	{r7}
 8003dd2:	b085      	sub	sp, #20
 8003dd4:	af00      	add	r7, sp, #0
 8003dd6:	6078      	str	r0, [r7, #4]
 8003dd8:	460b      	mov	r3, r1
 8003dda:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8003ddc:	687b      	ldr	r3, [r7, #4]
 8003dde:	689a      	ldr	r2, [r3, #8]
 8003de0:	887b      	ldrh	r3, [r7, #2]
 8003de2:	4013      	ands	r3, r2
 8003de4:	2b00      	cmp	r3, #0
 8003de6:	d002      	beq.n	8003dee <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8003de8:	2301      	movs	r3, #1
 8003dea:	73fb      	strb	r3, [r7, #15]
 8003dec:	e001      	b.n	8003df2 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8003dee:	2300      	movs	r3, #0
 8003df0:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8003df2:	7bfb      	ldrb	r3, [r7, #15]
}
 8003df4:	4618      	mov	r0, r3
 8003df6:	3714      	adds	r7, #20
 8003df8:	46bd      	mov	sp, r7
 8003dfa:	bc80      	pop	{r7}
 8003dfc:	4770      	bx	lr

08003dfe <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8003dfe:	b480      	push	{r7}
 8003e00:	b083      	sub	sp, #12
 8003e02:	af00      	add	r7, sp, #0
 8003e04:	6078      	str	r0, [r7, #4]
 8003e06:	460b      	mov	r3, r1
 8003e08:	807b      	strh	r3, [r7, #2]
 8003e0a:	4613      	mov	r3, r2
 8003e0c:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8003e0e:	787b      	ldrb	r3, [r7, #1]
 8003e10:	2b00      	cmp	r3, #0
 8003e12:	d003      	beq.n	8003e1c <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8003e14:	887a      	ldrh	r2, [r7, #2]
 8003e16:	687b      	ldr	r3, [r7, #4]
 8003e18:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 8003e1a:	e003      	b.n	8003e24 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8003e1c:	887b      	ldrh	r3, [r7, #2]
 8003e1e:	041a      	lsls	r2, r3, #16
 8003e20:	687b      	ldr	r3, [r7, #4]
 8003e22:	611a      	str	r2, [r3, #16]
}
 8003e24:	bf00      	nop
 8003e26:	370c      	adds	r7, #12
 8003e28:	46bd      	mov	sp, r7
 8003e2a:	bc80      	pop	{r7}
 8003e2c:	4770      	bx	lr

08003e2e <HAL_GPIO_TogglePin>:
  * @param  GPIOx: where x can be (A..G depending on device used) to select the GPIO peripheral
  * @param  GPIO_Pin: Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8003e2e:	b480      	push	{r7}
 8003e30:	b085      	sub	sp, #20
 8003e32:	af00      	add	r7, sp, #0
 8003e34:	6078      	str	r0, [r7, #4]
 8003e36:	460b      	mov	r3, r1
 8003e38:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Ouput Data Register value */
  odr = GPIOx->ODR;
 8003e3a:	687b      	ldr	r3, [r7, #4]
 8003e3c:	68db      	ldr	r3, [r3, #12]
 8003e3e:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8003e40:	887a      	ldrh	r2, [r7, #2]
 8003e42:	68fb      	ldr	r3, [r7, #12]
 8003e44:	4013      	ands	r3, r2
 8003e46:	041a      	lsls	r2, r3, #16
 8003e48:	68fb      	ldr	r3, [r7, #12]
 8003e4a:	43d9      	mvns	r1, r3
 8003e4c:	887b      	ldrh	r3, [r7, #2]
 8003e4e:	400b      	ands	r3, r1
 8003e50:	431a      	orrs	r2, r3
 8003e52:	687b      	ldr	r3, [r7, #4]
 8003e54:	611a      	str	r2, [r3, #16]
}
 8003e56:	bf00      	nop
 8003e58:	3714      	adds	r7, #20
 8003e5a:	46bd      	mov	sp, r7
 8003e5c:	bc80      	pop	{r7}
 8003e5e:	4770      	bx	lr

08003e60 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8003e60:	b580      	push	{r7, lr}
 8003e62:	b086      	sub	sp, #24
 8003e64:	af00      	add	r7, sp, #0
 8003e66:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8003e68:	687b      	ldr	r3, [r7, #4]
 8003e6a:	2b00      	cmp	r3, #0
 8003e6c:	d101      	bne.n	8003e72 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8003e6e:	2301      	movs	r3, #1
 8003e70:	e272      	b.n	8004358 <HAL_RCC_OscConfig+0x4f8>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8003e72:	687b      	ldr	r3, [r7, #4]
 8003e74:	681b      	ldr	r3, [r3, #0]
 8003e76:	f003 0301 	and.w	r3, r3, #1
 8003e7a:	2b00      	cmp	r3, #0
 8003e7c:	f000 8087 	beq.w	8003f8e <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8003e80:	4b92      	ldr	r3, [pc, #584]	; (80040cc <HAL_RCC_OscConfig+0x26c>)
 8003e82:	685b      	ldr	r3, [r3, #4]
 8003e84:	f003 030c 	and.w	r3, r3, #12
 8003e88:	2b04      	cmp	r3, #4
 8003e8a:	d00c      	beq.n	8003ea6 <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8003e8c:	4b8f      	ldr	r3, [pc, #572]	; (80040cc <HAL_RCC_OscConfig+0x26c>)
 8003e8e:	685b      	ldr	r3, [r3, #4]
 8003e90:	f003 030c 	and.w	r3, r3, #12
 8003e94:	2b08      	cmp	r3, #8
 8003e96:	d112      	bne.n	8003ebe <HAL_RCC_OscConfig+0x5e>
 8003e98:	4b8c      	ldr	r3, [pc, #560]	; (80040cc <HAL_RCC_OscConfig+0x26c>)
 8003e9a:	685b      	ldr	r3, [r3, #4]
 8003e9c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003ea0:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003ea4:	d10b      	bne.n	8003ebe <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003ea6:	4b89      	ldr	r3, [pc, #548]	; (80040cc <HAL_RCC_OscConfig+0x26c>)
 8003ea8:	681b      	ldr	r3, [r3, #0]
 8003eaa:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003eae:	2b00      	cmp	r3, #0
 8003eb0:	d06c      	beq.n	8003f8c <HAL_RCC_OscConfig+0x12c>
 8003eb2:	687b      	ldr	r3, [r7, #4]
 8003eb4:	685b      	ldr	r3, [r3, #4]
 8003eb6:	2b00      	cmp	r3, #0
 8003eb8:	d168      	bne.n	8003f8c <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 8003eba:	2301      	movs	r3, #1
 8003ebc:	e24c      	b.n	8004358 <HAL_RCC_OscConfig+0x4f8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8003ebe:	687b      	ldr	r3, [r7, #4]
 8003ec0:	685b      	ldr	r3, [r3, #4]
 8003ec2:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003ec6:	d106      	bne.n	8003ed6 <HAL_RCC_OscConfig+0x76>
 8003ec8:	4b80      	ldr	r3, [pc, #512]	; (80040cc <HAL_RCC_OscConfig+0x26c>)
 8003eca:	681b      	ldr	r3, [r3, #0]
 8003ecc:	4a7f      	ldr	r2, [pc, #508]	; (80040cc <HAL_RCC_OscConfig+0x26c>)
 8003ece:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003ed2:	6013      	str	r3, [r2, #0]
 8003ed4:	e02e      	b.n	8003f34 <HAL_RCC_OscConfig+0xd4>
 8003ed6:	687b      	ldr	r3, [r7, #4]
 8003ed8:	685b      	ldr	r3, [r3, #4]
 8003eda:	2b00      	cmp	r3, #0
 8003edc:	d10c      	bne.n	8003ef8 <HAL_RCC_OscConfig+0x98>
 8003ede:	4b7b      	ldr	r3, [pc, #492]	; (80040cc <HAL_RCC_OscConfig+0x26c>)
 8003ee0:	681b      	ldr	r3, [r3, #0]
 8003ee2:	4a7a      	ldr	r2, [pc, #488]	; (80040cc <HAL_RCC_OscConfig+0x26c>)
 8003ee4:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003ee8:	6013      	str	r3, [r2, #0]
 8003eea:	4b78      	ldr	r3, [pc, #480]	; (80040cc <HAL_RCC_OscConfig+0x26c>)
 8003eec:	681b      	ldr	r3, [r3, #0]
 8003eee:	4a77      	ldr	r2, [pc, #476]	; (80040cc <HAL_RCC_OscConfig+0x26c>)
 8003ef0:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8003ef4:	6013      	str	r3, [r2, #0]
 8003ef6:	e01d      	b.n	8003f34 <HAL_RCC_OscConfig+0xd4>
 8003ef8:	687b      	ldr	r3, [r7, #4]
 8003efa:	685b      	ldr	r3, [r3, #4]
 8003efc:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8003f00:	d10c      	bne.n	8003f1c <HAL_RCC_OscConfig+0xbc>
 8003f02:	4b72      	ldr	r3, [pc, #456]	; (80040cc <HAL_RCC_OscConfig+0x26c>)
 8003f04:	681b      	ldr	r3, [r3, #0]
 8003f06:	4a71      	ldr	r2, [pc, #452]	; (80040cc <HAL_RCC_OscConfig+0x26c>)
 8003f08:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8003f0c:	6013      	str	r3, [r2, #0]
 8003f0e:	4b6f      	ldr	r3, [pc, #444]	; (80040cc <HAL_RCC_OscConfig+0x26c>)
 8003f10:	681b      	ldr	r3, [r3, #0]
 8003f12:	4a6e      	ldr	r2, [pc, #440]	; (80040cc <HAL_RCC_OscConfig+0x26c>)
 8003f14:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003f18:	6013      	str	r3, [r2, #0]
 8003f1a:	e00b      	b.n	8003f34 <HAL_RCC_OscConfig+0xd4>
 8003f1c:	4b6b      	ldr	r3, [pc, #428]	; (80040cc <HAL_RCC_OscConfig+0x26c>)
 8003f1e:	681b      	ldr	r3, [r3, #0]
 8003f20:	4a6a      	ldr	r2, [pc, #424]	; (80040cc <HAL_RCC_OscConfig+0x26c>)
 8003f22:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003f26:	6013      	str	r3, [r2, #0]
 8003f28:	4b68      	ldr	r3, [pc, #416]	; (80040cc <HAL_RCC_OscConfig+0x26c>)
 8003f2a:	681b      	ldr	r3, [r3, #0]
 8003f2c:	4a67      	ldr	r2, [pc, #412]	; (80040cc <HAL_RCC_OscConfig+0x26c>)
 8003f2e:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8003f32:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8003f34:	687b      	ldr	r3, [r7, #4]
 8003f36:	685b      	ldr	r3, [r3, #4]
 8003f38:	2b00      	cmp	r3, #0
 8003f3a:	d013      	beq.n	8003f64 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003f3c:	f7ff f8d6 	bl	80030ec <HAL_GetTick>
 8003f40:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003f42:	e008      	b.n	8003f56 <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8003f44:	f7ff f8d2 	bl	80030ec <HAL_GetTick>
 8003f48:	4602      	mov	r2, r0
 8003f4a:	693b      	ldr	r3, [r7, #16]
 8003f4c:	1ad3      	subs	r3, r2, r3
 8003f4e:	2b64      	cmp	r3, #100	; 0x64
 8003f50:	d901      	bls.n	8003f56 <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 8003f52:	2303      	movs	r3, #3
 8003f54:	e200      	b.n	8004358 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003f56:	4b5d      	ldr	r3, [pc, #372]	; (80040cc <HAL_RCC_OscConfig+0x26c>)
 8003f58:	681b      	ldr	r3, [r3, #0]
 8003f5a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003f5e:	2b00      	cmp	r3, #0
 8003f60:	d0f0      	beq.n	8003f44 <HAL_RCC_OscConfig+0xe4>
 8003f62:	e014      	b.n	8003f8e <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003f64:	f7ff f8c2 	bl	80030ec <HAL_GetTick>
 8003f68:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8003f6a:	e008      	b.n	8003f7e <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8003f6c:	f7ff f8be 	bl	80030ec <HAL_GetTick>
 8003f70:	4602      	mov	r2, r0
 8003f72:	693b      	ldr	r3, [r7, #16]
 8003f74:	1ad3      	subs	r3, r2, r3
 8003f76:	2b64      	cmp	r3, #100	; 0x64
 8003f78:	d901      	bls.n	8003f7e <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 8003f7a:	2303      	movs	r3, #3
 8003f7c:	e1ec      	b.n	8004358 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8003f7e:	4b53      	ldr	r3, [pc, #332]	; (80040cc <HAL_RCC_OscConfig+0x26c>)
 8003f80:	681b      	ldr	r3, [r3, #0]
 8003f82:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003f86:	2b00      	cmp	r3, #0
 8003f88:	d1f0      	bne.n	8003f6c <HAL_RCC_OscConfig+0x10c>
 8003f8a:	e000      	b.n	8003f8e <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003f8c:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8003f8e:	687b      	ldr	r3, [r7, #4]
 8003f90:	681b      	ldr	r3, [r3, #0]
 8003f92:	f003 0302 	and.w	r3, r3, #2
 8003f96:	2b00      	cmp	r3, #0
 8003f98:	d063      	beq.n	8004062 <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8003f9a:	4b4c      	ldr	r3, [pc, #304]	; (80040cc <HAL_RCC_OscConfig+0x26c>)
 8003f9c:	685b      	ldr	r3, [r3, #4]
 8003f9e:	f003 030c 	and.w	r3, r3, #12
 8003fa2:	2b00      	cmp	r3, #0
 8003fa4:	d00b      	beq.n	8003fbe <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 8003fa6:	4b49      	ldr	r3, [pc, #292]	; (80040cc <HAL_RCC_OscConfig+0x26c>)
 8003fa8:	685b      	ldr	r3, [r3, #4]
 8003faa:	f003 030c 	and.w	r3, r3, #12
 8003fae:	2b08      	cmp	r3, #8
 8003fb0:	d11c      	bne.n	8003fec <HAL_RCC_OscConfig+0x18c>
 8003fb2:	4b46      	ldr	r3, [pc, #280]	; (80040cc <HAL_RCC_OscConfig+0x26c>)
 8003fb4:	685b      	ldr	r3, [r3, #4]
 8003fb6:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003fba:	2b00      	cmp	r3, #0
 8003fbc:	d116      	bne.n	8003fec <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003fbe:	4b43      	ldr	r3, [pc, #268]	; (80040cc <HAL_RCC_OscConfig+0x26c>)
 8003fc0:	681b      	ldr	r3, [r3, #0]
 8003fc2:	f003 0302 	and.w	r3, r3, #2
 8003fc6:	2b00      	cmp	r3, #0
 8003fc8:	d005      	beq.n	8003fd6 <HAL_RCC_OscConfig+0x176>
 8003fca:	687b      	ldr	r3, [r7, #4]
 8003fcc:	691b      	ldr	r3, [r3, #16]
 8003fce:	2b01      	cmp	r3, #1
 8003fd0:	d001      	beq.n	8003fd6 <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 8003fd2:	2301      	movs	r3, #1
 8003fd4:	e1c0      	b.n	8004358 <HAL_RCC_OscConfig+0x4f8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003fd6:	4b3d      	ldr	r3, [pc, #244]	; (80040cc <HAL_RCC_OscConfig+0x26c>)
 8003fd8:	681b      	ldr	r3, [r3, #0]
 8003fda:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8003fde:	687b      	ldr	r3, [r7, #4]
 8003fe0:	695b      	ldr	r3, [r3, #20]
 8003fe2:	00db      	lsls	r3, r3, #3
 8003fe4:	4939      	ldr	r1, [pc, #228]	; (80040cc <HAL_RCC_OscConfig+0x26c>)
 8003fe6:	4313      	orrs	r3, r2
 8003fe8:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003fea:	e03a      	b.n	8004062 <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8003fec:	687b      	ldr	r3, [r7, #4]
 8003fee:	691b      	ldr	r3, [r3, #16]
 8003ff0:	2b00      	cmp	r3, #0
 8003ff2:	d020      	beq.n	8004036 <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8003ff4:	4b36      	ldr	r3, [pc, #216]	; (80040d0 <HAL_RCC_OscConfig+0x270>)
 8003ff6:	2201      	movs	r2, #1
 8003ff8:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003ffa:	f7ff f877 	bl	80030ec <HAL_GetTick>
 8003ffe:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004000:	e008      	b.n	8004014 <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8004002:	f7ff f873 	bl	80030ec <HAL_GetTick>
 8004006:	4602      	mov	r2, r0
 8004008:	693b      	ldr	r3, [r7, #16]
 800400a:	1ad3      	subs	r3, r2, r3
 800400c:	2b02      	cmp	r3, #2
 800400e:	d901      	bls.n	8004014 <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 8004010:	2303      	movs	r3, #3
 8004012:	e1a1      	b.n	8004358 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004014:	4b2d      	ldr	r3, [pc, #180]	; (80040cc <HAL_RCC_OscConfig+0x26c>)
 8004016:	681b      	ldr	r3, [r3, #0]
 8004018:	f003 0302 	and.w	r3, r3, #2
 800401c:	2b00      	cmp	r3, #0
 800401e:	d0f0      	beq.n	8004002 <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004020:	4b2a      	ldr	r3, [pc, #168]	; (80040cc <HAL_RCC_OscConfig+0x26c>)
 8004022:	681b      	ldr	r3, [r3, #0]
 8004024:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8004028:	687b      	ldr	r3, [r7, #4]
 800402a:	695b      	ldr	r3, [r3, #20]
 800402c:	00db      	lsls	r3, r3, #3
 800402e:	4927      	ldr	r1, [pc, #156]	; (80040cc <HAL_RCC_OscConfig+0x26c>)
 8004030:	4313      	orrs	r3, r2
 8004032:	600b      	str	r3, [r1, #0]
 8004034:	e015      	b.n	8004062 <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8004036:	4b26      	ldr	r3, [pc, #152]	; (80040d0 <HAL_RCC_OscConfig+0x270>)
 8004038:	2200      	movs	r2, #0
 800403a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800403c:	f7ff f856 	bl	80030ec <HAL_GetTick>
 8004040:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8004042:	e008      	b.n	8004056 <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8004044:	f7ff f852 	bl	80030ec <HAL_GetTick>
 8004048:	4602      	mov	r2, r0
 800404a:	693b      	ldr	r3, [r7, #16]
 800404c:	1ad3      	subs	r3, r2, r3
 800404e:	2b02      	cmp	r3, #2
 8004050:	d901      	bls.n	8004056 <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 8004052:	2303      	movs	r3, #3
 8004054:	e180      	b.n	8004358 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8004056:	4b1d      	ldr	r3, [pc, #116]	; (80040cc <HAL_RCC_OscConfig+0x26c>)
 8004058:	681b      	ldr	r3, [r3, #0]
 800405a:	f003 0302 	and.w	r3, r3, #2
 800405e:	2b00      	cmp	r3, #0
 8004060:	d1f0      	bne.n	8004044 <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8004062:	687b      	ldr	r3, [r7, #4]
 8004064:	681b      	ldr	r3, [r3, #0]
 8004066:	f003 0308 	and.w	r3, r3, #8
 800406a:	2b00      	cmp	r3, #0
 800406c:	d03a      	beq.n	80040e4 <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 800406e:	687b      	ldr	r3, [r7, #4]
 8004070:	699b      	ldr	r3, [r3, #24]
 8004072:	2b00      	cmp	r3, #0
 8004074:	d019      	beq.n	80040aa <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8004076:	4b17      	ldr	r3, [pc, #92]	; (80040d4 <HAL_RCC_OscConfig+0x274>)
 8004078:	2201      	movs	r2, #1
 800407a:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800407c:	f7ff f836 	bl	80030ec <HAL_GetTick>
 8004080:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8004082:	e008      	b.n	8004096 <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8004084:	f7ff f832 	bl	80030ec <HAL_GetTick>
 8004088:	4602      	mov	r2, r0
 800408a:	693b      	ldr	r3, [r7, #16]
 800408c:	1ad3      	subs	r3, r2, r3
 800408e:	2b02      	cmp	r3, #2
 8004090:	d901      	bls.n	8004096 <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 8004092:	2303      	movs	r3, #3
 8004094:	e160      	b.n	8004358 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8004096:	4b0d      	ldr	r3, [pc, #52]	; (80040cc <HAL_RCC_OscConfig+0x26c>)
 8004098:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800409a:	f003 0302 	and.w	r3, r3, #2
 800409e:	2b00      	cmp	r3, #0
 80040a0:	d0f0      	beq.n	8004084 <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 80040a2:	2001      	movs	r0, #1
 80040a4:	f000 fad8 	bl	8004658 <RCC_Delay>
 80040a8:	e01c      	b.n	80040e4 <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80040aa:	4b0a      	ldr	r3, [pc, #40]	; (80040d4 <HAL_RCC_OscConfig+0x274>)
 80040ac:	2200      	movs	r2, #0
 80040ae:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80040b0:	f7ff f81c 	bl	80030ec <HAL_GetTick>
 80040b4:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80040b6:	e00f      	b.n	80040d8 <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80040b8:	f7ff f818 	bl	80030ec <HAL_GetTick>
 80040bc:	4602      	mov	r2, r0
 80040be:	693b      	ldr	r3, [r7, #16]
 80040c0:	1ad3      	subs	r3, r2, r3
 80040c2:	2b02      	cmp	r3, #2
 80040c4:	d908      	bls.n	80040d8 <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 80040c6:	2303      	movs	r3, #3
 80040c8:	e146      	b.n	8004358 <HAL_RCC_OscConfig+0x4f8>
 80040ca:	bf00      	nop
 80040cc:	40021000 	.word	0x40021000
 80040d0:	42420000 	.word	0x42420000
 80040d4:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80040d8:	4b92      	ldr	r3, [pc, #584]	; (8004324 <HAL_RCC_OscConfig+0x4c4>)
 80040da:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80040dc:	f003 0302 	and.w	r3, r3, #2
 80040e0:	2b00      	cmp	r3, #0
 80040e2:	d1e9      	bne.n	80040b8 <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80040e4:	687b      	ldr	r3, [r7, #4]
 80040e6:	681b      	ldr	r3, [r3, #0]
 80040e8:	f003 0304 	and.w	r3, r3, #4
 80040ec:	2b00      	cmp	r3, #0
 80040ee:	f000 80a6 	beq.w	800423e <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 80040f2:	2300      	movs	r3, #0
 80040f4:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 80040f6:	4b8b      	ldr	r3, [pc, #556]	; (8004324 <HAL_RCC_OscConfig+0x4c4>)
 80040f8:	69db      	ldr	r3, [r3, #28]
 80040fa:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80040fe:	2b00      	cmp	r3, #0
 8004100:	d10d      	bne.n	800411e <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8004102:	4b88      	ldr	r3, [pc, #544]	; (8004324 <HAL_RCC_OscConfig+0x4c4>)
 8004104:	69db      	ldr	r3, [r3, #28]
 8004106:	4a87      	ldr	r2, [pc, #540]	; (8004324 <HAL_RCC_OscConfig+0x4c4>)
 8004108:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800410c:	61d3      	str	r3, [r2, #28]
 800410e:	4b85      	ldr	r3, [pc, #532]	; (8004324 <HAL_RCC_OscConfig+0x4c4>)
 8004110:	69db      	ldr	r3, [r3, #28]
 8004112:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004116:	60bb      	str	r3, [r7, #8]
 8004118:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800411a:	2301      	movs	r3, #1
 800411c:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800411e:	4b82      	ldr	r3, [pc, #520]	; (8004328 <HAL_RCC_OscConfig+0x4c8>)
 8004120:	681b      	ldr	r3, [r3, #0]
 8004122:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004126:	2b00      	cmp	r3, #0
 8004128:	d118      	bne.n	800415c <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800412a:	4b7f      	ldr	r3, [pc, #508]	; (8004328 <HAL_RCC_OscConfig+0x4c8>)
 800412c:	681b      	ldr	r3, [r3, #0]
 800412e:	4a7e      	ldr	r2, [pc, #504]	; (8004328 <HAL_RCC_OscConfig+0x4c8>)
 8004130:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004134:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8004136:	f7fe ffd9 	bl	80030ec <HAL_GetTick>
 800413a:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800413c:	e008      	b.n	8004150 <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800413e:	f7fe ffd5 	bl	80030ec <HAL_GetTick>
 8004142:	4602      	mov	r2, r0
 8004144:	693b      	ldr	r3, [r7, #16]
 8004146:	1ad3      	subs	r3, r2, r3
 8004148:	2b64      	cmp	r3, #100	; 0x64
 800414a:	d901      	bls.n	8004150 <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 800414c:	2303      	movs	r3, #3
 800414e:	e103      	b.n	8004358 <HAL_RCC_OscConfig+0x4f8>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004150:	4b75      	ldr	r3, [pc, #468]	; (8004328 <HAL_RCC_OscConfig+0x4c8>)
 8004152:	681b      	ldr	r3, [r3, #0]
 8004154:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004158:	2b00      	cmp	r3, #0
 800415a:	d0f0      	beq.n	800413e <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800415c:	687b      	ldr	r3, [r7, #4]
 800415e:	68db      	ldr	r3, [r3, #12]
 8004160:	2b01      	cmp	r3, #1
 8004162:	d106      	bne.n	8004172 <HAL_RCC_OscConfig+0x312>
 8004164:	4b6f      	ldr	r3, [pc, #444]	; (8004324 <HAL_RCC_OscConfig+0x4c4>)
 8004166:	6a1b      	ldr	r3, [r3, #32]
 8004168:	4a6e      	ldr	r2, [pc, #440]	; (8004324 <HAL_RCC_OscConfig+0x4c4>)
 800416a:	f043 0301 	orr.w	r3, r3, #1
 800416e:	6213      	str	r3, [r2, #32]
 8004170:	e02d      	b.n	80041ce <HAL_RCC_OscConfig+0x36e>
 8004172:	687b      	ldr	r3, [r7, #4]
 8004174:	68db      	ldr	r3, [r3, #12]
 8004176:	2b00      	cmp	r3, #0
 8004178:	d10c      	bne.n	8004194 <HAL_RCC_OscConfig+0x334>
 800417a:	4b6a      	ldr	r3, [pc, #424]	; (8004324 <HAL_RCC_OscConfig+0x4c4>)
 800417c:	6a1b      	ldr	r3, [r3, #32]
 800417e:	4a69      	ldr	r2, [pc, #420]	; (8004324 <HAL_RCC_OscConfig+0x4c4>)
 8004180:	f023 0301 	bic.w	r3, r3, #1
 8004184:	6213      	str	r3, [r2, #32]
 8004186:	4b67      	ldr	r3, [pc, #412]	; (8004324 <HAL_RCC_OscConfig+0x4c4>)
 8004188:	6a1b      	ldr	r3, [r3, #32]
 800418a:	4a66      	ldr	r2, [pc, #408]	; (8004324 <HAL_RCC_OscConfig+0x4c4>)
 800418c:	f023 0304 	bic.w	r3, r3, #4
 8004190:	6213      	str	r3, [r2, #32]
 8004192:	e01c      	b.n	80041ce <HAL_RCC_OscConfig+0x36e>
 8004194:	687b      	ldr	r3, [r7, #4]
 8004196:	68db      	ldr	r3, [r3, #12]
 8004198:	2b05      	cmp	r3, #5
 800419a:	d10c      	bne.n	80041b6 <HAL_RCC_OscConfig+0x356>
 800419c:	4b61      	ldr	r3, [pc, #388]	; (8004324 <HAL_RCC_OscConfig+0x4c4>)
 800419e:	6a1b      	ldr	r3, [r3, #32]
 80041a0:	4a60      	ldr	r2, [pc, #384]	; (8004324 <HAL_RCC_OscConfig+0x4c4>)
 80041a2:	f043 0304 	orr.w	r3, r3, #4
 80041a6:	6213      	str	r3, [r2, #32]
 80041a8:	4b5e      	ldr	r3, [pc, #376]	; (8004324 <HAL_RCC_OscConfig+0x4c4>)
 80041aa:	6a1b      	ldr	r3, [r3, #32]
 80041ac:	4a5d      	ldr	r2, [pc, #372]	; (8004324 <HAL_RCC_OscConfig+0x4c4>)
 80041ae:	f043 0301 	orr.w	r3, r3, #1
 80041b2:	6213      	str	r3, [r2, #32]
 80041b4:	e00b      	b.n	80041ce <HAL_RCC_OscConfig+0x36e>
 80041b6:	4b5b      	ldr	r3, [pc, #364]	; (8004324 <HAL_RCC_OscConfig+0x4c4>)
 80041b8:	6a1b      	ldr	r3, [r3, #32]
 80041ba:	4a5a      	ldr	r2, [pc, #360]	; (8004324 <HAL_RCC_OscConfig+0x4c4>)
 80041bc:	f023 0301 	bic.w	r3, r3, #1
 80041c0:	6213      	str	r3, [r2, #32]
 80041c2:	4b58      	ldr	r3, [pc, #352]	; (8004324 <HAL_RCC_OscConfig+0x4c4>)
 80041c4:	6a1b      	ldr	r3, [r3, #32]
 80041c6:	4a57      	ldr	r2, [pc, #348]	; (8004324 <HAL_RCC_OscConfig+0x4c4>)
 80041c8:	f023 0304 	bic.w	r3, r3, #4
 80041cc:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 80041ce:	687b      	ldr	r3, [r7, #4]
 80041d0:	68db      	ldr	r3, [r3, #12]
 80041d2:	2b00      	cmp	r3, #0
 80041d4:	d015      	beq.n	8004202 <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80041d6:	f7fe ff89 	bl	80030ec <HAL_GetTick>
 80041da:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80041dc:	e00a      	b.n	80041f4 <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80041de:	f7fe ff85 	bl	80030ec <HAL_GetTick>
 80041e2:	4602      	mov	r2, r0
 80041e4:	693b      	ldr	r3, [r7, #16]
 80041e6:	1ad3      	subs	r3, r2, r3
 80041e8:	f241 3288 	movw	r2, #5000	; 0x1388
 80041ec:	4293      	cmp	r3, r2
 80041ee:	d901      	bls.n	80041f4 <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 80041f0:	2303      	movs	r3, #3
 80041f2:	e0b1      	b.n	8004358 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80041f4:	4b4b      	ldr	r3, [pc, #300]	; (8004324 <HAL_RCC_OscConfig+0x4c4>)
 80041f6:	6a1b      	ldr	r3, [r3, #32]
 80041f8:	f003 0302 	and.w	r3, r3, #2
 80041fc:	2b00      	cmp	r3, #0
 80041fe:	d0ee      	beq.n	80041de <HAL_RCC_OscConfig+0x37e>
 8004200:	e014      	b.n	800422c <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8004202:	f7fe ff73 	bl	80030ec <HAL_GetTick>
 8004206:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8004208:	e00a      	b.n	8004220 <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800420a:	f7fe ff6f 	bl	80030ec <HAL_GetTick>
 800420e:	4602      	mov	r2, r0
 8004210:	693b      	ldr	r3, [r7, #16]
 8004212:	1ad3      	subs	r3, r2, r3
 8004214:	f241 3288 	movw	r2, #5000	; 0x1388
 8004218:	4293      	cmp	r3, r2
 800421a:	d901      	bls.n	8004220 <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 800421c:	2303      	movs	r3, #3
 800421e:	e09b      	b.n	8004358 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8004220:	4b40      	ldr	r3, [pc, #256]	; (8004324 <HAL_RCC_OscConfig+0x4c4>)
 8004222:	6a1b      	ldr	r3, [r3, #32]
 8004224:	f003 0302 	and.w	r3, r3, #2
 8004228:	2b00      	cmp	r3, #0
 800422a:	d1ee      	bne.n	800420a <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 800422c:	7dfb      	ldrb	r3, [r7, #23]
 800422e:	2b01      	cmp	r3, #1
 8004230:	d105      	bne.n	800423e <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8004232:	4b3c      	ldr	r3, [pc, #240]	; (8004324 <HAL_RCC_OscConfig+0x4c4>)
 8004234:	69db      	ldr	r3, [r3, #28]
 8004236:	4a3b      	ldr	r2, [pc, #236]	; (8004324 <HAL_RCC_OscConfig+0x4c4>)
 8004238:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800423c:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800423e:	687b      	ldr	r3, [r7, #4]
 8004240:	69db      	ldr	r3, [r3, #28]
 8004242:	2b00      	cmp	r3, #0
 8004244:	f000 8087 	beq.w	8004356 <HAL_RCC_OscConfig+0x4f6>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8004248:	4b36      	ldr	r3, [pc, #216]	; (8004324 <HAL_RCC_OscConfig+0x4c4>)
 800424a:	685b      	ldr	r3, [r3, #4]
 800424c:	f003 030c 	and.w	r3, r3, #12
 8004250:	2b08      	cmp	r3, #8
 8004252:	d061      	beq.n	8004318 <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8004254:	687b      	ldr	r3, [r7, #4]
 8004256:	69db      	ldr	r3, [r3, #28]
 8004258:	2b02      	cmp	r3, #2
 800425a:	d146      	bne.n	80042ea <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800425c:	4b33      	ldr	r3, [pc, #204]	; (800432c <HAL_RCC_OscConfig+0x4cc>)
 800425e:	2200      	movs	r2, #0
 8004260:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004262:	f7fe ff43 	bl	80030ec <HAL_GetTick>
 8004266:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8004268:	e008      	b.n	800427c <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800426a:	f7fe ff3f 	bl	80030ec <HAL_GetTick>
 800426e:	4602      	mov	r2, r0
 8004270:	693b      	ldr	r3, [r7, #16]
 8004272:	1ad3      	subs	r3, r2, r3
 8004274:	2b02      	cmp	r3, #2
 8004276:	d901      	bls.n	800427c <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 8004278:	2303      	movs	r3, #3
 800427a:	e06d      	b.n	8004358 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800427c:	4b29      	ldr	r3, [pc, #164]	; (8004324 <HAL_RCC_OscConfig+0x4c4>)
 800427e:	681b      	ldr	r3, [r3, #0]
 8004280:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004284:	2b00      	cmp	r3, #0
 8004286:	d1f0      	bne.n	800426a <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 8004288:	687b      	ldr	r3, [r7, #4]
 800428a:	6a1b      	ldr	r3, [r3, #32]
 800428c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004290:	d108      	bne.n	80042a4 <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 8004292:	4b24      	ldr	r3, [pc, #144]	; (8004324 <HAL_RCC_OscConfig+0x4c4>)
 8004294:	685b      	ldr	r3, [r3, #4]
 8004296:	f423 3200 	bic.w	r2, r3, #131072	; 0x20000
 800429a:	687b      	ldr	r3, [r7, #4]
 800429c:	689b      	ldr	r3, [r3, #8]
 800429e:	4921      	ldr	r1, [pc, #132]	; (8004324 <HAL_RCC_OscConfig+0x4c4>)
 80042a0:	4313      	orrs	r3, r2
 80042a2:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80042a4:	4b1f      	ldr	r3, [pc, #124]	; (8004324 <HAL_RCC_OscConfig+0x4c4>)
 80042a6:	685b      	ldr	r3, [r3, #4]
 80042a8:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 80042ac:	687b      	ldr	r3, [r7, #4]
 80042ae:	6a19      	ldr	r1, [r3, #32]
 80042b0:	687b      	ldr	r3, [r7, #4]
 80042b2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80042b4:	430b      	orrs	r3, r1
 80042b6:	491b      	ldr	r1, [pc, #108]	; (8004324 <HAL_RCC_OscConfig+0x4c4>)
 80042b8:	4313      	orrs	r3, r2
 80042ba:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80042bc:	4b1b      	ldr	r3, [pc, #108]	; (800432c <HAL_RCC_OscConfig+0x4cc>)
 80042be:	2201      	movs	r2, #1
 80042c0:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80042c2:	f7fe ff13 	bl	80030ec <HAL_GetTick>
 80042c6:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 80042c8:	e008      	b.n	80042dc <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80042ca:	f7fe ff0f 	bl	80030ec <HAL_GetTick>
 80042ce:	4602      	mov	r2, r0
 80042d0:	693b      	ldr	r3, [r7, #16]
 80042d2:	1ad3      	subs	r3, r2, r3
 80042d4:	2b02      	cmp	r3, #2
 80042d6:	d901      	bls.n	80042dc <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 80042d8:	2303      	movs	r3, #3
 80042da:	e03d      	b.n	8004358 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 80042dc:	4b11      	ldr	r3, [pc, #68]	; (8004324 <HAL_RCC_OscConfig+0x4c4>)
 80042de:	681b      	ldr	r3, [r3, #0]
 80042e0:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80042e4:	2b00      	cmp	r3, #0
 80042e6:	d0f0      	beq.n	80042ca <HAL_RCC_OscConfig+0x46a>
 80042e8:	e035      	b.n	8004356 <HAL_RCC_OscConfig+0x4f6>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80042ea:	4b10      	ldr	r3, [pc, #64]	; (800432c <HAL_RCC_OscConfig+0x4cc>)
 80042ec:	2200      	movs	r2, #0
 80042ee:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80042f0:	f7fe fefc 	bl	80030ec <HAL_GetTick>
 80042f4:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80042f6:	e008      	b.n	800430a <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80042f8:	f7fe fef8 	bl	80030ec <HAL_GetTick>
 80042fc:	4602      	mov	r2, r0
 80042fe:	693b      	ldr	r3, [r7, #16]
 8004300:	1ad3      	subs	r3, r2, r3
 8004302:	2b02      	cmp	r3, #2
 8004304:	d901      	bls.n	800430a <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 8004306:	2303      	movs	r3, #3
 8004308:	e026      	b.n	8004358 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800430a:	4b06      	ldr	r3, [pc, #24]	; (8004324 <HAL_RCC_OscConfig+0x4c4>)
 800430c:	681b      	ldr	r3, [r3, #0]
 800430e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004312:	2b00      	cmp	r3, #0
 8004314:	d1f0      	bne.n	80042f8 <HAL_RCC_OscConfig+0x498>
 8004316:	e01e      	b.n	8004356 <HAL_RCC_OscConfig+0x4f6>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8004318:	687b      	ldr	r3, [r7, #4]
 800431a:	69db      	ldr	r3, [r3, #28]
 800431c:	2b01      	cmp	r3, #1
 800431e:	d107      	bne.n	8004330 <HAL_RCC_OscConfig+0x4d0>
      {
        return HAL_ERROR;
 8004320:	2301      	movs	r3, #1
 8004322:	e019      	b.n	8004358 <HAL_RCC_OscConfig+0x4f8>
 8004324:	40021000 	.word	0x40021000
 8004328:	40007000 	.word	0x40007000
 800432c:	42420060 	.word	0x42420060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8004330:	4b0b      	ldr	r3, [pc, #44]	; (8004360 <HAL_RCC_OscConfig+0x500>)
 8004332:	685b      	ldr	r3, [r3, #4]
 8004334:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8004336:	68fb      	ldr	r3, [r7, #12]
 8004338:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 800433c:	687b      	ldr	r3, [r7, #4]
 800433e:	6a1b      	ldr	r3, [r3, #32]
 8004340:	429a      	cmp	r2, r3
 8004342:	d106      	bne.n	8004352 <HAL_RCC_OscConfig+0x4f2>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 8004344:	68fb      	ldr	r3, [r7, #12]
 8004346:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 800434a:	687b      	ldr	r3, [r7, #4]
 800434c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800434e:	429a      	cmp	r2, r3
 8004350:	d001      	beq.n	8004356 <HAL_RCC_OscConfig+0x4f6>
        {
          return HAL_ERROR;
 8004352:	2301      	movs	r3, #1
 8004354:	e000      	b.n	8004358 <HAL_RCC_OscConfig+0x4f8>
        }
      }
    }
  }

  return HAL_OK;
 8004356:	2300      	movs	r3, #0
}
 8004358:	4618      	mov	r0, r3
 800435a:	3718      	adds	r7, #24
 800435c:	46bd      	mov	sp, r7
 800435e:	bd80      	pop	{r7, pc}
 8004360:	40021000 	.word	0x40021000

08004364 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8004364:	b580      	push	{r7, lr}
 8004366:	b084      	sub	sp, #16
 8004368:	af00      	add	r7, sp, #0
 800436a:	6078      	str	r0, [r7, #4]
 800436c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 800436e:	687b      	ldr	r3, [r7, #4]
 8004370:	2b00      	cmp	r3, #0
 8004372:	d101      	bne.n	8004378 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8004374:	2301      	movs	r3, #1
 8004376:	e0d0      	b.n	800451a <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8004378:	4b6a      	ldr	r3, [pc, #424]	; (8004524 <HAL_RCC_ClockConfig+0x1c0>)
 800437a:	681b      	ldr	r3, [r3, #0]
 800437c:	f003 0307 	and.w	r3, r3, #7
 8004380:	683a      	ldr	r2, [r7, #0]
 8004382:	429a      	cmp	r2, r3
 8004384:	d910      	bls.n	80043a8 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004386:	4b67      	ldr	r3, [pc, #412]	; (8004524 <HAL_RCC_ClockConfig+0x1c0>)
 8004388:	681b      	ldr	r3, [r3, #0]
 800438a:	f023 0207 	bic.w	r2, r3, #7
 800438e:	4965      	ldr	r1, [pc, #404]	; (8004524 <HAL_RCC_ClockConfig+0x1c0>)
 8004390:	683b      	ldr	r3, [r7, #0]
 8004392:	4313      	orrs	r3, r2
 8004394:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8004396:	4b63      	ldr	r3, [pc, #396]	; (8004524 <HAL_RCC_ClockConfig+0x1c0>)
 8004398:	681b      	ldr	r3, [r3, #0]
 800439a:	f003 0307 	and.w	r3, r3, #7
 800439e:	683a      	ldr	r2, [r7, #0]
 80043a0:	429a      	cmp	r2, r3
 80043a2:	d001      	beq.n	80043a8 <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 80043a4:	2301      	movs	r3, #1
 80043a6:	e0b8      	b.n	800451a <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80043a8:	687b      	ldr	r3, [r7, #4]
 80043aa:	681b      	ldr	r3, [r3, #0]
 80043ac:	f003 0302 	and.w	r3, r3, #2
 80043b0:	2b00      	cmp	r3, #0
 80043b2:	d020      	beq.n	80043f6 <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80043b4:	687b      	ldr	r3, [r7, #4]
 80043b6:	681b      	ldr	r3, [r3, #0]
 80043b8:	f003 0304 	and.w	r3, r3, #4
 80043bc:	2b00      	cmp	r3, #0
 80043be:	d005      	beq.n	80043cc <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80043c0:	4b59      	ldr	r3, [pc, #356]	; (8004528 <HAL_RCC_ClockConfig+0x1c4>)
 80043c2:	685b      	ldr	r3, [r3, #4]
 80043c4:	4a58      	ldr	r2, [pc, #352]	; (8004528 <HAL_RCC_ClockConfig+0x1c4>)
 80043c6:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 80043ca:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80043cc:	687b      	ldr	r3, [r7, #4]
 80043ce:	681b      	ldr	r3, [r3, #0]
 80043d0:	f003 0308 	and.w	r3, r3, #8
 80043d4:	2b00      	cmp	r3, #0
 80043d6:	d005      	beq.n	80043e4 <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80043d8:	4b53      	ldr	r3, [pc, #332]	; (8004528 <HAL_RCC_ClockConfig+0x1c4>)
 80043da:	685b      	ldr	r3, [r3, #4]
 80043dc:	4a52      	ldr	r2, [pc, #328]	; (8004528 <HAL_RCC_ClockConfig+0x1c4>)
 80043de:	f443 5360 	orr.w	r3, r3, #14336	; 0x3800
 80043e2:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80043e4:	4b50      	ldr	r3, [pc, #320]	; (8004528 <HAL_RCC_ClockConfig+0x1c4>)
 80043e6:	685b      	ldr	r3, [r3, #4]
 80043e8:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80043ec:	687b      	ldr	r3, [r7, #4]
 80043ee:	689b      	ldr	r3, [r3, #8]
 80043f0:	494d      	ldr	r1, [pc, #308]	; (8004528 <HAL_RCC_ClockConfig+0x1c4>)
 80043f2:	4313      	orrs	r3, r2
 80043f4:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80043f6:	687b      	ldr	r3, [r7, #4]
 80043f8:	681b      	ldr	r3, [r3, #0]
 80043fa:	f003 0301 	and.w	r3, r3, #1
 80043fe:	2b00      	cmp	r3, #0
 8004400:	d040      	beq.n	8004484 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8004402:	687b      	ldr	r3, [r7, #4]
 8004404:	685b      	ldr	r3, [r3, #4]
 8004406:	2b01      	cmp	r3, #1
 8004408:	d107      	bne.n	800441a <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800440a:	4b47      	ldr	r3, [pc, #284]	; (8004528 <HAL_RCC_ClockConfig+0x1c4>)
 800440c:	681b      	ldr	r3, [r3, #0]
 800440e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004412:	2b00      	cmp	r3, #0
 8004414:	d115      	bne.n	8004442 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8004416:	2301      	movs	r3, #1
 8004418:	e07f      	b.n	800451a <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800441a:	687b      	ldr	r3, [r7, #4]
 800441c:	685b      	ldr	r3, [r3, #4]
 800441e:	2b02      	cmp	r3, #2
 8004420:	d107      	bne.n	8004432 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8004422:	4b41      	ldr	r3, [pc, #260]	; (8004528 <HAL_RCC_ClockConfig+0x1c4>)
 8004424:	681b      	ldr	r3, [r3, #0]
 8004426:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800442a:	2b00      	cmp	r3, #0
 800442c:	d109      	bne.n	8004442 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800442e:	2301      	movs	r3, #1
 8004430:	e073      	b.n	800451a <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004432:	4b3d      	ldr	r3, [pc, #244]	; (8004528 <HAL_RCC_ClockConfig+0x1c4>)
 8004434:	681b      	ldr	r3, [r3, #0]
 8004436:	f003 0302 	and.w	r3, r3, #2
 800443a:	2b00      	cmp	r3, #0
 800443c:	d101      	bne.n	8004442 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800443e:	2301      	movs	r3, #1
 8004440:	e06b      	b.n	800451a <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8004442:	4b39      	ldr	r3, [pc, #228]	; (8004528 <HAL_RCC_ClockConfig+0x1c4>)
 8004444:	685b      	ldr	r3, [r3, #4]
 8004446:	f023 0203 	bic.w	r2, r3, #3
 800444a:	687b      	ldr	r3, [r7, #4]
 800444c:	685b      	ldr	r3, [r3, #4]
 800444e:	4936      	ldr	r1, [pc, #216]	; (8004528 <HAL_RCC_ClockConfig+0x1c4>)
 8004450:	4313      	orrs	r3, r2
 8004452:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8004454:	f7fe fe4a 	bl	80030ec <HAL_GetTick>
 8004458:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800445a:	e00a      	b.n	8004472 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800445c:	f7fe fe46 	bl	80030ec <HAL_GetTick>
 8004460:	4602      	mov	r2, r0
 8004462:	68fb      	ldr	r3, [r7, #12]
 8004464:	1ad3      	subs	r3, r2, r3
 8004466:	f241 3288 	movw	r2, #5000	; 0x1388
 800446a:	4293      	cmp	r3, r2
 800446c:	d901      	bls.n	8004472 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 800446e:	2303      	movs	r3, #3
 8004470:	e053      	b.n	800451a <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004472:	4b2d      	ldr	r3, [pc, #180]	; (8004528 <HAL_RCC_ClockConfig+0x1c4>)
 8004474:	685b      	ldr	r3, [r3, #4]
 8004476:	f003 020c 	and.w	r2, r3, #12
 800447a:	687b      	ldr	r3, [r7, #4]
 800447c:	685b      	ldr	r3, [r3, #4]
 800447e:	009b      	lsls	r3, r3, #2
 8004480:	429a      	cmp	r2, r3
 8004482:	d1eb      	bne.n	800445c <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8004484:	4b27      	ldr	r3, [pc, #156]	; (8004524 <HAL_RCC_ClockConfig+0x1c0>)
 8004486:	681b      	ldr	r3, [r3, #0]
 8004488:	f003 0307 	and.w	r3, r3, #7
 800448c:	683a      	ldr	r2, [r7, #0]
 800448e:	429a      	cmp	r2, r3
 8004490:	d210      	bcs.n	80044b4 <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004492:	4b24      	ldr	r3, [pc, #144]	; (8004524 <HAL_RCC_ClockConfig+0x1c0>)
 8004494:	681b      	ldr	r3, [r3, #0]
 8004496:	f023 0207 	bic.w	r2, r3, #7
 800449a:	4922      	ldr	r1, [pc, #136]	; (8004524 <HAL_RCC_ClockConfig+0x1c0>)
 800449c:	683b      	ldr	r3, [r7, #0]
 800449e:	4313      	orrs	r3, r2
 80044a0:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80044a2:	4b20      	ldr	r3, [pc, #128]	; (8004524 <HAL_RCC_ClockConfig+0x1c0>)
 80044a4:	681b      	ldr	r3, [r3, #0]
 80044a6:	f003 0307 	and.w	r3, r3, #7
 80044aa:	683a      	ldr	r2, [r7, #0]
 80044ac:	429a      	cmp	r2, r3
 80044ae:	d001      	beq.n	80044b4 <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 80044b0:	2301      	movs	r3, #1
 80044b2:	e032      	b.n	800451a <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80044b4:	687b      	ldr	r3, [r7, #4]
 80044b6:	681b      	ldr	r3, [r3, #0]
 80044b8:	f003 0304 	and.w	r3, r3, #4
 80044bc:	2b00      	cmp	r3, #0
 80044be:	d008      	beq.n	80044d2 <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80044c0:	4b19      	ldr	r3, [pc, #100]	; (8004528 <HAL_RCC_ClockConfig+0x1c4>)
 80044c2:	685b      	ldr	r3, [r3, #4]
 80044c4:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 80044c8:	687b      	ldr	r3, [r7, #4]
 80044ca:	68db      	ldr	r3, [r3, #12]
 80044cc:	4916      	ldr	r1, [pc, #88]	; (8004528 <HAL_RCC_ClockConfig+0x1c4>)
 80044ce:	4313      	orrs	r3, r2
 80044d0:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80044d2:	687b      	ldr	r3, [r7, #4]
 80044d4:	681b      	ldr	r3, [r3, #0]
 80044d6:	f003 0308 	and.w	r3, r3, #8
 80044da:	2b00      	cmp	r3, #0
 80044dc:	d009      	beq.n	80044f2 <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 80044de:	4b12      	ldr	r3, [pc, #72]	; (8004528 <HAL_RCC_ClockConfig+0x1c4>)
 80044e0:	685b      	ldr	r3, [r3, #4]
 80044e2:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 80044e6:	687b      	ldr	r3, [r7, #4]
 80044e8:	691b      	ldr	r3, [r3, #16]
 80044ea:	00db      	lsls	r3, r3, #3
 80044ec:	490e      	ldr	r1, [pc, #56]	; (8004528 <HAL_RCC_ClockConfig+0x1c4>)
 80044ee:	4313      	orrs	r3, r2
 80044f0:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 80044f2:	f000 f821 	bl	8004538 <HAL_RCC_GetSysClockFreq>
 80044f6:	4602      	mov	r2, r0
 80044f8:	4b0b      	ldr	r3, [pc, #44]	; (8004528 <HAL_RCC_ClockConfig+0x1c4>)
 80044fa:	685b      	ldr	r3, [r3, #4]
 80044fc:	091b      	lsrs	r3, r3, #4
 80044fe:	f003 030f 	and.w	r3, r3, #15
 8004502:	490a      	ldr	r1, [pc, #40]	; (800452c <HAL_RCC_ClockConfig+0x1c8>)
 8004504:	5ccb      	ldrb	r3, [r1, r3]
 8004506:	fa22 f303 	lsr.w	r3, r2, r3
 800450a:	4a09      	ldr	r2, [pc, #36]	; (8004530 <HAL_RCC_ClockConfig+0x1cc>)
 800450c:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 800450e:	4b09      	ldr	r3, [pc, #36]	; (8004534 <HAL_RCC_ClockConfig+0x1d0>)
 8004510:	681b      	ldr	r3, [r3, #0]
 8004512:	4618      	mov	r0, r3
 8004514:	f7fe fda8 	bl	8003068 <HAL_InitTick>

  return HAL_OK;
 8004518:	2300      	movs	r3, #0
}
 800451a:	4618      	mov	r0, r3
 800451c:	3710      	adds	r7, #16
 800451e:	46bd      	mov	sp, r7
 8004520:	bd80      	pop	{r7, pc}
 8004522:	bf00      	nop
 8004524:	40022000 	.word	0x40022000
 8004528:	40021000 	.word	0x40021000
 800452c:	08009738 	.word	0x08009738
 8004530:	20000000 	.word	0x20000000
 8004534:	20000004 	.word	0x20000004

08004538 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8004538:	b490      	push	{r4, r7}
 800453a:	b08a      	sub	sp, #40	; 0x28
 800453c:	af00      	add	r7, sp, #0
#if defined(RCC_CFGR2_PREDIV1SRC)
  const uint8_t aPLLMULFactorTable[14] = {0, 0, 4, 5, 6, 7, 8, 9, 0, 0, 0, 0, 0, 13};
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPLLMULFactorTable[16] = {2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 16};
 800453e:	4b29      	ldr	r3, [pc, #164]	; (80045e4 <HAL_RCC_GetSysClockFreq+0xac>)
 8004540:	1d3c      	adds	r4, r7, #4
 8004542:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8004544:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
#if defined(RCC_CFGR2_PREDIV1)
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPredivFactorTable[2] = {1, 2};
 8004548:	f240 2301 	movw	r3, #513	; 0x201
 800454c:	803b      	strh	r3, [r7, #0]
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 800454e:	2300      	movs	r3, #0
 8004550:	61fb      	str	r3, [r7, #28]
 8004552:	2300      	movs	r3, #0
 8004554:	61bb      	str	r3, [r7, #24]
 8004556:	2300      	movs	r3, #0
 8004558:	627b      	str	r3, [r7, #36]	; 0x24
 800455a:	2300      	movs	r3, #0
 800455c:	617b      	str	r3, [r7, #20]
  uint32_t sysclockfreq = 0U;
 800455e:	2300      	movs	r3, #0
 8004560:	623b      	str	r3, [r7, #32]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 8004562:	4b21      	ldr	r3, [pc, #132]	; (80045e8 <HAL_RCC_GetSysClockFreq+0xb0>)
 8004564:	685b      	ldr	r3, [r3, #4]
 8004566:	61fb      	str	r3, [r7, #28]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8004568:	69fb      	ldr	r3, [r7, #28]
 800456a:	f003 030c 	and.w	r3, r3, #12
 800456e:	2b04      	cmp	r3, #4
 8004570:	d002      	beq.n	8004578 <HAL_RCC_GetSysClockFreq+0x40>
 8004572:	2b08      	cmp	r3, #8
 8004574:	d003      	beq.n	800457e <HAL_RCC_GetSysClockFreq+0x46>
 8004576:	e02b      	b.n	80045d0 <HAL_RCC_GetSysClockFreq+0x98>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8004578:	4b1c      	ldr	r3, [pc, #112]	; (80045ec <HAL_RCC_GetSysClockFreq+0xb4>)
 800457a:	623b      	str	r3, [r7, #32]
      break;
 800457c:	e02b      	b.n	80045d6 <HAL_RCC_GetSysClockFreq+0x9e>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 800457e:	69fb      	ldr	r3, [r7, #28]
 8004580:	0c9b      	lsrs	r3, r3, #18
 8004582:	f003 030f 	and.w	r3, r3, #15
 8004586:	3328      	adds	r3, #40	; 0x28
 8004588:	443b      	add	r3, r7
 800458a:	f813 3c24 	ldrb.w	r3, [r3, #-36]
 800458e:	617b      	str	r3, [r7, #20]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8004590:	69fb      	ldr	r3, [r7, #28]
 8004592:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8004596:	2b00      	cmp	r3, #0
 8004598:	d012      	beq.n	80045c0 <HAL_RCC_GetSysClockFreq+0x88>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 800459a:	4b13      	ldr	r3, [pc, #76]	; (80045e8 <HAL_RCC_GetSysClockFreq+0xb0>)
 800459c:	685b      	ldr	r3, [r3, #4]
 800459e:	0c5b      	lsrs	r3, r3, #17
 80045a0:	f003 0301 	and.w	r3, r3, #1
 80045a4:	3328      	adds	r3, #40	; 0x28
 80045a6:	443b      	add	r3, r7
 80045a8:	f813 3c28 	ldrb.w	r3, [r3, #-40]
 80045ac:	61bb      	str	r3, [r7, #24]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 80045ae:	697b      	ldr	r3, [r7, #20]
 80045b0:	4a0e      	ldr	r2, [pc, #56]	; (80045ec <HAL_RCC_GetSysClockFreq+0xb4>)
 80045b2:	fb03 f202 	mul.w	r2, r3, r2
 80045b6:	69bb      	ldr	r3, [r7, #24]
 80045b8:	fbb2 f3f3 	udiv	r3, r2, r3
 80045bc:	627b      	str	r3, [r7, #36]	; 0x24
 80045be:	e004      	b.n	80045ca <HAL_RCC_GetSysClockFreq+0x92>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 80045c0:	697b      	ldr	r3, [r7, #20]
 80045c2:	4a0b      	ldr	r2, [pc, #44]	; (80045f0 <HAL_RCC_GetSysClockFreq+0xb8>)
 80045c4:	fb02 f303 	mul.w	r3, r2, r3
 80045c8:	627b      	str	r3, [r7, #36]	; 0x24
      }
      sysclockfreq = pllclk;
 80045ca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80045cc:	623b      	str	r3, [r7, #32]
      break;
 80045ce:	e002      	b.n	80045d6 <HAL_RCC_GetSysClockFreq+0x9e>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 80045d0:	4b06      	ldr	r3, [pc, #24]	; (80045ec <HAL_RCC_GetSysClockFreq+0xb4>)
 80045d2:	623b      	str	r3, [r7, #32]
      break;
 80045d4:	bf00      	nop
    }
  }
  return sysclockfreq;
 80045d6:	6a3b      	ldr	r3, [r7, #32]
}
 80045d8:	4618      	mov	r0, r3
 80045da:	3728      	adds	r7, #40	; 0x28
 80045dc:	46bd      	mov	sp, r7
 80045de:	bc90      	pop	{r4, r7}
 80045e0:	4770      	bx	lr
 80045e2:	bf00      	nop
 80045e4:	08009674 	.word	0x08009674
 80045e8:	40021000 	.word	0x40021000
 80045ec:	007a1200 	.word	0x007a1200
 80045f0:	003d0900 	.word	0x003d0900

080045f4 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80045f4:	b480      	push	{r7}
 80045f6:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80045f8:	4b02      	ldr	r3, [pc, #8]	; (8004604 <HAL_RCC_GetHCLKFreq+0x10>)
 80045fa:	681b      	ldr	r3, [r3, #0]
}
 80045fc:	4618      	mov	r0, r3
 80045fe:	46bd      	mov	sp, r7
 8004600:	bc80      	pop	{r7}
 8004602:	4770      	bx	lr
 8004604:	20000000 	.word	0x20000000

08004608 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8004608:	b580      	push	{r7, lr}
 800460a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 800460c:	f7ff fff2 	bl	80045f4 <HAL_RCC_GetHCLKFreq>
 8004610:	4602      	mov	r2, r0
 8004612:	4b05      	ldr	r3, [pc, #20]	; (8004628 <HAL_RCC_GetPCLK1Freq+0x20>)
 8004614:	685b      	ldr	r3, [r3, #4]
 8004616:	0a1b      	lsrs	r3, r3, #8
 8004618:	f003 0307 	and.w	r3, r3, #7
 800461c:	4903      	ldr	r1, [pc, #12]	; (800462c <HAL_RCC_GetPCLK1Freq+0x24>)
 800461e:	5ccb      	ldrb	r3, [r1, r3]
 8004620:	fa22 f303 	lsr.w	r3, r2, r3
}
 8004624:	4618      	mov	r0, r3
 8004626:	bd80      	pop	{r7, pc}
 8004628:	40021000 	.word	0x40021000
 800462c:	08009748 	.word	0x08009748

08004630 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8004630:	b580      	push	{r7, lr}
 8004632:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8004634:	f7ff ffde 	bl	80045f4 <HAL_RCC_GetHCLKFreq>
 8004638:	4602      	mov	r2, r0
 800463a:	4b05      	ldr	r3, [pc, #20]	; (8004650 <HAL_RCC_GetPCLK2Freq+0x20>)
 800463c:	685b      	ldr	r3, [r3, #4]
 800463e:	0adb      	lsrs	r3, r3, #11
 8004640:	f003 0307 	and.w	r3, r3, #7
 8004644:	4903      	ldr	r1, [pc, #12]	; (8004654 <HAL_RCC_GetPCLK2Freq+0x24>)
 8004646:	5ccb      	ldrb	r3, [r1, r3]
 8004648:	fa22 f303 	lsr.w	r3, r2, r3
}
 800464c:	4618      	mov	r0, r3
 800464e:	bd80      	pop	{r7, pc}
 8004650:	40021000 	.word	0x40021000
 8004654:	08009748 	.word	0x08009748

08004658 <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 8004658:	b480      	push	{r7}
 800465a:	b085      	sub	sp, #20
 800465c:	af00      	add	r7, sp, #0
 800465e:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 8004660:	4b0a      	ldr	r3, [pc, #40]	; (800468c <RCC_Delay+0x34>)
 8004662:	681b      	ldr	r3, [r3, #0]
 8004664:	4a0a      	ldr	r2, [pc, #40]	; (8004690 <RCC_Delay+0x38>)
 8004666:	fba2 2303 	umull	r2, r3, r2, r3
 800466a:	0a5b      	lsrs	r3, r3, #9
 800466c:	687a      	ldr	r2, [r7, #4]
 800466e:	fb02 f303 	mul.w	r3, r2, r3
 8004672:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 8004674:	bf00      	nop
  }
  while (Delay --);
 8004676:	68fb      	ldr	r3, [r7, #12]
 8004678:	1e5a      	subs	r2, r3, #1
 800467a:	60fa      	str	r2, [r7, #12]
 800467c:	2b00      	cmp	r3, #0
 800467e:	d1f9      	bne.n	8004674 <RCC_Delay+0x1c>
}
 8004680:	bf00      	nop
 8004682:	bf00      	nop
 8004684:	3714      	adds	r7, #20
 8004686:	46bd      	mov	sp, r7
 8004688:	bc80      	pop	{r7}
 800468a:	4770      	bx	lr
 800468c:	20000000 	.word	0x20000000
 8004690:	10624dd3 	.word	0x10624dd3

08004694 <HAL_RCCEx_PeriphCLKConfig>:
  *         manually disable it.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8004694:	b580      	push	{r7, lr}
 8004696:	b086      	sub	sp, #24
 8004698:	af00      	add	r7, sp, #0
 800469a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U, temp_reg = 0U;
 800469c:	2300      	movs	r3, #0
 800469e:	613b      	str	r3, [r7, #16]
 80046a0:	2300      	movs	r3, #0
 80046a2:	60fb      	str	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*------------------------------- RTC/LCD Configuration ------------------------*/
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC))
 80046a4:	687b      	ldr	r3, [r7, #4]
 80046a6:	681b      	ldr	r3, [r3, #0]
 80046a8:	f003 0301 	and.w	r3, r3, #1
 80046ac:	2b00      	cmp	r3, #0
 80046ae:	d07d      	beq.n	80047ac <HAL_RCCEx_PeriphCLKConfig+0x118>
  {
    FlagStatus pwrclkchanged = RESET;
 80046b0:	2300      	movs	r3, #0
 80046b2:	75fb      	strb	r3, [r7, #23]
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* As soon as function is called to change RTC clock source, activation of the
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 80046b4:	4b4f      	ldr	r3, [pc, #316]	; (80047f4 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80046b6:	69db      	ldr	r3, [r3, #28]
 80046b8:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80046bc:	2b00      	cmp	r3, #0
 80046be:	d10d      	bne.n	80046dc <HAL_RCCEx_PeriphCLKConfig+0x48>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80046c0:	4b4c      	ldr	r3, [pc, #304]	; (80047f4 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80046c2:	69db      	ldr	r3, [r3, #28]
 80046c4:	4a4b      	ldr	r2, [pc, #300]	; (80047f4 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80046c6:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80046ca:	61d3      	str	r3, [r2, #28]
 80046cc:	4b49      	ldr	r3, [pc, #292]	; (80047f4 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80046ce:	69db      	ldr	r3, [r3, #28]
 80046d0:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80046d4:	60bb      	str	r3, [r7, #8]
 80046d6:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80046d8:	2301      	movs	r3, #1
 80046da:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80046dc:	4b46      	ldr	r3, [pc, #280]	; (80047f8 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 80046de:	681b      	ldr	r3, [r3, #0]
 80046e0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80046e4:	2b00      	cmp	r3, #0
 80046e6:	d118      	bne.n	800471a <HAL_RCCEx_PeriphCLKConfig+0x86>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80046e8:	4b43      	ldr	r3, [pc, #268]	; (80047f8 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 80046ea:	681b      	ldr	r3, [r3, #0]
 80046ec:	4a42      	ldr	r2, [pc, #264]	; (80047f8 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 80046ee:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80046f2:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80046f4:	f7fe fcfa 	bl	80030ec <HAL_GetTick>
 80046f8:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80046fa:	e008      	b.n	800470e <HAL_RCCEx_PeriphCLKConfig+0x7a>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80046fc:	f7fe fcf6 	bl	80030ec <HAL_GetTick>
 8004700:	4602      	mov	r2, r0
 8004702:	693b      	ldr	r3, [r7, #16]
 8004704:	1ad3      	subs	r3, r2, r3
 8004706:	2b64      	cmp	r3, #100	; 0x64
 8004708:	d901      	bls.n	800470e <HAL_RCCEx_PeriphCLKConfig+0x7a>
        {
          return HAL_TIMEOUT;
 800470a:	2303      	movs	r3, #3
 800470c:	e06d      	b.n	80047ea <HAL_RCCEx_PeriphCLKConfig+0x156>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800470e:	4b3a      	ldr	r3, [pc, #232]	; (80047f8 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8004710:	681b      	ldr	r3, [r3, #0]
 8004712:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004716:	2b00      	cmp	r3, #0
 8004718:	d0f0      	beq.n	80046fc <HAL_RCCEx_PeriphCLKConfig+0x68>
        }
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    temp_reg = (RCC->BDCR & RCC_BDCR_RTCSEL);
 800471a:	4b36      	ldr	r3, [pc, #216]	; (80047f4 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800471c:	6a1b      	ldr	r3, [r3, #32]
 800471e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004722:	60fb      	str	r3, [r7, #12]
    if ((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8004724:	68fb      	ldr	r3, [r7, #12]
 8004726:	2b00      	cmp	r3, #0
 8004728:	d02e      	beq.n	8004788 <HAL_RCCEx_PeriphCLKConfig+0xf4>
 800472a:	687b      	ldr	r3, [r7, #4]
 800472c:	685b      	ldr	r3, [r3, #4]
 800472e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004732:	68fa      	ldr	r2, [r7, #12]
 8004734:	429a      	cmp	r2, r3
 8004736:	d027      	beq.n	8004788 <HAL_RCCEx_PeriphCLKConfig+0xf4>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8004738:	4b2e      	ldr	r3, [pc, #184]	; (80047f4 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800473a:	6a1b      	ldr	r3, [r3, #32]
 800473c:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004740:	60fb      	str	r3, [r7, #12]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8004742:	4b2e      	ldr	r3, [pc, #184]	; (80047fc <HAL_RCCEx_PeriphCLKConfig+0x168>)
 8004744:	2201      	movs	r2, #1
 8004746:	601a      	str	r2, [r3, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 8004748:	4b2c      	ldr	r3, [pc, #176]	; (80047fc <HAL_RCCEx_PeriphCLKConfig+0x168>)
 800474a:	2200      	movs	r2, #0
 800474c:	601a      	str	r2, [r3, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = temp_reg;
 800474e:	4a29      	ldr	r2, [pc, #164]	; (80047f4 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8004750:	68fb      	ldr	r3, [r7, #12]
 8004752:	6213      	str	r3, [r2, #32]

      /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 8004754:	68fb      	ldr	r3, [r7, #12]
 8004756:	f003 0301 	and.w	r3, r3, #1
 800475a:	2b00      	cmp	r3, #0
 800475c:	d014      	beq.n	8004788 <HAL_RCCEx_PeriphCLKConfig+0xf4>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800475e:	f7fe fcc5 	bl	80030ec <HAL_GetTick>
 8004762:	6138      	str	r0, [r7, #16]

        /* Wait till LSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004764:	e00a      	b.n	800477c <HAL_RCCEx_PeriphCLKConfig+0xe8>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004766:	f7fe fcc1 	bl	80030ec <HAL_GetTick>
 800476a:	4602      	mov	r2, r0
 800476c:	693b      	ldr	r3, [r7, #16]
 800476e:	1ad3      	subs	r3, r2, r3
 8004770:	f241 3288 	movw	r2, #5000	; 0x1388
 8004774:	4293      	cmp	r3, r2
 8004776:	d901      	bls.n	800477c <HAL_RCCEx_PeriphCLKConfig+0xe8>
          {
            return HAL_TIMEOUT;
 8004778:	2303      	movs	r3, #3
 800477a:	e036      	b.n	80047ea <HAL_RCCEx_PeriphCLKConfig+0x156>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800477c:	4b1d      	ldr	r3, [pc, #116]	; (80047f4 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800477e:	6a1b      	ldr	r3, [r3, #32]
 8004780:	f003 0302 	and.w	r3, r3, #2
 8004784:	2b00      	cmp	r3, #0
 8004786:	d0ee      	beq.n	8004766 <HAL_RCCEx_PeriphCLKConfig+0xd2>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8004788:	4b1a      	ldr	r3, [pc, #104]	; (80047f4 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800478a:	6a1b      	ldr	r3, [r3, #32]
 800478c:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8004790:	687b      	ldr	r3, [r7, #4]
 8004792:	685b      	ldr	r3, [r3, #4]
 8004794:	4917      	ldr	r1, [pc, #92]	; (80047f4 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8004796:	4313      	orrs	r3, r2
 8004798:	620b      	str	r3, [r1, #32]

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 800479a:	7dfb      	ldrb	r3, [r7, #23]
 800479c:	2b01      	cmp	r3, #1
 800479e:	d105      	bne.n	80047ac <HAL_RCCEx_PeriphCLKConfig+0x118>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80047a0:	4b14      	ldr	r3, [pc, #80]	; (80047f4 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80047a2:	69db      	ldr	r3, [r3, #28]
 80047a4:	4a13      	ldr	r2, [pc, #76]	; (80047f4 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80047a6:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80047aa:	61d3      	str	r3, [r2, #28]
    }
  }

  /*------------------------------ ADC clock Configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 80047ac:	687b      	ldr	r3, [r7, #4]
 80047ae:	681b      	ldr	r3, [r3, #0]
 80047b0:	f003 0302 	and.w	r3, r3, #2
 80047b4:	2b00      	cmp	r3, #0
 80047b6:	d008      	beq.n	80047ca <HAL_RCCEx_PeriphCLKConfig+0x136>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCPLLCLK_DIV(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 80047b8:	4b0e      	ldr	r3, [pc, #56]	; (80047f4 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80047ba:	685b      	ldr	r3, [r3, #4]
 80047bc:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 80047c0:	687b      	ldr	r3, [r7, #4]
 80047c2:	689b      	ldr	r3, [r3, #8]
 80047c4:	490b      	ldr	r1, [pc, #44]	; (80047f4 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80047c6:	4313      	orrs	r3, r2
 80047c8:	604b      	str	r3, [r1, #4]

#if defined(STM32F102x6) || defined(STM32F102xB) || defined(STM32F103x6)\
 || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG)\
 || defined(STM32F105xC) || defined(STM32F107xC)
  /*------------------------------ USB clock Configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 80047ca:	687b      	ldr	r3, [r7, #4]
 80047cc:	681b      	ldr	r3, [r3, #0]
 80047ce:	f003 0310 	and.w	r3, r3, #16
 80047d2:	2b00      	cmp	r3, #0
 80047d4:	d008      	beq.n	80047e8 <HAL_RCCEx_PeriphCLKConfig+0x154>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USBPLLCLK_DIV(PeriphClkInit->UsbClockSelection));

    /* Configure the USB clock source */
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 80047d6:	4b07      	ldr	r3, [pc, #28]	; (80047f4 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80047d8:	685b      	ldr	r3, [r3, #4]
 80047da:	f423 0280 	bic.w	r2, r3, #4194304	; 0x400000
 80047de:	687b      	ldr	r3, [r7, #4]
 80047e0:	68db      	ldr	r3, [r3, #12]
 80047e2:	4904      	ldr	r1, [pc, #16]	; (80047f4 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80047e4:	4313      	orrs	r3, r2
 80047e6:	604b      	str	r3, [r1, #4]
  }
#endif /* STM32F102x6 || STM32F102xB || STM32F103x6 || STM32F103xB || STM32F103xE || STM32F103xG || STM32F105xC || STM32F107xC */

  return HAL_OK;
 80047e8:	2300      	movs	r3, #0
}
 80047ea:	4618      	mov	r0, r3
 80047ec:	3718      	adds	r7, #24
 80047ee:	46bd      	mov	sp, r7
 80047f0:	bd80      	pop	{r7, pc}
 80047f2:	bf00      	nop
 80047f4:	40021000 	.word	0x40021000
 80047f8:	40007000 	.word	0x40007000
 80047fc:	42420440 	.word	0x42420440

08004800 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8004800:	b580      	push	{r7, lr}
 8004802:	b082      	sub	sp, #8
 8004804:	af00      	add	r7, sp, #0
 8004806:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8004808:	687b      	ldr	r3, [r7, #4]
 800480a:	2b00      	cmp	r3, #0
 800480c:	d101      	bne.n	8004812 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 800480e:	2301      	movs	r3, #1
 8004810:	e076      	b.n	8004900 <HAL_SPI_Init+0x100>
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  /* TI mode is not supported on this device.
     TIMode parameter is mandatory equal to SPI_TIMODE_DISABLE */
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8004812:	687b      	ldr	r3, [r7, #4]
 8004814:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004816:	2b00      	cmp	r3, #0
 8004818:	d108      	bne.n	800482c <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 800481a:	687b      	ldr	r3, [r7, #4]
 800481c:	685b      	ldr	r3, [r3, #4]
 800481e:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8004822:	d009      	beq.n	8004838 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8004824:	687b      	ldr	r3, [r7, #4]
 8004826:	2200      	movs	r2, #0
 8004828:	61da      	str	r2, [r3, #28]
 800482a:	e005      	b.n	8004838 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 800482c:	687b      	ldr	r3, [r7, #4]
 800482e:	2200      	movs	r2, #0
 8004830:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8004832:	687b      	ldr	r3, [r7, #4]
 8004834:	2200      	movs	r2, #0
 8004836:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8004838:	687b      	ldr	r3, [r7, #4]
 800483a:	2200      	movs	r2, #0
 800483c:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 800483e:	687b      	ldr	r3, [r7, #4]
 8004840:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8004844:	b2db      	uxtb	r3, r3
 8004846:	2b00      	cmp	r3, #0
 8004848:	d106      	bne.n	8004858 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 800484a:	687b      	ldr	r3, [r7, #4]
 800484c:	2200      	movs	r2, #0
 800484e:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8004852:	6878      	ldr	r0, [r7, #4]
 8004854:	f7fe fab0 	bl	8002db8 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8004858:	687b      	ldr	r3, [r7, #4]
 800485a:	2202      	movs	r2, #2
 800485c:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8004860:	687b      	ldr	r3, [r7, #4]
 8004862:	681b      	ldr	r3, [r3, #0]
 8004864:	681a      	ldr	r2, [r3, #0]
 8004866:	687b      	ldr	r3, [r7, #4]
 8004868:	681b      	ldr	r3, [r3, #0]
 800486a:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800486e:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8004870:	687b      	ldr	r3, [r7, #4]
 8004872:	685b      	ldr	r3, [r3, #4]
 8004874:	f403 7282 	and.w	r2, r3, #260	; 0x104
 8004878:	687b      	ldr	r3, [r7, #4]
 800487a:	689b      	ldr	r3, [r3, #8]
 800487c:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 8004880:	431a      	orrs	r2, r3
 8004882:	687b      	ldr	r3, [r7, #4]
 8004884:	68db      	ldr	r3, [r3, #12]
 8004886:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800488a:	431a      	orrs	r2, r3
 800488c:	687b      	ldr	r3, [r7, #4]
 800488e:	691b      	ldr	r3, [r3, #16]
 8004890:	f003 0302 	and.w	r3, r3, #2
 8004894:	431a      	orrs	r2, r3
 8004896:	687b      	ldr	r3, [r7, #4]
 8004898:	695b      	ldr	r3, [r3, #20]
 800489a:	f003 0301 	and.w	r3, r3, #1
 800489e:	431a      	orrs	r2, r3
 80048a0:	687b      	ldr	r3, [r7, #4]
 80048a2:	699b      	ldr	r3, [r3, #24]
 80048a4:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80048a8:	431a      	orrs	r2, r3
 80048aa:	687b      	ldr	r3, [r7, #4]
 80048ac:	69db      	ldr	r3, [r3, #28]
 80048ae:	f003 0338 	and.w	r3, r3, #56	; 0x38
 80048b2:	431a      	orrs	r2, r3
 80048b4:	687b      	ldr	r3, [r7, #4]
 80048b6:	6a1b      	ldr	r3, [r3, #32]
 80048b8:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80048bc:	ea42 0103 	orr.w	r1, r2, r3
 80048c0:	687b      	ldr	r3, [r7, #4]
 80048c2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80048c4:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 80048c8:	687b      	ldr	r3, [r7, #4]
 80048ca:	681b      	ldr	r3, [r3, #0]
 80048cc:	430a      	orrs	r2, r1
 80048ce:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management */
  WRITE_REG(hspi->Instance->CR2, ((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE));
 80048d0:	687b      	ldr	r3, [r7, #4]
 80048d2:	699b      	ldr	r3, [r3, #24]
 80048d4:	0c1a      	lsrs	r2, r3, #16
 80048d6:	687b      	ldr	r3, [r7, #4]
 80048d8:	681b      	ldr	r3, [r3, #0]
 80048da:	f002 0204 	and.w	r2, r2, #4
 80048de:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 80048e0:	687b      	ldr	r3, [r7, #4]
 80048e2:	681b      	ldr	r3, [r3, #0]
 80048e4:	69da      	ldr	r2, [r3, #28]
 80048e6:	687b      	ldr	r3, [r7, #4]
 80048e8:	681b      	ldr	r3, [r3, #0]
 80048ea:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80048ee:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 80048f0:	687b      	ldr	r3, [r7, #4]
 80048f2:	2200      	movs	r2, #0
 80048f4:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 80048f6:	687b      	ldr	r3, [r7, #4]
 80048f8:	2201      	movs	r2, #1
 80048fa:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  return HAL_OK;
 80048fe:	2300      	movs	r3, #0
}
 8004900:	4618      	mov	r0, r3
 8004902:	3708      	adds	r7, #8
 8004904:	46bd      	mov	sp, r7
 8004906:	bd80      	pop	{r7, pc}

08004908 <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8004908:	b580      	push	{r7, lr}
 800490a:	b088      	sub	sp, #32
 800490c:	af00      	add	r7, sp, #0
 800490e:	60f8      	str	r0, [r7, #12]
 8004910:	60b9      	str	r1, [r7, #8]
 8004912:	603b      	str	r3, [r7, #0]
 8004914:	4613      	mov	r3, r2
 8004916:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 8004918:	2300      	movs	r3, #0
 800491a:	77fb      	strb	r3, [r7, #31]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 800491c:	68fb      	ldr	r3, [r7, #12]
 800491e:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8004922:	2b01      	cmp	r3, #1
 8004924:	d101      	bne.n	800492a <HAL_SPI_Transmit+0x22>
 8004926:	2302      	movs	r3, #2
 8004928:	e126      	b.n	8004b78 <HAL_SPI_Transmit+0x270>
 800492a:	68fb      	ldr	r3, [r7, #12]
 800492c:	2201      	movs	r2, #1
 800492e:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8004932:	f7fe fbdb 	bl	80030ec <HAL_GetTick>
 8004936:	61b8      	str	r0, [r7, #24]
  initial_TxXferCount = Size;
 8004938:	88fb      	ldrh	r3, [r7, #6]
 800493a:	82fb      	strh	r3, [r7, #22]

  if (hspi->State != HAL_SPI_STATE_READY)
 800493c:	68fb      	ldr	r3, [r7, #12]
 800493e:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8004942:	b2db      	uxtb	r3, r3
 8004944:	2b01      	cmp	r3, #1
 8004946:	d002      	beq.n	800494e <HAL_SPI_Transmit+0x46>
  {
    errorcode = HAL_BUSY;
 8004948:	2302      	movs	r3, #2
 800494a:	77fb      	strb	r3, [r7, #31]
    goto error;
 800494c:	e10b      	b.n	8004b66 <HAL_SPI_Transmit+0x25e>
  }

  if ((pData == NULL) || (Size == 0U))
 800494e:	68bb      	ldr	r3, [r7, #8]
 8004950:	2b00      	cmp	r3, #0
 8004952:	d002      	beq.n	800495a <HAL_SPI_Transmit+0x52>
 8004954:	88fb      	ldrh	r3, [r7, #6]
 8004956:	2b00      	cmp	r3, #0
 8004958:	d102      	bne.n	8004960 <HAL_SPI_Transmit+0x58>
  {
    errorcode = HAL_ERROR;
 800495a:	2301      	movs	r3, #1
 800495c:	77fb      	strb	r3, [r7, #31]
    goto error;
 800495e:	e102      	b.n	8004b66 <HAL_SPI_Transmit+0x25e>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 8004960:	68fb      	ldr	r3, [r7, #12]
 8004962:	2203      	movs	r2, #3
 8004964:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8004968:	68fb      	ldr	r3, [r7, #12]
 800496a:	2200      	movs	r2, #0
 800496c:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 800496e:	68fb      	ldr	r3, [r7, #12]
 8004970:	68ba      	ldr	r2, [r7, #8]
 8004972:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferSize  = Size;
 8004974:	68fb      	ldr	r3, [r7, #12]
 8004976:	88fa      	ldrh	r2, [r7, #6]
 8004978:	869a      	strh	r2, [r3, #52]	; 0x34
  hspi->TxXferCount = Size;
 800497a:	68fb      	ldr	r3, [r7, #12]
 800497c:	88fa      	ldrh	r2, [r7, #6]
 800497e:	86da      	strh	r2, [r3, #54]	; 0x36

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 8004980:	68fb      	ldr	r3, [r7, #12]
 8004982:	2200      	movs	r2, #0
 8004984:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferSize  = 0U;
 8004986:	68fb      	ldr	r3, [r7, #12]
 8004988:	2200      	movs	r2, #0
 800498a:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->RxXferCount = 0U;
 800498c:	68fb      	ldr	r3, [r7, #12]
 800498e:	2200      	movs	r2, #0
 8004990:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->TxISR       = NULL;
 8004992:	68fb      	ldr	r3, [r7, #12]
 8004994:	2200      	movs	r2, #0
 8004996:	645a      	str	r2, [r3, #68]	; 0x44
  hspi->RxISR       = NULL;
 8004998:	68fb      	ldr	r3, [r7, #12]
 800499a:	2200      	movs	r2, #0
 800499c:	641a      	str	r2, [r3, #64]	; 0x40

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800499e:	68fb      	ldr	r3, [r7, #12]
 80049a0:	689b      	ldr	r3, [r3, #8]
 80049a2:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80049a6:	d10f      	bne.n	80049c8 <HAL_SPI_Transmit+0xc0>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 80049a8:	68fb      	ldr	r3, [r7, #12]
 80049aa:	681b      	ldr	r3, [r3, #0]
 80049ac:	681a      	ldr	r2, [r3, #0]
 80049ae:	68fb      	ldr	r3, [r7, #12]
 80049b0:	681b      	ldr	r3, [r3, #0]
 80049b2:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80049b6:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 80049b8:	68fb      	ldr	r3, [r7, #12]
 80049ba:	681b      	ldr	r3, [r3, #0]
 80049bc:	681a      	ldr	r2, [r3, #0]
 80049be:	68fb      	ldr	r3, [r7, #12]
 80049c0:	681b      	ldr	r3, [r3, #0]
 80049c2:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 80049c6:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 80049c8:	68fb      	ldr	r3, [r7, #12]
 80049ca:	681b      	ldr	r3, [r3, #0]
 80049cc:	681b      	ldr	r3, [r3, #0]
 80049ce:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80049d2:	2b40      	cmp	r3, #64	; 0x40
 80049d4:	d007      	beq.n	80049e6 <HAL_SPI_Transmit+0xde>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 80049d6:	68fb      	ldr	r3, [r7, #12]
 80049d8:	681b      	ldr	r3, [r3, #0]
 80049da:	681a      	ldr	r2, [r3, #0]
 80049dc:	68fb      	ldr	r3, [r7, #12]
 80049de:	681b      	ldr	r3, [r3, #0]
 80049e0:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80049e4:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 80049e6:	68fb      	ldr	r3, [r7, #12]
 80049e8:	68db      	ldr	r3, [r3, #12]
 80049ea:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80049ee:	d14b      	bne.n	8004a88 <HAL_SPI_Transmit+0x180>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 80049f0:	68fb      	ldr	r3, [r7, #12]
 80049f2:	685b      	ldr	r3, [r3, #4]
 80049f4:	2b00      	cmp	r3, #0
 80049f6:	d002      	beq.n	80049fe <HAL_SPI_Transmit+0xf6>
 80049f8:	8afb      	ldrh	r3, [r7, #22]
 80049fa:	2b01      	cmp	r3, #1
 80049fc:	d13e      	bne.n	8004a7c <HAL_SPI_Transmit+0x174>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80049fe:	68fb      	ldr	r3, [r7, #12]
 8004a00:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004a02:	881a      	ldrh	r2, [r3, #0]
 8004a04:	68fb      	ldr	r3, [r7, #12]
 8004a06:	681b      	ldr	r3, [r3, #0]
 8004a08:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8004a0a:	68fb      	ldr	r3, [r7, #12]
 8004a0c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004a0e:	1c9a      	adds	r2, r3, #2
 8004a10:	68fb      	ldr	r3, [r7, #12]
 8004a12:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8004a14:	68fb      	ldr	r3, [r7, #12]
 8004a16:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8004a18:	b29b      	uxth	r3, r3
 8004a1a:	3b01      	subs	r3, #1
 8004a1c:	b29a      	uxth	r2, r3
 8004a1e:	68fb      	ldr	r3, [r7, #12]
 8004a20:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 8004a22:	e02b      	b.n	8004a7c <HAL_SPI_Transmit+0x174>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8004a24:	68fb      	ldr	r3, [r7, #12]
 8004a26:	681b      	ldr	r3, [r3, #0]
 8004a28:	689b      	ldr	r3, [r3, #8]
 8004a2a:	f003 0302 	and.w	r3, r3, #2
 8004a2e:	2b02      	cmp	r3, #2
 8004a30:	d112      	bne.n	8004a58 <HAL_SPI_Transmit+0x150>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8004a32:	68fb      	ldr	r3, [r7, #12]
 8004a34:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004a36:	881a      	ldrh	r2, [r3, #0]
 8004a38:	68fb      	ldr	r3, [r7, #12]
 8004a3a:	681b      	ldr	r3, [r3, #0]
 8004a3c:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8004a3e:	68fb      	ldr	r3, [r7, #12]
 8004a40:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004a42:	1c9a      	adds	r2, r3, #2
 8004a44:	68fb      	ldr	r3, [r7, #12]
 8004a46:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8004a48:	68fb      	ldr	r3, [r7, #12]
 8004a4a:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8004a4c:	b29b      	uxth	r3, r3
 8004a4e:	3b01      	subs	r3, #1
 8004a50:	b29a      	uxth	r2, r3
 8004a52:	68fb      	ldr	r3, [r7, #12]
 8004a54:	86da      	strh	r2, [r3, #54]	; 0x36
 8004a56:	e011      	b.n	8004a7c <HAL_SPI_Transmit+0x174>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8004a58:	f7fe fb48 	bl	80030ec <HAL_GetTick>
 8004a5c:	4602      	mov	r2, r0
 8004a5e:	69bb      	ldr	r3, [r7, #24]
 8004a60:	1ad3      	subs	r3, r2, r3
 8004a62:	683a      	ldr	r2, [r7, #0]
 8004a64:	429a      	cmp	r2, r3
 8004a66:	d803      	bhi.n	8004a70 <HAL_SPI_Transmit+0x168>
 8004a68:	683b      	ldr	r3, [r7, #0]
 8004a6a:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004a6e:	d102      	bne.n	8004a76 <HAL_SPI_Transmit+0x16e>
 8004a70:	683b      	ldr	r3, [r7, #0]
 8004a72:	2b00      	cmp	r3, #0
 8004a74:	d102      	bne.n	8004a7c <HAL_SPI_Transmit+0x174>
        {
          errorcode = HAL_TIMEOUT;
 8004a76:	2303      	movs	r3, #3
 8004a78:	77fb      	strb	r3, [r7, #31]
          goto error;
 8004a7a:	e074      	b.n	8004b66 <HAL_SPI_Transmit+0x25e>
    while (hspi->TxXferCount > 0U)
 8004a7c:	68fb      	ldr	r3, [r7, #12]
 8004a7e:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8004a80:	b29b      	uxth	r3, r3
 8004a82:	2b00      	cmp	r3, #0
 8004a84:	d1ce      	bne.n	8004a24 <HAL_SPI_Transmit+0x11c>
 8004a86:	e04c      	b.n	8004b22 <HAL_SPI_Transmit+0x21a>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8004a88:	68fb      	ldr	r3, [r7, #12]
 8004a8a:	685b      	ldr	r3, [r3, #4]
 8004a8c:	2b00      	cmp	r3, #0
 8004a8e:	d002      	beq.n	8004a96 <HAL_SPI_Transmit+0x18e>
 8004a90:	8afb      	ldrh	r3, [r7, #22]
 8004a92:	2b01      	cmp	r3, #1
 8004a94:	d140      	bne.n	8004b18 <HAL_SPI_Transmit+0x210>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8004a96:	68fb      	ldr	r3, [r7, #12]
 8004a98:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8004a9a:	68fb      	ldr	r3, [r7, #12]
 8004a9c:	681b      	ldr	r3, [r3, #0]
 8004a9e:	330c      	adds	r3, #12
 8004aa0:	7812      	ldrb	r2, [r2, #0]
 8004aa2:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 8004aa4:	68fb      	ldr	r3, [r7, #12]
 8004aa6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004aa8:	1c5a      	adds	r2, r3, #1
 8004aaa:	68fb      	ldr	r3, [r7, #12]
 8004aac:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8004aae:	68fb      	ldr	r3, [r7, #12]
 8004ab0:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8004ab2:	b29b      	uxth	r3, r3
 8004ab4:	3b01      	subs	r3, #1
 8004ab6:	b29a      	uxth	r2, r3
 8004ab8:	68fb      	ldr	r3, [r7, #12]
 8004aba:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while (hspi->TxXferCount > 0U)
 8004abc:	e02c      	b.n	8004b18 <HAL_SPI_Transmit+0x210>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8004abe:	68fb      	ldr	r3, [r7, #12]
 8004ac0:	681b      	ldr	r3, [r3, #0]
 8004ac2:	689b      	ldr	r3, [r3, #8]
 8004ac4:	f003 0302 	and.w	r3, r3, #2
 8004ac8:	2b02      	cmp	r3, #2
 8004aca:	d113      	bne.n	8004af4 <HAL_SPI_Transmit+0x1ec>
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8004acc:	68fb      	ldr	r3, [r7, #12]
 8004ace:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8004ad0:	68fb      	ldr	r3, [r7, #12]
 8004ad2:	681b      	ldr	r3, [r3, #0]
 8004ad4:	330c      	adds	r3, #12
 8004ad6:	7812      	ldrb	r2, [r2, #0]
 8004ad8:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr += sizeof(uint8_t);
 8004ada:	68fb      	ldr	r3, [r7, #12]
 8004adc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004ade:	1c5a      	adds	r2, r3, #1
 8004ae0:	68fb      	ldr	r3, [r7, #12]
 8004ae2:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8004ae4:	68fb      	ldr	r3, [r7, #12]
 8004ae6:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8004ae8:	b29b      	uxth	r3, r3
 8004aea:	3b01      	subs	r3, #1
 8004aec:	b29a      	uxth	r2, r3
 8004aee:	68fb      	ldr	r3, [r7, #12]
 8004af0:	86da      	strh	r2, [r3, #54]	; 0x36
 8004af2:	e011      	b.n	8004b18 <HAL_SPI_Transmit+0x210>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8004af4:	f7fe fafa 	bl	80030ec <HAL_GetTick>
 8004af8:	4602      	mov	r2, r0
 8004afa:	69bb      	ldr	r3, [r7, #24]
 8004afc:	1ad3      	subs	r3, r2, r3
 8004afe:	683a      	ldr	r2, [r7, #0]
 8004b00:	429a      	cmp	r2, r3
 8004b02:	d803      	bhi.n	8004b0c <HAL_SPI_Transmit+0x204>
 8004b04:	683b      	ldr	r3, [r7, #0]
 8004b06:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004b0a:	d102      	bne.n	8004b12 <HAL_SPI_Transmit+0x20a>
 8004b0c:	683b      	ldr	r3, [r7, #0]
 8004b0e:	2b00      	cmp	r3, #0
 8004b10:	d102      	bne.n	8004b18 <HAL_SPI_Transmit+0x210>
        {
          errorcode = HAL_TIMEOUT;
 8004b12:	2303      	movs	r3, #3
 8004b14:	77fb      	strb	r3, [r7, #31]
          goto error;
 8004b16:	e026      	b.n	8004b66 <HAL_SPI_Transmit+0x25e>
    while (hspi->TxXferCount > 0U)
 8004b18:	68fb      	ldr	r3, [r7, #12]
 8004b1a:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8004b1c:	b29b      	uxth	r3, r3
 8004b1e:	2b00      	cmp	r3, #0
 8004b20:	d1cd      	bne.n	8004abe <HAL_SPI_Transmit+0x1b6>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8004b22:	69ba      	ldr	r2, [r7, #24]
 8004b24:	6839      	ldr	r1, [r7, #0]
 8004b26:	68f8      	ldr	r0, [r7, #12]
 8004b28:	f000 fbb8 	bl	800529c <SPI_EndRxTxTransaction>
 8004b2c:	4603      	mov	r3, r0
 8004b2e:	2b00      	cmp	r3, #0
 8004b30:	d002      	beq.n	8004b38 <HAL_SPI_Transmit+0x230>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8004b32:	68fb      	ldr	r3, [r7, #12]
 8004b34:	2220      	movs	r2, #32
 8004b36:	655a      	str	r2, [r3, #84]	; 0x54
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8004b38:	68fb      	ldr	r3, [r7, #12]
 8004b3a:	689b      	ldr	r3, [r3, #8]
 8004b3c:	2b00      	cmp	r3, #0
 8004b3e:	d10a      	bne.n	8004b56 <HAL_SPI_Transmit+0x24e>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8004b40:	2300      	movs	r3, #0
 8004b42:	613b      	str	r3, [r7, #16]
 8004b44:	68fb      	ldr	r3, [r7, #12]
 8004b46:	681b      	ldr	r3, [r3, #0]
 8004b48:	68db      	ldr	r3, [r3, #12]
 8004b4a:	613b      	str	r3, [r7, #16]
 8004b4c:	68fb      	ldr	r3, [r7, #12]
 8004b4e:	681b      	ldr	r3, [r3, #0]
 8004b50:	689b      	ldr	r3, [r3, #8]
 8004b52:	613b      	str	r3, [r7, #16]
 8004b54:	693b      	ldr	r3, [r7, #16]
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8004b56:	68fb      	ldr	r3, [r7, #12]
 8004b58:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004b5a:	2b00      	cmp	r3, #0
 8004b5c:	d002      	beq.n	8004b64 <HAL_SPI_Transmit+0x25c>
  {
    errorcode = HAL_ERROR;
 8004b5e:	2301      	movs	r3, #1
 8004b60:	77fb      	strb	r3, [r7, #31]
 8004b62:	e000      	b.n	8004b66 <HAL_SPI_Transmit+0x25e>
  }

error:
 8004b64:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 8004b66:	68fb      	ldr	r3, [r7, #12]
 8004b68:	2201      	movs	r2, #1
 8004b6a:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 8004b6e:	68fb      	ldr	r3, [r7, #12]
 8004b70:	2200      	movs	r2, #0
 8004b72:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 8004b76:	7ffb      	ldrb	r3, [r7, #31]
}
 8004b78:	4618      	mov	r0, r3
 8004b7a:	3720      	adds	r7, #32
 8004b7c:	46bd      	mov	sp, r7
 8004b7e:	bd80      	pop	{r7, pc}

08004b80 <HAL_SPI_Receive>:
  * @param  Size amount of data to be received
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Receive(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8004b80:	b580      	push	{r7, lr}
 8004b82:	b088      	sub	sp, #32
 8004b84:	af02      	add	r7, sp, #8
 8004b86:	60f8      	str	r0, [r7, #12]
 8004b88:	60b9      	str	r1, [r7, #8]
 8004b8a:	603b      	str	r3, [r7, #0]
 8004b8c:	4613      	mov	r3, r2
 8004b8e:	80fb      	strh	r3, [r7, #6]
#if (USE_SPI_CRC != 0U)
  __IO uint32_t tmpreg = 0U;
#endif /* USE_SPI_CRC */
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 8004b90:	2300      	movs	r3, #0
 8004b92:	75fb      	strb	r3, [r7, #23]

  if ((hspi->Init.Mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES))
 8004b94:	68fb      	ldr	r3, [r7, #12]
 8004b96:	685b      	ldr	r3, [r3, #4]
 8004b98:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8004b9c:	d112      	bne.n	8004bc4 <HAL_SPI_Receive+0x44>
 8004b9e:	68fb      	ldr	r3, [r7, #12]
 8004ba0:	689b      	ldr	r3, [r3, #8]
 8004ba2:	2b00      	cmp	r3, #0
 8004ba4:	d10e      	bne.n	8004bc4 <HAL_SPI_Receive+0x44>
  {
    hspi->State = HAL_SPI_STATE_BUSY_RX;
 8004ba6:	68fb      	ldr	r3, [r7, #12]
 8004ba8:	2204      	movs	r2, #4
 8004baa:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
    /* Call transmit-receive function to send Dummy data on Tx line and generate clock on CLK line */
    return HAL_SPI_TransmitReceive(hspi, pData, pData, Size, Timeout);
 8004bae:	88fa      	ldrh	r2, [r7, #6]
 8004bb0:	683b      	ldr	r3, [r7, #0]
 8004bb2:	9300      	str	r3, [sp, #0]
 8004bb4:	4613      	mov	r3, r2
 8004bb6:	68ba      	ldr	r2, [r7, #8]
 8004bb8:	68b9      	ldr	r1, [r7, #8]
 8004bba:	68f8      	ldr	r0, [r7, #12]
 8004bbc:	f000 f8f1 	bl	8004da2 <HAL_SPI_TransmitReceive>
 8004bc0:	4603      	mov	r3, r0
 8004bc2:	e0ea      	b.n	8004d9a <HAL_SPI_Receive+0x21a>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 8004bc4:	68fb      	ldr	r3, [r7, #12]
 8004bc6:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8004bca:	2b01      	cmp	r3, #1
 8004bcc:	d101      	bne.n	8004bd2 <HAL_SPI_Receive+0x52>
 8004bce:	2302      	movs	r3, #2
 8004bd0:	e0e3      	b.n	8004d9a <HAL_SPI_Receive+0x21a>
 8004bd2:	68fb      	ldr	r3, [r7, #12]
 8004bd4:	2201      	movs	r2, #1
 8004bd6:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8004bda:	f7fe fa87 	bl	80030ec <HAL_GetTick>
 8004bde:	6138      	str	r0, [r7, #16]

  if (hspi->State != HAL_SPI_STATE_READY)
 8004be0:	68fb      	ldr	r3, [r7, #12]
 8004be2:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8004be6:	b2db      	uxtb	r3, r3
 8004be8:	2b01      	cmp	r3, #1
 8004bea:	d002      	beq.n	8004bf2 <HAL_SPI_Receive+0x72>
  {
    errorcode = HAL_BUSY;
 8004bec:	2302      	movs	r3, #2
 8004bee:	75fb      	strb	r3, [r7, #23]
    goto error;
 8004bf0:	e0ca      	b.n	8004d88 <HAL_SPI_Receive+0x208>
  }

  if ((pData == NULL) || (Size == 0U))
 8004bf2:	68bb      	ldr	r3, [r7, #8]
 8004bf4:	2b00      	cmp	r3, #0
 8004bf6:	d002      	beq.n	8004bfe <HAL_SPI_Receive+0x7e>
 8004bf8:	88fb      	ldrh	r3, [r7, #6]
 8004bfa:	2b00      	cmp	r3, #0
 8004bfc:	d102      	bne.n	8004c04 <HAL_SPI_Receive+0x84>
  {
    errorcode = HAL_ERROR;
 8004bfe:	2301      	movs	r3, #1
 8004c00:	75fb      	strb	r3, [r7, #23]
    goto error;
 8004c02:	e0c1      	b.n	8004d88 <HAL_SPI_Receive+0x208>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_RX;
 8004c04:	68fb      	ldr	r3, [r7, #12]
 8004c06:	2204      	movs	r2, #4
 8004c08:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8004c0c:	68fb      	ldr	r3, [r7, #12]
 8004c0e:	2200      	movs	r2, #0
 8004c10:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pData;
 8004c12:	68fb      	ldr	r3, [r7, #12]
 8004c14:	68ba      	ldr	r2, [r7, #8]
 8004c16:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferSize  = Size;
 8004c18:	68fb      	ldr	r3, [r7, #12]
 8004c1a:	88fa      	ldrh	r2, [r7, #6]
 8004c1c:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->RxXferCount = Size;
 8004c1e:	68fb      	ldr	r3, [r7, #12]
 8004c20:	88fa      	ldrh	r2, [r7, #6]
 8004c22:	87da      	strh	r2, [r3, #62]	; 0x3e

  /*Init field not used in handle to zero */
  hspi->pTxBuffPtr  = (uint8_t *)NULL;
 8004c24:	68fb      	ldr	r3, [r7, #12]
 8004c26:	2200      	movs	r2, #0
 8004c28:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferSize  = 0U;
 8004c2a:	68fb      	ldr	r3, [r7, #12]
 8004c2c:	2200      	movs	r2, #0
 8004c2e:	869a      	strh	r2, [r3, #52]	; 0x34
  hspi->TxXferCount = 0U;
 8004c30:	68fb      	ldr	r3, [r7, #12]
 8004c32:	2200      	movs	r2, #0
 8004c34:	86da      	strh	r2, [r3, #54]	; 0x36
  hspi->RxISR       = NULL;
 8004c36:	68fb      	ldr	r3, [r7, #12]
 8004c38:	2200      	movs	r2, #0
 8004c3a:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->TxISR       = NULL;
 8004c3c:	68fb      	ldr	r3, [r7, #12]
 8004c3e:	2200      	movs	r2, #0
 8004c40:	645a      	str	r2, [r3, #68]	; 0x44
    hspi->RxXferCount--;
  }
#endif /* USE_SPI_CRC */

  /* Configure communication direction: 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8004c42:	68fb      	ldr	r3, [r7, #12]
 8004c44:	689b      	ldr	r3, [r3, #8]
 8004c46:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8004c4a:	d10f      	bne.n	8004c6c <HAL_SPI_Receive+0xec>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 8004c4c:	68fb      	ldr	r3, [r7, #12]
 8004c4e:	681b      	ldr	r3, [r3, #0]
 8004c50:	681a      	ldr	r2, [r3, #0]
 8004c52:	68fb      	ldr	r3, [r7, #12]
 8004c54:	681b      	ldr	r3, [r3, #0]
 8004c56:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8004c5a:	601a      	str	r2, [r3, #0]
    SPI_1LINE_RX(hspi);
 8004c5c:	68fb      	ldr	r3, [r7, #12]
 8004c5e:	681b      	ldr	r3, [r3, #0]
 8004c60:	681a      	ldr	r2, [r3, #0]
 8004c62:	68fb      	ldr	r3, [r7, #12]
 8004c64:	681b      	ldr	r3, [r3, #0]
 8004c66:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 8004c6a:	601a      	str	r2, [r3, #0]
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8004c6c:	68fb      	ldr	r3, [r7, #12]
 8004c6e:	681b      	ldr	r3, [r3, #0]
 8004c70:	681b      	ldr	r3, [r3, #0]
 8004c72:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004c76:	2b40      	cmp	r3, #64	; 0x40
 8004c78:	d007      	beq.n	8004c8a <HAL_SPI_Receive+0x10a>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8004c7a:	68fb      	ldr	r3, [r7, #12]
 8004c7c:	681b      	ldr	r3, [r3, #0]
 8004c7e:	681a      	ldr	r2, [r3, #0]
 8004c80:	68fb      	ldr	r3, [r7, #12]
 8004c82:	681b      	ldr	r3, [r3, #0]
 8004c84:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8004c88:	601a      	str	r2, [r3, #0]
  }

  /* Receive data in 8 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_8BIT)
 8004c8a:	68fb      	ldr	r3, [r7, #12]
 8004c8c:	68db      	ldr	r3, [r3, #12]
 8004c8e:	2b00      	cmp	r3, #0
 8004c90:	d162      	bne.n	8004d58 <HAL_SPI_Receive+0x1d8>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
 8004c92:	e02e      	b.n	8004cf2 <HAL_SPI_Receive+0x172>
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 8004c94:	68fb      	ldr	r3, [r7, #12]
 8004c96:	681b      	ldr	r3, [r3, #0]
 8004c98:	689b      	ldr	r3, [r3, #8]
 8004c9a:	f003 0301 	and.w	r3, r3, #1
 8004c9e:	2b01      	cmp	r3, #1
 8004ca0:	d115      	bne.n	8004cce <HAL_SPI_Receive+0x14e>
      {
        /* read the received data */
        (* (uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 8004ca2:	68fb      	ldr	r3, [r7, #12]
 8004ca4:	681b      	ldr	r3, [r3, #0]
 8004ca6:	f103 020c 	add.w	r2, r3, #12
 8004caa:	68fb      	ldr	r3, [r7, #12]
 8004cac:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004cae:	7812      	ldrb	r2, [r2, #0]
 8004cb0:	b2d2      	uxtb	r2, r2
 8004cb2:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint8_t);
 8004cb4:	68fb      	ldr	r3, [r7, #12]
 8004cb6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004cb8:	1c5a      	adds	r2, r3, #1
 8004cba:	68fb      	ldr	r3, [r7, #12]
 8004cbc:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 8004cbe:	68fb      	ldr	r3, [r7, #12]
 8004cc0:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004cc2:	b29b      	uxth	r3, r3
 8004cc4:	3b01      	subs	r3, #1
 8004cc6:	b29a      	uxth	r2, r3
 8004cc8:	68fb      	ldr	r3, [r7, #12]
 8004cca:	87da      	strh	r2, [r3, #62]	; 0x3e
 8004ccc:	e011      	b.n	8004cf2 <HAL_SPI_Receive+0x172>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8004cce:	f7fe fa0d 	bl	80030ec <HAL_GetTick>
 8004cd2:	4602      	mov	r2, r0
 8004cd4:	693b      	ldr	r3, [r7, #16]
 8004cd6:	1ad3      	subs	r3, r2, r3
 8004cd8:	683a      	ldr	r2, [r7, #0]
 8004cda:	429a      	cmp	r2, r3
 8004cdc:	d803      	bhi.n	8004ce6 <HAL_SPI_Receive+0x166>
 8004cde:	683b      	ldr	r3, [r7, #0]
 8004ce0:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004ce4:	d102      	bne.n	8004cec <HAL_SPI_Receive+0x16c>
 8004ce6:	683b      	ldr	r3, [r7, #0]
 8004ce8:	2b00      	cmp	r3, #0
 8004cea:	d102      	bne.n	8004cf2 <HAL_SPI_Receive+0x172>
        {
          errorcode = HAL_TIMEOUT;
 8004cec:	2303      	movs	r3, #3
 8004cee:	75fb      	strb	r3, [r7, #23]
          goto error;
 8004cf0:	e04a      	b.n	8004d88 <HAL_SPI_Receive+0x208>
    while (hspi->RxXferCount > 0U)
 8004cf2:	68fb      	ldr	r3, [r7, #12]
 8004cf4:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004cf6:	b29b      	uxth	r3, r3
 8004cf8:	2b00      	cmp	r3, #0
 8004cfa:	d1cb      	bne.n	8004c94 <HAL_SPI_Receive+0x114>
 8004cfc:	e031      	b.n	8004d62 <HAL_SPI_Receive+0x1e2>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 8004cfe:	68fb      	ldr	r3, [r7, #12]
 8004d00:	681b      	ldr	r3, [r3, #0]
 8004d02:	689b      	ldr	r3, [r3, #8]
 8004d04:	f003 0301 	and.w	r3, r3, #1
 8004d08:	2b01      	cmp	r3, #1
 8004d0a:	d113      	bne.n	8004d34 <HAL_SPI_Receive+0x1b4>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8004d0c:	68fb      	ldr	r3, [r7, #12]
 8004d0e:	681b      	ldr	r3, [r3, #0]
 8004d10:	68da      	ldr	r2, [r3, #12]
 8004d12:	68fb      	ldr	r3, [r7, #12]
 8004d14:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004d16:	b292      	uxth	r2, r2
 8004d18:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8004d1a:	68fb      	ldr	r3, [r7, #12]
 8004d1c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004d1e:	1c9a      	adds	r2, r3, #2
 8004d20:	68fb      	ldr	r3, [r7, #12]
 8004d22:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 8004d24:	68fb      	ldr	r3, [r7, #12]
 8004d26:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004d28:	b29b      	uxth	r3, r3
 8004d2a:	3b01      	subs	r3, #1
 8004d2c:	b29a      	uxth	r2, r3
 8004d2e:	68fb      	ldr	r3, [r7, #12]
 8004d30:	87da      	strh	r2, [r3, #62]	; 0x3e
 8004d32:	e011      	b.n	8004d58 <HAL_SPI_Receive+0x1d8>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8004d34:	f7fe f9da 	bl	80030ec <HAL_GetTick>
 8004d38:	4602      	mov	r2, r0
 8004d3a:	693b      	ldr	r3, [r7, #16]
 8004d3c:	1ad3      	subs	r3, r2, r3
 8004d3e:	683a      	ldr	r2, [r7, #0]
 8004d40:	429a      	cmp	r2, r3
 8004d42:	d803      	bhi.n	8004d4c <HAL_SPI_Receive+0x1cc>
 8004d44:	683b      	ldr	r3, [r7, #0]
 8004d46:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004d4a:	d102      	bne.n	8004d52 <HAL_SPI_Receive+0x1d2>
 8004d4c:	683b      	ldr	r3, [r7, #0]
 8004d4e:	2b00      	cmp	r3, #0
 8004d50:	d102      	bne.n	8004d58 <HAL_SPI_Receive+0x1d8>
        {
          errorcode = HAL_TIMEOUT;
 8004d52:	2303      	movs	r3, #3
 8004d54:	75fb      	strb	r3, [r7, #23]
          goto error;
 8004d56:	e017      	b.n	8004d88 <HAL_SPI_Receive+0x208>
    while (hspi->RxXferCount > 0U)
 8004d58:	68fb      	ldr	r3, [r7, #12]
 8004d5a:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004d5c:	b29b      	uxth	r3, r3
 8004d5e:	2b00      	cmp	r3, #0
 8004d60:	d1cd      	bne.n	8004cfe <HAL_SPI_Receive+0x17e>
    UNUSED(tmpreg);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8004d62:	693a      	ldr	r2, [r7, #16]
 8004d64:	6839      	ldr	r1, [r7, #0]
 8004d66:	68f8      	ldr	r0, [r7, #12]
 8004d68:	f000 fa46 	bl	80051f8 <SPI_EndRxTransaction>
 8004d6c:	4603      	mov	r3, r0
 8004d6e:	2b00      	cmp	r3, #0
 8004d70:	d002      	beq.n	8004d78 <HAL_SPI_Receive+0x1f8>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8004d72:	68fb      	ldr	r3, [r7, #12]
 8004d74:	2220      	movs	r2, #32
 8004d76:	655a      	str	r2, [r3, #84]	; 0x54
      __HAL_SPI_CLEAR_CRCERRFLAG(hspi);
    }
  }
#endif /* USE_SPI_CRC */

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8004d78:	68fb      	ldr	r3, [r7, #12]
 8004d7a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004d7c:	2b00      	cmp	r3, #0
 8004d7e:	d002      	beq.n	8004d86 <HAL_SPI_Receive+0x206>
  {
    errorcode = HAL_ERROR;
 8004d80:	2301      	movs	r3, #1
 8004d82:	75fb      	strb	r3, [r7, #23]
 8004d84:	e000      	b.n	8004d88 <HAL_SPI_Receive+0x208>
  }

error :
 8004d86:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 8004d88:	68fb      	ldr	r3, [r7, #12]
 8004d8a:	2201      	movs	r2, #1
 8004d8c:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  __HAL_UNLOCK(hspi);
 8004d90:	68fb      	ldr	r3, [r7, #12]
 8004d92:	2200      	movs	r2, #0
 8004d94:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 8004d98:	7dfb      	ldrb	r3, [r7, #23]
}
 8004d9a:	4618      	mov	r0, r3
 8004d9c:	3718      	adds	r7, #24
 8004d9e:	46bd      	mov	sp, r7
 8004da0:	bd80      	pop	{r7, pc}

08004da2 <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData, uint16_t Size,
                                          uint32_t Timeout)
{
 8004da2:	b580      	push	{r7, lr}
 8004da4:	b08c      	sub	sp, #48	; 0x30
 8004da6:	af00      	add	r7, sp, #0
 8004da8:	60f8      	str	r0, [r7, #12]
 8004daa:	60b9      	str	r1, [r7, #8]
 8004dac:	607a      	str	r2, [r7, #4]
 8004dae:	807b      	strh	r3, [r7, #2]
#if (USE_SPI_CRC != 0U)
  __IO uint32_t tmpreg = 0U;
#endif /* USE_SPI_CRC */

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 8004db0:	2301      	movs	r3, #1
 8004db2:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_StatusTypeDef    errorcode = HAL_OK;
 8004db4:	2300      	movs	r3, #0
 8004db6:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8004dba:	68fb      	ldr	r3, [r7, #12]
 8004dbc:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8004dc0:	2b01      	cmp	r3, #1
 8004dc2:	d101      	bne.n	8004dc8 <HAL_SPI_TransmitReceive+0x26>
 8004dc4:	2302      	movs	r3, #2
 8004dc6:	e18a      	b.n	80050de <HAL_SPI_TransmitReceive+0x33c>
 8004dc8:	68fb      	ldr	r3, [r7, #12]
 8004dca:	2201      	movs	r2, #1
 8004dcc:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8004dd0:	f7fe f98c 	bl	80030ec <HAL_GetTick>
 8004dd4:	6278      	str	r0, [r7, #36]	; 0x24

  /* Init temporary variables */
  tmp_state           = hspi->State;
 8004dd6:	68fb      	ldr	r3, [r7, #12]
 8004dd8:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8004ddc:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
  tmp_mode            = hspi->Init.Mode;
 8004de0:	68fb      	ldr	r3, [r7, #12]
 8004de2:	685b      	ldr	r3, [r3, #4]
 8004de4:	61fb      	str	r3, [r7, #28]
  initial_TxXferCount = Size;
 8004de6:	887b      	ldrh	r3, [r7, #2]
 8004de8:	837b      	strh	r3, [r7, #26]

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 8004dea:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8004dee:	2b01      	cmp	r3, #1
 8004df0:	d00f      	beq.n	8004e12 <HAL_SPI_TransmitReceive+0x70>
 8004df2:	69fb      	ldr	r3, [r7, #28]
 8004df4:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8004df8:	d107      	bne.n	8004e0a <HAL_SPI_TransmitReceive+0x68>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 8004dfa:	68fb      	ldr	r3, [r7, #12]
 8004dfc:	689b      	ldr	r3, [r3, #8]
 8004dfe:	2b00      	cmp	r3, #0
 8004e00:	d103      	bne.n	8004e0a <HAL_SPI_TransmitReceive+0x68>
 8004e02:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8004e06:	2b04      	cmp	r3, #4
 8004e08:	d003      	beq.n	8004e12 <HAL_SPI_TransmitReceive+0x70>
  {
    errorcode = HAL_BUSY;
 8004e0a:	2302      	movs	r3, #2
 8004e0c:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    goto error;
 8004e10:	e15b      	b.n	80050ca <HAL_SPI_TransmitReceive+0x328>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 8004e12:	68bb      	ldr	r3, [r7, #8]
 8004e14:	2b00      	cmp	r3, #0
 8004e16:	d005      	beq.n	8004e24 <HAL_SPI_TransmitReceive+0x82>
 8004e18:	687b      	ldr	r3, [r7, #4]
 8004e1a:	2b00      	cmp	r3, #0
 8004e1c:	d002      	beq.n	8004e24 <HAL_SPI_TransmitReceive+0x82>
 8004e1e:	887b      	ldrh	r3, [r7, #2]
 8004e20:	2b00      	cmp	r3, #0
 8004e22:	d103      	bne.n	8004e2c <HAL_SPI_TransmitReceive+0x8a>
  {
    errorcode = HAL_ERROR;
 8004e24:	2301      	movs	r3, #1
 8004e26:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    goto error;
 8004e2a:	e14e      	b.n	80050ca <HAL_SPI_TransmitReceive+0x328>
  }

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 8004e2c:	68fb      	ldr	r3, [r7, #12]
 8004e2e:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8004e32:	b2db      	uxtb	r3, r3
 8004e34:	2b04      	cmp	r3, #4
 8004e36:	d003      	beq.n	8004e40 <HAL_SPI_TransmitReceive+0x9e>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 8004e38:	68fb      	ldr	r3, [r7, #12]
 8004e3a:	2205      	movs	r2, #5
 8004e3c:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8004e40:	68fb      	ldr	r3, [r7, #12]
 8004e42:	2200      	movs	r2, #0
 8004e44:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 8004e46:	68fb      	ldr	r3, [r7, #12]
 8004e48:	687a      	ldr	r2, [r7, #4]
 8004e4a:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferCount = Size;
 8004e4c:	68fb      	ldr	r3, [r7, #12]
 8004e4e:	887a      	ldrh	r2, [r7, #2]
 8004e50:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->RxXferSize  = Size;
 8004e52:	68fb      	ldr	r3, [r7, #12]
 8004e54:	887a      	ldrh	r2, [r7, #2]
 8004e56:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 8004e58:	68fb      	ldr	r3, [r7, #12]
 8004e5a:	68ba      	ldr	r2, [r7, #8]
 8004e5c:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferCount = Size;
 8004e5e:	68fb      	ldr	r3, [r7, #12]
 8004e60:	887a      	ldrh	r2, [r7, #2]
 8004e62:	86da      	strh	r2, [r3, #54]	; 0x36
  hspi->TxXferSize  = Size;
 8004e64:	68fb      	ldr	r3, [r7, #12]
 8004e66:	887a      	ldrh	r2, [r7, #2]
 8004e68:	869a      	strh	r2, [r3, #52]	; 0x34

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 8004e6a:	68fb      	ldr	r3, [r7, #12]
 8004e6c:	2200      	movs	r2, #0
 8004e6e:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->TxISR       = NULL;
 8004e70:	68fb      	ldr	r3, [r7, #12]
 8004e72:	2200      	movs	r2, #0
 8004e74:	645a      	str	r2, [r3, #68]	; 0x44
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8004e76:	68fb      	ldr	r3, [r7, #12]
 8004e78:	681b      	ldr	r3, [r3, #0]
 8004e7a:	681b      	ldr	r3, [r3, #0]
 8004e7c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004e80:	2b40      	cmp	r3, #64	; 0x40
 8004e82:	d007      	beq.n	8004e94 <HAL_SPI_TransmitReceive+0xf2>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8004e84:	68fb      	ldr	r3, [r7, #12]
 8004e86:	681b      	ldr	r3, [r3, #0]
 8004e88:	681a      	ldr	r2, [r3, #0]
 8004e8a:	68fb      	ldr	r3, [r7, #12]
 8004e8c:	681b      	ldr	r3, [r3, #0]
 8004e8e:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8004e92:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 8004e94:	68fb      	ldr	r3, [r7, #12]
 8004e96:	68db      	ldr	r3, [r3, #12]
 8004e98:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8004e9c:	d178      	bne.n	8004f90 <HAL_SPI_TransmitReceive+0x1ee>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8004e9e:	68fb      	ldr	r3, [r7, #12]
 8004ea0:	685b      	ldr	r3, [r3, #4]
 8004ea2:	2b00      	cmp	r3, #0
 8004ea4:	d002      	beq.n	8004eac <HAL_SPI_TransmitReceive+0x10a>
 8004ea6:	8b7b      	ldrh	r3, [r7, #26]
 8004ea8:	2b01      	cmp	r3, #1
 8004eaa:	d166      	bne.n	8004f7a <HAL_SPI_TransmitReceive+0x1d8>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8004eac:	68fb      	ldr	r3, [r7, #12]
 8004eae:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004eb0:	881a      	ldrh	r2, [r3, #0]
 8004eb2:	68fb      	ldr	r3, [r7, #12]
 8004eb4:	681b      	ldr	r3, [r3, #0]
 8004eb6:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8004eb8:	68fb      	ldr	r3, [r7, #12]
 8004eba:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004ebc:	1c9a      	adds	r2, r3, #2
 8004ebe:	68fb      	ldr	r3, [r7, #12]
 8004ec0:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8004ec2:	68fb      	ldr	r3, [r7, #12]
 8004ec4:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8004ec6:	b29b      	uxth	r3, r3
 8004ec8:	3b01      	subs	r3, #1
 8004eca:	b29a      	uxth	r2, r3
 8004ecc:	68fb      	ldr	r3, [r7, #12]
 8004ece:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8004ed0:	e053      	b.n	8004f7a <HAL_SPI_TransmitReceive+0x1d8>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8004ed2:	68fb      	ldr	r3, [r7, #12]
 8004ed4:	681b      	ldr	r3, [r3, #0]
 8004ed6:	689b      	ldr	r3, [r3, #8]
 8004ed8:	f003 0302 	and.w	r3, r3, #2
 8004edc:	2b02      	cmp	r3, #2
 8004ede:	d11b      	bne.n	8004f18 <HAL_SPI_TransmitReceive+0x176>
 8004ee0:	68fb      	ldr	r3, [r7, #12]
 8004ee2:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8004ee4:	b29b      	uxth	r3, r3
 8004ee6:	2b00      	cmp	r3, #0
 8004ee8:	d016      	beq.n	8004f18 <HAL_SPI_TransmitReceive+0x176>
 8004eea:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004eec:	2b01      	cmp	r3, #1
 8004eee:	d113      	bne.n	8004f18 <HAL_SPI_TransmitReceive+0x176>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8004ef0:	68fb      	ldr	r3, [r7, #12]
 8004ef2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004ef4:	881a      	ldrh	r2, [r3, #0]
 8004ef6:	68fb      	ldr	r3, [r7, #12]
 8004ef8:	681b      	ldr	r3, [r3, #0]
 8004efa:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8004efc:	68fb      	ldr	r3, [r7, #12]
 8004efe:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004f00:	1c9a      	adds	r2, r3, #2
 8004f02:	68fb      	ldr	r3, [r7, #12]
 8004f04:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8004f06:	68fb      	ldr	r3, [r7, #12]
 8004f08:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8004f0a:	b29b      	uxth	r3, r3
 8004f0c:	3b01      	subs	r3, #1
 8004f0e:	b29a      	uxth	r2, r3
 8004f10:	68fb      	ldr	r3, [r7, #12]
 8004f12:	86da      	strh	r2, [r3, #54]	; 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8004f14:	2300      	movs	r3, #0
 8004f16:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8004f18:	68fb      	ldr	r3, [r7, #12]
 8004f1a:	681b      	ldr	r3, [r3, #0]
 8004f1c:	689b      	ldr	r3, [r3, #8]
 8004f1e:	f003 0301 	and.w	r3, r3, #1
 8004f22:	2b01      	cmp	r3, #1
 8004f24:	d119      	bne.n	8004f5a <HAL_SPI_TransmitReceive+0x1b8>
 8004f26:	68fb      	ldr	r3, [r7, #12]
 8004f28:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004f2a:	b29b      	uxth	r3, r3
 8004f2c:	2b00      	cmp	r3, #0
 8004f2e:	d014      	beq.n	8004f5a <HAL_SPI_TransmitReceive+0x1b8>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8004f30:	68fb      	ldr	r3, [r7, #12]
 8004f32:	681b      	ldr	r3, [r3, #0]
 8004f34:	68da      	ldr	r2, [r3, #12]
 8004f36:	68fb      	ldr	r3, [r7, #12]
 8004f38:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004f3a:	b292      	uxth	r2, r2
 8004f3c:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8004f3e:	68fb      	ldr	r3, [r7, #12]
 8004f40:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004f42:	1c9a      	adds	r2, r3, #2
 8004f44:	68fb      	ldr	r3, [r7, #12]
 8004f46:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 8004f48:	68fb      	ldr	r3, [r7, #12]
 8004f4a:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004f4c:	b29b      	uxth	r3, r3
 8004f4e:	3b01      	subs	r3, #1
 8004f50:	b29a      	uxth	r2, r3
 8004f52:	68fb      	ldr	r3, [r7, #12]
 8004f54:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8004f56:	2301      	movs	r3, #1
 8004f58:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 8004f5a:	f7fe f8c7 	bl	80030ec <HAL_GetTick>
 8004f5e:	4602      	mov	r2, r0
 8004f60:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004f62:	1ad3      	subs	r3, r2, r3
 8004f64:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8004f66:	429a      	cmp	r2, r3
 8004f68:	d807      	bhi.n	8004f7a <HAL_SPI_TransmitReceive+0x1d8>
 8004f6a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004f6c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004f70:	d003      	beq.n	8004f7a <HAL_SPI_TransmitReceive+0x1d8>
      {
        errorcode = HAL_TIMEOUT;
 8004f72:	2303      	movs	r3, #3
 8004f74:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        goto error;
 8004f78:	e0a7      	b.n	80050ca <HAL_SPI_TransmitReceive+0x328>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8004f7a:	68fb      	ldr	r3, [r7, #12]
 8004f7c:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8004f7e:	b29b      	uxth	r3, r3
 8004f80:	2b00      	cmp	r3, #0
 8004f82:	d1a6      	bne.n	8004ed2 <HAL_SPI_TransmitReceive+0x130>
 8004f84:	68fb      	ldr	r3, [r7, #12]
 8004f86:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004f88:	b29b      	uxth	r3, r3
 8004f8a:	2b00      	cmp	r3, #0
 8004f8c:	d1a1      	bne.n	8004ed2 <HAL_SPI_TransmitReceive+0x130>
 8004f8e:	e07c      	b.n	800508a <HAL_SPI_TransmitReceive+0x2e8>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8004f90:	68fb      	ldr	r3, [r7, #12]
 8004f92:	685b      	ldr	r3, [r3, #4]
 8004f94:	2b00      	cmp	r3, #0
 8004f96:	d002      	beq.n	8004f9e <HAL_SPI_TransmitReceive+0x1fc>
 8004f98:	8b7b      	ldrh	r3, [r7, #26]
 8004f9a:	2b01      	cmp	r3, #1
 8004f9c:	d16b      	bne.n	8005076 <HAL_SPI_TransmitReceive+0x2d4>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8004f9e:	68fb      	ldr	r3, [r7, #12]
 8004fa0:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8004fa2:	68fb      	ldr	r3, [r7, #12]
 8004fa4:	681b      	ldr	r3, [r3, #0]
 8004fa6:	330c      	adds	r3, #12
 8004fa8:	7812      	ldrb	r2, [r2, #0]
 8004faa:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 8004fac:	68fb      	ldr	r3, [r7, #12]
 8004fae:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004fb0:	1c5a      	adds	r2, r3, #1
 8004fb2:	68fb      	ldr	r3, [r7, #12]
 8004fb4:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8004fb6:	68fb      	ldr	r3, [r7, #12]
 8004fb8:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8004fba:	b29b      	uxth	r3, r3
 8004fbc:	3b01      	subs	r3, #1
 8004fbe:	b29a      	uxth	r2, r3
 8004fc0:	68fb      	ldr	r3, [r7, #12]
 8004fc2:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8004fc4:	e057      	b.n	8005076 <HAL_SPI_TransmitReceive+0x2d4>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8004fc6:	68fb      	ldr	r3, [r7, #12]
 8004fc8:	681b      	ldr	r3, [r3, #0]
 8004fca:	689b      	ldr	r3, [r3, #8]
 8004fcc:	f003 0302 	and.w	r3, r3, #2
 8004fd0:	2b02      	cmp	r3, #2
 8004fd2:	d11c      	bne.n	800500e <HAL_SPI_TransmitReceive+0x26c>
 8004fd4:	68fb      	ldr	r3, [r7, #12]
 8004fd6:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8004fd8:	b29b      	uxth	r3, r3
 8004fda:	2b00      	cmp	r3, #0
 8004fdc:	d017      	beq.n	800500e <HAL_SPI_TransmitReceive+0x26c>
 8004fde:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004fe0:	2b01      	cmp	r3, #1
 8004fe2:	d114      	bne.n	800500e <HAL_SPI_TransmitReceive+0x26c>
      {
        *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 8004fe4:	68fb      	ldr	r3, [r7, #12]
 8004fe6:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8004fe8:	68fb      	ldr	r3, [r7, #12]
 8004fea:	681b      	ldr	r3, [r3, #0]
 8004fec:	330c      	adds	r3, #12
 8004fee:	7812      	ldrb	r2, [r2, #0]
 8004ff0:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 8004ff2:	68fb      	ldr	r3, [r7, #12]
 8004ff4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004ff6:	1c5a      	adds	r2, r3, #1
 8004ff8:	68fb      	ldr	r3, [r7, #12]
 8004ffa:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8004ffc:	68fb      	ldr	r3, [r7, #12]
 8004ffe:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8005000:	b29b      	uxth	r3, r3
 8005002:	3b01      	subs	r3, #1
 8005004:	b29a      	uxth	r2, r3
 8005006:	68fb      	ldr	r3, [r7, #12]
 8005008:	86da      	strh	r2, [r3, #54]	; 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 800500a:	2300      	movs	r3, #0
 800500c:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 800500e:	68fb      	ldr	r3, [r7, #12]
 8005010:	681b      	ldr	r3, [r3, #0]
 8005012:	689b      	ldr	r3, [r3, #8]
 8005014:	f003 0301 	and.w	r3, r3, #1
 8005018:	2b01      	cmp	r3, #1
 800501a:	d119      	bne.n	8005050 <HAL_SPI_TransmitReceive+0x2ae>
 800501c:	68fb      	ldr	r3, [r7, #12]
 800501e:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8005020:	b29b      	uxth	r3, r3
 8005022:	2b00      	cmp	r3, #0
 8005024:	d014      	beq.n	8005050 <HAL_SPI_TransmitReceive+0x2ae>
      {
        (*(uint8_t *)hspi->pRxBuffPtr) = hspi->Instance->DR;
 8005026:	68fb      	ldr	r3, [r7, #12]
 8005028:	681b      	ldr	r3, [r3, #0]
 800502a:	68da      	ldr	r2, [r3, #12]
 800502c:	68fb      	ldr	r3, [r7, #12]
 800502e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005030:	b2d2      	uxtb	r2, r2
 8005032:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr++;
 8005034:	68fb      	ldr	r3, [r7, #12]
 8005036:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005038:	1c5a      	adds	r2, r3, #1
 800503a:	68fb      	ldr	r3, [r7, #12]
 800503c:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 800503e:	68fb      	ldr	r3, [r7, #12]
 8005040:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8005042:	b29b      	uxth	r3, r3
 8005044:	3b01      	subs	r3, #1
 8005046:	b29a      	uxth	r2, r3
 8005048:	68fb      	ldr	r3, [r7, #12]
 800504a:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 800504c:	2301      	movs	r3, #1
 800504e:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 8005050:	f7fe f84c 	bl	80030ec <HAL_GetTick>
 8005054:	4602      	mov	r2, r0
 8005056:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005058:	1ad3      	subs	r3, r2, r3
 800505a:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800505c:	429a      	cmp	r2, r3
 800505e:	d803      	bhi.n	8005068 <HAL_SPI_TransmitReceive+0x2c6>
 8005060:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005062:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005066:	d102      	bne.n	800506e <HAL_SPI_TransmitReceive+0x2cc>
 8005068:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800506a:	2b00      	cmp	r3, #0
 800506c:	d103      	bne.n	8005076 <HAL_SPI_TransmitReceive+0x2d4>
      {
        errorcode = HAL_TIMEOUT;
 800506e:	2303      	movs	r3, #3
 8005070:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        goto error;
 8005074:	e029      	b.n	80050ca <HAL_SPI_TransmitReceive+0x328>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8005076:	68fb      	ldr	r3, [r7, #12]
 8005078:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800507a:	b29b      	uxth	r3, r3
 800507c:	2b00      	cmp	r3, #0
 800507e:	d1a2      	bne.n	8004fc6 <HAL_SPI_TransmitReceive+0x224>
 8005080:	68fb      	ldr	r3, [r7, #12]
 8005082:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8005084:	b29b      	uxth	r3, r3
 8005086:	2b00      	cmp	r3, #0
 8005088:	d19d      	bne.n	8004fc6 <HAL_SPI_TransmitReceive+0x224>
    }
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 800508a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800508c:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 800508e:	68f8      	ldr	r0, [r7, #12]
 8005090:	f000 f904 	bl	800529c <SPI_EndRxTxTransaction>
 8005094:	4603      	mov	r3, r0
 8005096:	2b00      	cmp	r3, #0
 8005098:	d006      	beq.n	80050a8 <HAL_SPI_TransmitReceive+0x306>
  {
    errorcode = HAL_ERROR;
 800509a:	2301      	movs	r3, #1
 800509c:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 80050a0:	68fb      	ldr	r3, [r7, #12]
 80050a2:	2220      	movs	r2, #32
 80050a4:	655a      	str	r2, [r3, #84]	; 0x54
    goto error;
 80050a6:	e010      	b.n	80050ca <HAL_SPI_TransmitReceive+0x328>
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 80050a8:	68fb      	ldr	r3, [r7, #12]
 80050aa:	689b      	ldr	r3, [r3, #8]
 80050ac:	2b00      	cmp	r3, #0
 80050ae:	d10b      	bne.n	80050c8 <HAL_SPI_TransmitReceive+0x326>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 80050b0:	2300      	movs	r3, #0
 80050b2:	617b      	str	r3, [r7, #20]
 80050b4:	68fb      	ldr	r3, [r7, #12]
 80050b6:	681b      	ldr	r3, [r3, #0]
 80050b8:	68db      	ldr	r3, [r3, #12]
 80050ba:	617b      	str	r3, [r7, #20]
 80050bc:	68fb      	ldr	r3, [r7, #12]
 80050be:	681b      	ldr	r3, [r3, #0]
 80050c0:	689b      	ldr	r3, [r3, #8]
 80050c2:	617b      	str	r3, [r7, #20]
 80050c4:	697b      	ldr	r3, [r7, #20]
 80050c6:	e000      	b.n	80050ca <HAL_SPI_TransmitReceive+0x328>
  }

error :
 80050c8:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 80050ca:	68fb      	ldr	r3, [r7, #12]
 80050cc:	2201      	movs	r2, #1
 80050ce:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  __HAL_UNLOCK(hspi);
 80050d2:	68fb      	ldr	r3, [r7, #12]
 80050d4:	2200      	movs	r2, #0
 80050d6:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 80050da:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
}
 80050de:	4618      	mov	r0, r3
 80050e0:	3730      	adds	r7, #48	; 0x30
 80050e2:	46bd      	mov	sp, r7
 80050e4:	bd80      	pop	{r7, pc}
	...

080050e8 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 80050e8:	b580      	push	{r7, lr}
 80050ea:	b088      	sub	sp, #32
 80050ec:	af00      	add	r7, sp, #0
 80050ee:	60f8      	str	r0, [r7, #12]
 80050f0:	60b9      	str	r1, [r7, #8]
 80050f2:	603b      	str	r3, [r7, #0]
 80050f4:	4613      	mov	r3, r2
 80050f6:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 80050f8:	f7fd fff8 	bl	80030ec <HAL_GetTick>
 80050fc:	4602      	mov	r2, r0
 80050fe:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005100:	1a9b      	subs	r3, r3, r2
 8005102:	683a      	ldr	r2, [r7, #0]
 8005104:	4413      	add	r3, r2
 8005106:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 8005108:	f7fd fff0 	bl	80030ec <HAL_GetTick>
 800510c:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 800510e:	4b39      	ldr	r3, [pc, #228]	; (80051f4 <SPI_WaitFlagStateUntilTimeout+0x10c>)
 8005110:	681b      	ldr	r3, [r3, #0]
 8005112:	015b      	lsls	r3, r3, #5
 8005114:	0d1b      	lsrs	r3, r3, #20
 8005116:	69fa      	ldr	r2, [r7, #28]
 8005118:	fb02 f303 	mul.w	r3, r2, r3
 800511c:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 800511e:	e054      	b.n	80051ca <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 8005120:	683b      	ldr	r3, [r7, #0]
 8005122:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005126:	d050      	beq.n	80051ca <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8005128:	f7fd ffe0 	bl	80030ec <HAL_GetTick>
 800512c:	4602      	mov	r2, r0
 800512e:	69bb      	ldr	r3, [r7, #24]
 8005130:	1ad3      	subs	r3, r2, r3
 8005132:	69fa      	ldr	r2, [r7, #28]
 8005134:	429a      	cmp	r2, r3
 8005136:	d902      	bls.n	800513e <SPI_WaitFlagStateUntilTimeout+0x56>
 8005138:	69fb      	ldr	r3, [r7, #28]
 800513a:	2b00      	cmp	r3, #0
 800513c:	d13d      	bne.n	80051ba <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 800513e:	68fb      	ldr	r3, [r7, #12]
 8005140:	681b      	ldr	r3, [r3, #0]
 8005142:	685a      	ldr	r2, [r3, #4]
 8005144:	68fb      	ldr	r3, [r7, #12]
 8005146:	681b      	ldr	r3, [r3, #0]
 8005148:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 800514c:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800514e:	68fb      	ldr	r3, [r7, #12]
 8005150:	685b      	ldr	r3, [r3, #4]
 8005152:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8005156:	d111      	bne.n	800517c <SPI_WaitFlagStateUntilTimeout+0x94>
 8005158:	68fb      	ldr	r3, [r7, #12]
 800515a:	689b      	ldr	r3, [r3, #8]
 800515c:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8005160:	d004      	beq.n	800516c <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8005162:	68fb      	ldr	r3, [r7, #12]
 8005164:	689b      	ldr	r3, [r3, #8]
 8005166:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800516a:	d107      	bne.n	800517c <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 800516c:	68fb      	ldr	r3, [r7, #12]
 800516e:	681b      	ldr	r3, [r3, #0]
 8005170:	681a      	ldr	r2, [r3, #0]
 8005172:	68fb      	ldr	r3, [r7, #12]
 8005174:	681b      	ldr	r3, [r3, #0]
 8005176:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800517a:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 800517c:	68fb      	ldr	r3, [r7, #12]
 800517e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005180:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8005184:	d10f      	bne.n	80051a6 <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 8005186:	68fb      	ldr	r3, [r7, #12]
 8005188:	681b      	ldr	r3, [r3, #0]
 800518a:	681a      	ldr	r2, [r3, #0]
 800518c:	68fb      	ldr	r3, [r7, #12]
 800518e:	681b      	ldr	r3, [r3, #0]
 8005190:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8005194:	601a      	str	r2, [r3, #0]
 8005196:	68fb      	ldr	r3, [r7, #12]
 8005198:	681b      	ldr	r3, [r3, #0]
 800519a:	681a      	ldr	r2, [r3, #0]
 800519c:	68fb      	ldr	r3, [r7, #12]
 800519e:	681b      	ldr	r3, [r3, #0]
 80051a0:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 80051a4:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 80051a6:	68fb      	ldr	r3, [r7, #12]
 80051a8:	2201      	movs	r2, #1
 80051aa:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 80051ae:	68fb      	ldr	r3, [r7, #12]
 80051b0:	2200      	movs	r2, #0
 80051b2:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

        return HAL_TIMEOUT;
 80051b6:	2303      	movs	r3, #3
 80051b8:	e017      	b.n	80051ea <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if(count == 0U)
 80051ba:	697b      	ldr	r3, [r7, #20]
 80051bc:	2b00      	cmp	r3, #0
 80051be:	d101      	bne.n	80051c4 <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 80051c0:	2300      	movs	r3, #0
 80051c2:	61fb      	str	r3, [r7, #28]
      }
      count--;
 80051c4:	697b      	ldr	r3, [r7, #20]
 80051c6:	3b01      	subs	r3, #1
 80051c8:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 80051ca:	68fb      	ldr	r3, [r7, #12]
 80051cc:	681b      	ldr	r3, [r3, #0]
 80051ce:	689a      	ldr	r2, [r3, #8]
 80051d0:	68bb      	ldr	r3, [r7, #8]
 80051d2:	4013      	ands	r3, r2
 80051d4:	68ba      	ldr	r2, [r7, #8]
 80051d6:	429a      	cmp	r2, r3
 80051d8:	bf0c      	ite	eq
 80051da:	2301      	moveq	r3, #1
 80051dc:	2300      	movne	r3, #0
 80051de:	b2db      	uxtb	r3, r3
 80051e0:	461a      	mov	r2, r3
 80051e2:	79fb      	ldrb	r3, [r7, #7]
 80051e4:	429a      	cmp	r2, r3
 80051e6:	d19b      	bne.n	8005120 <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 80051e8:	2300      	movs	r3, #0
}
 80051ea:	4618      	mov	r0, r3
 80051ec:	3720      	adds	r7, #32
 80051ee:	46bd      	mov	sp, r7
 80051f0:	bd80      	pop	{r7, pc}
 80051f2:	bf00      	nop
 80051f4:	20000000 	.word	0x20000000

080051f8 <SPI_EndRxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTransaction(SPI_HandleTypeDef *hspi,  uint32_t Timeout, uint32_t Tickstart)
{
 80051f8:	b580      	push	{r7, lr}
 80051fa:	b086      	sub	sp, #24
 80051fc:	af02      	add	r7, sp, #8
 80051fe:	60f8      	str	r0, [r7, #12]
 8005200:	60b9      	str	r1, [r7, #8]
 8005202:	607a      	str	r2, [r7, #4]
  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8005204:	68fb      	ldr	r3, [r7, #12]
 8005206:	685b      	ldr	r3, [r3, #4]
 8005208:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800520c:	d111      	bne.n	8005232 <SPI_EndRxTransaction+0x3a>
 800520e:	68fb      	ldr	r3, [r7, #12]
 8005210:	689b      	ldr	r3, [r3, #8]
 8005212:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8005216:	d004      	beq.n	8005222 <SPI_EndRxTransaction+0x2a>
                                               || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8005218:	68fb      	ldr	r3, [r7, #12]
 800521a:	689b      	ldr	r3, [r3, #8]
 800521c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8005220:	d107      	bne.n	8005232 <SPI_EndRxTransaction+0x3a>
  {
    /* Disable SPI peripheral */
    __HAL_SPI_DISABLE(hspi);
 8005222:	68fb      	ldr	r3, [r7, #12]
 8005224:	681b      	ldr	r3, [r3, #0]
 8005226:	681a      	ldr	r2, [r3, #0]
 8005228:	68fb      	ldr	r3, [r7, #12]
 800522a:	681b      	ldr	r3, [r3, #0]
 800522c:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8005230:	601a      	str	r2, [r3, #0]
  }

  if ((hspi->Init.Mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY))
 8005232:	68fb      	ldr	r3, [r7, #12]
 8005234:	685b      	ldr	r3, [r3, #4]
 8005236:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800523a:	d117      	bne.n	800526c <SPI_EndRxTransaction+0x74>
 800523c:	68fb      	ldr	r3, [r7, #12]
 800523e:	689b      	ldr	r3, [r3, #8]
 8005240:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8005244:	d112      	bne.n	800526c <SPI_EndRxTransaction+0x74>
  {
    /* Wait the RXNE reset */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_RXNE, RESET, Timeout, Tickstart) != HAL_OK)
 8005246:	687b      	ldr	r3, [r7, #4]
 8005248:	9300      	str	r3, [sp, #0]
 800524a:	68bb      	ldr	r3, [r7, #8]
 800524c:	2200      	movs	r2, #0
 800524e:	2101      	movs	r1, #1
 8005250:	68f8      	ldr	r0, [r7, #12]
 8005252:	f7ff ff49 	bl	80050e8 <SPI_WaitFlagStateUntilTimeout>
 8005256:	4603      	mov	r3, r0
 8005258:	2b00      	cmp	r3, #0
 800525a:	d01a      	beq.n	8005292 <SPI_EndRxTransaction+0x9a>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800525c:	68fb      	ldr	r3, [r7, #12]
 800525e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005260:	f043 0220 	orr.w	r2, r3, #32
 8005264:	68fb      	ldr	r3, [r7, #12]
 8005266:	655a      	str	r2, [r3, #84]	; 0x54
      return HAL_TIMEOUT;
 8005268:	2303      	movs	r3, #3
 800526a:	e013      	b.n	8005294 <SPI_EndRxTransaction+0x9c>
    }
  }
  else
  {
    /* Control the BSY flag */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 800526c:	687b      	ldr	r3, [r7, #4]
 800526e:	9300      	str	r3, [sp, #0]
 8005270:	68bb      	ldr	r3, [r7, #8]
 8005272:	2200      	movs	r2, #0
 8005274:	2180      	movs	r1, #128	; 0x80
 8005276:	68f8      	ldr	r0, [r7, #12]
 8005278:	f7ff ff36 	bl	80050e8 <SPI_WaitFlagStateUntilTimeout>
 800527c:	4603      	mov	r3, r0
 800527e:	2b00      	cmp	r3, #0
 8005280:	d007      	beq.n	8005292 <SPI_EndRxTransaction+0x9a>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8005282:	68fb      	ldr	r3, [r7, #12]
 8005284:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005286:	f043 0220 	orr.w	r2, r3, #32
 800528a:	68fb      	ldr	r3, [r7, #12]
 800528c:	655a      	str	r2, [r3, #84]	; 0x54
      return HAL_TIMEOUT;
 800528e:	2303      	movs	r3, #3
 8005290:	e000      	b.n	8005294 <SPI_EndRxTransaction+0x9c>
    }
  }
  return HAL_OK;
 8005292:	2300      	movs	r3, #0
}
 8005294:	4618      	mov	r0, r3
 8005296:	3710      	adds	r7, #16
 8005298:	46bd      	mov	sp, r7
 800529a:	bd80      	pop	{r7, pc}

0800529c <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 800529c:	b580      	push	{r7, lr}
 800529e:	b086      	sub	sp, #24
 80052a0:	af02      	add	r7, sp, #8
 80052a2:	60f8      	str	r0, [r7, #12]
 80052a4:	60b9      	str	r1, [r7, #8]
 80052a6:	607a      	str	r2, [r7, #4]
  /* Control the BSY flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 80052a8:	687b      	ldr	r3, [r7, #4]
 80052aa:	9300      	str	r3, [sp, #0]
 80052ac:	68bb      	ldr	r3, [r7, #8]
 80052ae:	2200      	movs	r2, #0
 80052b0:	2180      	movs	r1, #128	; 0x80
 80052b2:	68f8      	ldr	r0, [r7, #12]
 80052b4:	f7ff ff18 	bl	80050e8 <SPI_WaitFlagStateUntilTimeout>
 80052b8:	4603      	mov	r3, r0
 80052ba:	2b00      	cmp	r3, #0
 80052bc:	d007      	beq.n	80052ce <SPI_EndRxTxTransaction+0x32>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80052be:	68fb      	ldr	r3, [r7, #12]
 80052c0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80052c2:	f043 0220 	orr.w	r2, r3, #32
 80052c6:	68fb      	ldr	r3, [r7, #12]
 80052c8:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_TIMEOUT;
 80052ca:	2303      	movs	r3, #3
 80052cc:	e000      	b.n	80052d0 <SPI_EndRxTxTransaction+0x34>
  }
  return HAL_OK;
 80052ce:	2300      	movs	r3, #0
}
 80052d0:	4618      	mov	r0, r3
 80052d2:	3710      	adds	r7, #16
 80052d4:	46bd      	mov	sp, r7
 80052d6:	bd80      	pop	{r7, pc}

080052d8 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80052d8:	b580      	push	{r7, lr}
 80052da:	b082      	sub	sp, #8
 80052dc:	af00      	add	r7, sp, #0
 80052de:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80052e0:	687b      	ldr	r3, [r7, #4]
 80052e2:	2b00      	cmp	r3, #0
 80052e4:	d101      	bne.n	80052ea <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80052e6:	2301      	movs	r3, #1
 80052e8:	e03f      	b.n	800536a <HAL_UART_Init+0x92>
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
#if defined(USART_CR1_OVER8)
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));
#endif /* USART_CR1_OVER8 */

  if (huart->gState == HAL_UART_STATE_RESET)
 80052ea:	687b      	ldr	r3, [r7, #4]
 80052ec:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80052f0:	b2db      	uxtb	r3, r3
 80052f2:	2b00      	cmp	r3, #0
 80052f4:	d106      	bne.n	8005304 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80052f6:	687b      	ldr	r3, [r7, #4]
 80052f8:	2200      	movs	r2, #0
 80052fa:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80052fe:	6878      	ldr	r0, [r7, #4]
 8005300:	f7fd fda6 	bl	8002e50 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8005304:	687b      	ldr	r3, [r7, #4]
 8005306:	2224      	movs	r2, #36	; 0x24
 8005308:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 800530c:	687b      	ldr	r3, [r7, #4]
 800530e:	681b      	ldr	r3, [r3, #0]
 8005310:	68da      	ldr	r2, [r3, #12]
 8005312:	687b      	ldr	r3, [r7, #4]
 8005314:	681b      	ldr	r3, [r3, #0]
 8005316:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 800531a:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 800531c:	6878      	ldr	r0, [r7, #4]
 800531e:	f000 fd69 	bl	8005df4 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8005322:	687b      	ldr	r3, [r7, #4]
 8005324:	681b      	ldr	r3, [r3, #0]
 8005326:	691a      	ldr	r2, [r3, #16]
 8005328:	687b      	ldr	r3, [r7, #4]
 800532a:	681b      	ldr	r3, [r3, #0]
 800532c:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8005330:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8005332:	687b      	ldr	r3, [r7, #4]
 8005334:	681b      	ldr	r3, [r3, #0]
 8005336:	695a      	ldr	r2, [r3, #20]
 8005338:	687b      	ldr	r3, [r7, #4]
 800533a:	681b      	ldr	r3, [r3, #0]
 800533c:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8005340:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8005342:	687b      	ldr	r3, [r7, #4]
 8005344:	681b      	ldr	r3, [r3, #0]
 8005346:	68da      	ldr	r2, [r3, #12]
 8005348:	687b      	ldr	r3, [r7, #4]
 800534a:	681b      	ldr	r3, [r3, #0]
 800534c:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8005350:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005352:	687b      	ldr	r3, [r7, #4]
 8005354:	2200      	movs	r2, #0
 8005356:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 8005358:	687b      	ldr	r3, [r7, #4]
 800535a:	2220      	movs	r2, #32
 800535c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 8005360:	687b      	ldr	r3, [r7, #4]
 8005362:	2220      	movs	r2, #32
 8005364:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8005368:	2300      	movs	r3, #0
}
 800536a:	4618      	mov	r0, r3
 800536c:	3708      	adds	r7, #8
 800536e:	46bd      	mov	sp, r7
 8005370:	bd80      	pop	{r7, pc}

08005372 <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8005372:	b580      	push	{r7, lr}
 8005374:	b08a      	sub	sp, #40	; 0x28
 8005376:	af02      	add	r7, sp, #8
 8005378:	60f8      	str	r0, [r7, #12]
 800537a:	60b9      	str	r1, [r7, #8]
 800537c:	603b      	str	r3, [r7, #0]
 800537e:	4613      	mov	r3, r2
 8005380:	80fb      	strh	r3, [r7, #6]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 8005382:	2300      	movs	r3, #0
 8005384:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8005386:	68fb      	ldr	r3, [r7, #12]
 8005388:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800538c:	b2db      	uxtb	r3, r3
 800538e:	2b20      	cmp	r3, #32
 8005390:	d17c      	bne.n	800548c <HAL_UART_Transmit+0x11a>
  {
    if ((pData == NULL) || (Size == 0U))
 8005392:	68bb      	ldr	r3, [r7, #8]
 8005394:	2b00      	cmp	r3, #0
 8005396:	d002      	beq.n	800539e <HAL_UART_Transmit+0x2c>
 8005398:	88fb      	ldrh	r3, [r7, #6]
 800539a:	2b00      	cmp	r3, #0
 800539c:	d101      	bne.n	80053a2 <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 800539e:	2301      	movs	r3, #1
 80053a0:	e075      	b.n	800548e <HAL_UART_Transmit+0x11c>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 80053a2:	68fb      	ldr	r3, [r7, #12]
 80053a4:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80053a8:	2b01      	cmp	r3, #1
 80053aa:	d101      	bne.n	80053b0 <HAL_UART_Transmit+0x3e>
 80053ac:	2302      	movs	r3, #2
 80053ae:	e06e      	b.n	800548e <HAL_UART_Transmit+0x11c>
 80053b0:	68fb      	ldr	r3, [r7, #12]
 80053b2:	2201      	movs	r2, #1
 80053b4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80053b8:	68fb      	ldr	r3, [r7, #12]
 80053ba:	2200      	movs	r2, #0
 80053bc:	641a      	str	r2, [r3, #64]	; 0x40
    huart->gState = HAL_UART_STATE_BUSY_TX;
 80053be:	68fb      	ldr	r3, [r7, #12]
 80053c0:	2221      	movs	r2, #33	; 0x21
 80053c2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 80053c6:	f7fd fe91 	bl	80030ec <HAL_GetTick>
 80053ca:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 80053cc:	68fb      	ldr	r3, [r7, #12]
 80053ce:	88fa      	ldrh	r2, [r7, #6]
 80053d0:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 80053d2:	68fb      	ldr	r3, [r7, #12]
 80053d4:	88fa      	ldrh	r2, [r7, #6]
 80053d6:	84da      	strh	r2, [r3, #38]	; 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80053d8:	68fb      	ldr	r3, [r7, #12]
 80053da:	689b      	ldr	r3, [r3, #8]
 80053dc:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80053e0:	d108      	bne.n	80053f4 <HAL_UART_Transmit+0x82>
 80053e2:	68fb      	ldr	r3, [r7, #12]
 80053e4:	691b      	ldr	r3, [r3, #16]
 80053e6:	2b00      	cmp	r3, #0
 80053e8:	d104      	bne.n	80053f4 <HAL_UART_Transmit+0x82>
    {
      pdata8bits  = NULL;
 80053ea:	2300      	movs	r3, #0
 80053ec:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 80053ee:	68bb      	ldr	r3, [r7, #8]
 80053f0:	61bb      	str	r3, [r7, #24]
 80053f2:	e003      	b.n	80053fc <HAL_UART_Transmit+0x8a>
    }
    else
    {
      pdata8bits  = pData;
 80053f4:	68bb      	ldr	r3, [r7, #8]
 80053f6:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 80053f8:	2300      	movs	r3, #0
 80053fa:	61bb      	str	r3, [r7, #24]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 80053fc:	68fb      	ldr	r3, [r7, #12]
 80053fe:	2200      	movs	r2, #0
 8005400:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    while (huart->TxXferCount > 0U)
 8005404:	e02a      	b.n	800545c <HAL_UART_Transmit+0xea>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8005406:	683b      	ldr	r3, [r7, #0]
 8005408:	9300      	str	r3, [sp, #0]
 800540a:	697b      	ldr	r3, [r7, #20]
 800540c:	2200      	movs	r2, #0
 800540e:	2180      	movs	r1, #128	; 0x80
 8005410:	68f8      	ldr	r0, [r7, #12]
 8005412:	f000 fb03 	bl	8005a1c <UART_WaitOnFlagUntilTimeout>
 8005416:	4603      	mov	r3, r0
 8005418:	2b00      	cmp	r3, #0
 800541a:	d001      	beq.n	8005420 <HAL_UART_Transmit+0xae>
      {
        return HAL_TIMEOUT;
 800541c:	2303      	movs	r3, #3
 800541e:	e036      	b.n	800548e <HAL_UART_Transmit+0x11c>
      }
      if (pdata8bits == NULL)
 8005420:	69fb      	ldr	r3, [r7, #28]
 8005422:	2b00      	cmp	r3, #0
 8005424:	d10b      	bne.n	800543e <HAL_UART_Transmit+0xcc>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 8005426:	69bb      	ldr	r3, [r7, #24]
 8005428:	881b      	ldrh	r3, [r3, #0]
 800542a:	461a      	mov	r2, r3
 800542c:	68fb      	ldr	r3, [r7, #12]
 800542e:	681b      	ldr	r3, [r3, #0]
 8005430:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8005434:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 8005436:	69bb      	ldr	r3, [r7, #24]
 8005438:	3302      	adds	r3, #2
 800543a:	61bb      	str	r3, [r7, #24]
 800543c:	e007      	b.n	800544e <HAL_UART_Transmit+0xdc>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 800543e:	69fb      	ldr	r3, [r7, #28]
 8005440:	781a      	ldrb	r2, [r3, #0]
 8005442:	68fb      	ldr	r3, [r7, #12]
 8005444:	681b      	ldr	r3, [r3, #0]
 8005446:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 8005448:	69fb      	ldr	r3, [r7, #28]
 800544a:	3301      	adds	r3, #1
 800544c:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 800544e:	68fb      	ldr	r3, [r7, #12]
 8005450:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8005452:	b29b      	uxth	r3, r3
 8005454:	3b01      	subs	r3, #1
 8005456:	b29a      	uxth	r2, r3
 8005458:	68fb      	ldr	r3, [r7, #12]
 800545a:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 800545c:	68fb      	ldr	r3, [r7, #12]
 800545e:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8005460:	b29b      	uxth	r3, r3
 8005462:	2b00      	cmp	r3, #0
 8005464:	d1cf      	bne.n	8005406 <HAL_UART_Transmit+0x94>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8005466:	683b      	ldr	r3, [r7, #0]
 8005468:	9300      	str	r3, [sp, #0]
 800546a:	697b      	ldr	r3, [r7, #20]
 800546c:	2200      	movs	r2, #0
 800546e:	2140      	movs	r1, #64	; 0x40
 8005470:	68f8      	ldr	r0, [r7, #12]
 8005472:	f000 fad3 	bl	8005a1c <UART_WaitOnFlagUntilTimeout>
 8005476:	4603      	mov	r3, r0
 8005478:	2b00      	cmp	r3, #0
 800547a:	d001      	beq.n	8005480 <HAL_UART_Transmit+0x10e>
    {
      return HAL_TIMEOUT;
 800547c:	2303      	movs	r3, #3
 800547e:	e006      	b.n	800548e <HAL_UART_Transmit+0x11c>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8005480:	68fb      	ldr	r3, [r7, #12]
 8005482:	2220      	movs	r2, #32
 8005484:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    return HAL_OK;
 8005488:	2300      	movs	r3, #0
 800548a:	e000      	b.n	800548e <HAL_UART_Transmit+0x11c>
  }
  else
  {
    return HAL_BUSY;
 800548c:	2302      	movs	r3, #2
  }
}
 800548e:	4618      	mov	r0, r3
 8005490:	3720      	adds	r7, #32
 8005492:	46bd      	mov	sp, r7
 8005494:	bd80      	pop	{r7, pc}

08005496 <HAL_UART_Transmit_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8005496:	b480      	push	{r7}
 8005498:	b085      	sub	sp, #20
 800549a:	af00      	add	r7, sp, #0
 800549c:	60f8      	str	r0, [r7, #12]
 800549e:	60b9      	str	r1, [r7, #8]
 80054a0:	4613      	mov	r3, r2
 80054a2:	80fb      	strh	r3, [r7, #6]
  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 80054a4:	68fb      	ldr	r3, [r7, #12]
 80054a6:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80054aa:	b2db      	uxtb	r3, r3
 80054ac:	2b20      	cmp	r3, #32
 80054ae:	d130      	bne.n	8005512 <HAL_UART_Transmit_IT+0x7c>
  {
    if ((pData == NULL) || (Size == 0U))
 80054b0:	68bb      	ldr	r3, [r7, #8]
 80054b2:	2b00      	cmp	r3, #0
 80054b4:	d002      	beq.n	80054bc <HAL_UART_Transmit_IT+0x26>
 80054b6:	88fb      	ldrh	r3, [r7, #6]
 80054b8:	2b00      	cmp	r3, #0
 80054ba:	d101      	bne.n	80054c0 <HAL_UART_Transmit_IT+0x2a>
    {
      return HAL_ERROR;
 80054bc:	2301      	movs	r3, #1
 80054be:	e029      	b.n	8005514 <HAL_UART_Transmit_IT+0x7e>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 80054c0:	68fb      	ldr	r3, [r7, #12]
 80054c2:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80054c6:	2b01      	cmp	r3, #1
 80054c8:	d101      	bne.n	80054ce <HAL_UART_Transmit_IT+0x38>
 80054ca:	2302      	movs	r3, #2
 80054cc:	e022      	b.n	8005514 <HAL_UART_Transmit_IT+0x7e>
 80054ce:	68fb      	ldr	r3, [r7, #12]
 80054d0:	2201      	movs	r2, #1
 80054d2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->pTxBuffPtr = pData;
 80054d6:	68fb      	ldr	r3, [r7, #12]
 80054d8:	68ba      	ldr	r2, [r7, #8]
 80054da:	621a      	str	r2, [r3, #32]
    huart->TxXferSize = Size;
 80054dc:	68fb      	ldr	r3, [r7, #12]
 80054de:	88fa      	ldrh	r2, [r7, #6]
 80054e0:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 80054e2:	68fb      	ldr	r3, [r7, #12]
 80054e4:	88fa      	ldrh	r2, [r7, #6]
 80054e6:	84da      	strh	r2, [r3, #38]	; 0x26

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80054e8:	68fb      	ldr	r3, [r7, #12]
 80054ea:	2200      	movs	r2, #0
 80054ec:	641a      	str	r2, [r3, #64]	; 0x40
    huart->gState = HAL_UART_STATE_BUSY_TX;
 80054ee:	68fb      	ldr	r3, [r7, #12]
 80054f0:	2221      	movs	r2, #33	; 0x21
 80054f2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 80054f6:	68fb      	ldr	r3, [r7, #12]
 80054f8:	2200      	movs	r2, #0
 80054fa:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Enable the UART Transmit data register empty Interrupt */
    __HAL_UART_ENABLE_IT(huart, UART_IT_TXE);
 80054fe:	68fb      	ldr	r3, [r7, #12]
 8005500:	681b      	ldr	r3, [r3, #0]
 8005502:	68da      	ldr	r2, [r3, #12]
 8005504:	68fb      	ldr	r3, [r7, #12]
 8005506:	681b      	ldr	r3, [r3, #0]
 8005508:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 800550c:	60da      	str	r2, [r3, #12]

    return HAL_OK;
 800550e:	2300      	movs	r3, #0
 8005510:	e000      	b.n	8005514 <HAL_UART_Transmit_IT+0x7e>
  }
  else
  {
    return HAL_BUSY;
 8005512:	2302      	movs	r3, #2
  }
}
 8005514:	4618      	mov	r0, r3
 8005516:	3714      	adds	r7, #20
 8005518:	46bd      	mov	sp, r7
 800551a:	bc80      	pop	{r7}
 800551c:	4770      	bx	lr

0800551e <HAL_UART_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 800551e:	b580      	push	{r7, lr}
 8005520:	b084      	sub	sp, #16
 8005522:	af00      	add	r7, sp, #0
 8005524:	60f8      	str	r0, [r7, #12]
 8005526:	60b9      	str	r1, [r7, #8]
 8005528:	4613      	mov	r3, r2
 800552a:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 800552c:	68fb      	ldr	r3, [r7, #12]
 800552e:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8005532:	b2db      	uxtb	r3, r3
 8005534:	2b20      	cmp	r3, #32
 8005536:	d11d      	bne.n	8005574 <HAL_UART_Receive_IT+0x56>
  {
    if ((pData == NULL) || (Size == 0U))
 8005538:	68bb      	ldr	r3, [r7, #8]
 800553a:	2b00      	cmp	r3, #0
 800553c:	d002      	beq.n	8005544 <HAL_UART_Receive_IT+0x26>
 800553e:	88fb      	ldrh	r3, [r7, #6]
 8005540:	2b00      	cmp	r3, #0
 8005542:	d101      	bne.n	8005548 <HAL_UART_Receive_IT+0x2a>
    {
      return HAL_ERROR;
 8005544:	2301      	movs	r3, #1
 8005546:	e016      	b.n	8005576 <HAL_UART_Receive_IT+0x58>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8005548:	68fb      	ldr	r3, [r7, #12]
 800554a:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800554e:	2b01      	cmp	r3, #1
 8005550:	d101      	bne.n	8005556 <HAL_UART_Receive_IT+0x38>
 8005552:	2302      	movs	r3, #2
 8005554:	e00f      	b.n	8005576 <HAL_UART_Receive_IT+0x58>
 8005556:	68fb      	ldr	r3, [r7, #12]
 8005558:	2201      	movs	r2, #1
 800555a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800555e:	68fb      	ldr	r3, [r7, #12]
 8005560:	2200      	movs	r2, #0
 8005562:	631a      	str	r2, [r3, #48]	; 0x30

    return(UART_Start_Receive_IT(huart, pData, Size));
 8005564:	88fb      	ldrh	r3, [r7, #6]
 8005566:	461a      	mov	r2, r3
 8005568:	68b9      	ldr	r1, [r7, #8]
 800556a:	68f8      	ldr	r0, [r7, #12]
 800556c:	f000 faa0 	bl	8005ab0 <UART_Start_Receive_IT>
 8005570:	4603      	mov	r3, r0
 8005572:	e000      	b.n	8005576 <HAL_UART_Receive_IT+0x58>
  }
  else
  {
    return HAL_BUSY;
 8005574:	2302      	movs	r3, #2
  }
}
 8005576:	4618      	mov	r0, r3
 8005578:	3710      	adds	r7, #16
 800557a:	46bd      	mov	sp, r7
 800557c:	bd80      	pop	{r7, pc}
	...

08005580 <HAL_UART_AbortReceive_IT>:
  * @note   This procedure is executed in Interrupt mode, meaning that abort procedure could be
  *         considered as completed only when user abort complete callback is executed (not when exiting function).
  * @retval HAL status
*/
HAL_StatusTypeDef HAL_UART_AbortReceive_IT(UART_HandleTypeDef *huart)
{
 8005580:	b580      	push	{r7, lr}
 8005582:	b082      	sub	sp, #8
 8005584:	af00      	add	r7, sp, #0
 8005586:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8005588:	687b      	ldr	r3, [r7, #4]
 800558a:	681b      	ldr	r3, [r3, #0]
 800558c:	68da      	ldr	r2, [r3, #12]
 800558e:	687b      	ldr	r3, [r7, #4]
 8005590:	681b      	ldr	r3, [r3, #0]
 8005592:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 8005596:	60da      	str	r2, [r3, #12]
  CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005598:	687b      	ldr	r3, [r7, #4]
 800559a:	681b      	ldr	r3, [r3, #0]
 800559c:	695a      	ldr	r2, [r3, #20]
 800559e:	687b      	ldr	r3, [r7, #4]
 80055a0:	681b      	ldr	r3, [r3, #0]
 80055a2:	f022 0201 	bic.w	r2, r2, #1
 80055a6:	615a      	str	r2, [r3, #20]

  /* If Reception till IDLE event was ongoing, disable IDLEIE interrupt */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80055a8:	687b      	ldr	r3, [r7, #4]
 80055aa:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80055ac:	2b01      	cmp	r3, #1
 80055ae:	d107      	bne.n	80055c0 <HAL_UART_AbortReceive_IT+0x40>
  {
    CLEAR_BIT(huart->Instance->CR1, (USART_CR1_IDLEIE));
 80055b0:	687b      	ldr	r3, [r7, #4]
 80055b2:	681b      	ldr	r3, [r3, #0]
 80055b4:	68da      	ldr	r2, [r3, #12]
 80055b6:	687b      	ldr	r3, [r7, #4]
 80055b8:	681b      	ldr	r3, [r3, #0]
 80055ba:	f022 0210 	bic.w	r2, r2, #16
 80055be:	60da      	str	r2, [r3, #12]
  }

  /* Disable the UART DMA Rx request if enabled */
  if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80055c0:	687b      	ldr	r3, [r7, #4]
 80055c2:	681b      	ldr	r3, [r3, #0]
 80055c4:	695b      	ldr	r3, [r3, #20]
 80055c6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80055ca:	2b00      	cmp	r3, #0
 80055cc:	d02d      	beq.n	800562a <HAL_UART_AbortReceive_IT+0xaa>
  {
    CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80055ce:	687b      	ldr	r3, [r7, #4]
 80055d0:	681b      	ldr	r3, [r3, #0]
 80055d2:	695a      	ldr	r2, [r3, #20]
 80055d4:	687b      	ldr	r3, [r7, #4]
 80055d6:	681b      	ldr	r3, [r3, #0]
 80055d8:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80055dc:	615a      	str	r2, [r3, #20]

    /* Abort the UART DMA Rx channel : use blocking DMA Abort API (no callback) */
    if (huart->hdmarx != NULL)
 80055de:	687b      	ldr	r3, [r7, #4]
 80055e0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80055e2:	2b00      	cmp	r3, #0
 80055e4:	d013      	beq.n	800560e <HAL_UART_AbortReceive_IT+0x8e>
    {
      /* Set the UART DMA Abort callback :
         will lead to call HAL_UART_AbortCpltCallback() at end of DMA abort procedure */
      huart->hdmarx->XferAbortCallback = UART_DMARxOnlyAbortCallback;
 80055e6:	687b      	ldr	r3, [r7, #4]
 80055e8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80055ea:	4a19      	ldr	r2, [pc, #100]	; (8005650 <HAL_UART_AbortReceive_IT+0xd0>)
 80055ec:	635a      	str	r2, [r3, #52]	; 0x34

      /* Abort DMA RX */
      if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 80055ee:	687b      	ldr	r3, [r7, #4]
 80055f0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80055f2:	4618      	mov	r0, r3
 80055f4:	f7fe f9f2 	bl	80039dc <HAL_DMA_Abort_IT>
 80055f8:	4603      	mov	r3, r0
 80055fa:	2b00      	cmp	r3, #0
 80055fc:	d022      	beq.n	8005644 <HAL_UART_AbortReceive_IT+0xc4>
      {
        /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
        huart->hdmarx->XferAbortCallback(huart->hdmarx);
 80055fe:	687b      	ldr	r3, [r7, #4]
 8005600:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005602:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005604:	687a      	ldr	r2, [r7, #4]
 8005606:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8005608:	4610      	mov	r0, r2
 800560a:	4798      	blx	r3
 800560c:	e01a      	b.n	8005644 <HAL_UART_AbortReceive_IT+0xc4>
      }
    }
    else
    {
      /* Reset Rx transfer counter */
      huart->RxXferCount = 0x00U;
 800560e:	687b      	ldr	r3, [r7, #4]
 8005610:	2200      	movs	r2, #0
 8005612:	85da      	strh	r2, [r3, #46]	; 0x2e

      /* Restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8005614:	687b      	ldr	r3, [r7, #4]
 8005616:	2220      	movs	r2, #32
 8005618:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800561c:	687b      	ldr	r3, [r7, #4]
 800561e:	2200      	movs	r2, #0
 8005620:	631a      	str	r2, [r3, #48]	; 0x30
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
      /* Call registered Abort Receive Complete Callback */
      huart->AbortReceiveCpltCallback(huart);
#else
      /* Call legacy weak Abort Receive Complete Callback */
      HAL_UART_AbortReceiveCpltCallback(huart);
 8005622:	6878      	ldr	r0, [r7, #4]
 8005624:	f000 f9c9 	bl	80059ba <HAL_UART_AbortReceiveCpltCallback>
 8005628:	e00c      	b.n	8005644 <HAL_UART_AbortReceive_IT+0xc4>
    }
  }
  else
  {
    /* Reset Rx transfer counter */
    huart->RxXferCount = 0x00U;
 800562a:	687b      	ldr	r3, [r7, #4]
 800562c:	2200      	movs	r2, #0
 800562e:	85da      	strh	r2, [r3, #46]	; 0x2e

    /* Restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 8005630:	687b      	ldr	r3, [r7, #4]
 8005632:	2220      	movs	r2, #32
 8005634:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005638:	687b      	ldr	r3, [r7, #4]
 800563a:	2200      	movs	r2, #0
 800563c:	631a      	str	r2, [r3, #48]	; 0x30
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Abort Receive Complete Callback */
    huart->AbortReceiveCpltCallback(huart);
#else
    /* Call legacy weak Abort Receive Complete Callback */
    HAL_UART_AbortReceiveCpltCallback(huart);
 800563e:	6878      	ldr	r0, [r7, #4]
 8005640:	f000 f9bb 	bl	80059ba <HAL_UART_AbortReceiveCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }

  return HAL_OK;
 8005644:	2300      	movs	r3, #0
}
 8005646:	4618      	mov	r0, r3
 8005648:	3708      	adds	r7, #8
 800564a:	46bd      	mov	sp, r7
 800564c:	bd80      	pop	{r7, pc}
 800564e:	bf00      	nop
 8005650:	08005ba3 	.word	0x08005ba3

08005654 <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8005654:	b580      	push	{r7, lr}
 8005656:	b08a      	sub	sp, #40	; 0x28
 8005658:	af00      	add	r7, sp, #0
 800565a:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 800565c:	687b      	ldr	r3, [r7, #4]
 800565e:	681b      	ldr	r3, [r3, #0]
 8005660:	681b      	ldr	r3, [r3, #0]
 8005662:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8005664:	687b      	ldr	r3, [r7, #4]
 8005666:	681b      	ldr	r3, [r3, #0]
 8005668:	68db      	ldr	r3, [r3, #12]
 800566a:	623b      	str	r3, [r7, #32]
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 800566c:	687b      	ldr	r3, [r7, #4]
 800566e:	681b      	ldr	r3, [r3, #0]
 8005670:	695b      	ldr	r3, [r3, #20]
 8005672:	61fb      	str	r3, [r7, #28]
  uint32_t errorflags = 0x00U;
 8005674:	2300      	movs	r3, #0
 8005676:	61bb      	str	r3, [r7, #24]
  uint32_t dmarequest = 0x00U;
 8005678:	2300      	movs	r3, #0
 800567a:	617b      	str	r3, [r7, #20]

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 800567c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800567e:	f003 030f 	and.w	r3, r3, #15
 8005682:	61bb      	str	r3, [r7, #24]
  if (errorflags == RESET)
 8005684:	69bb      	ldr	r3, [r7, #24]
 8005686:	2b00      	cmp	r3, #0
 8005688:	d10d      	bne.n	80056a6 <HAL_UART_IRQHandler+0x52>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 800568a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800568c:	f003 0320 	and.w	r3, r3, #32
 8005690:	2b00      	cmp	r3, #0
 8005692:	d008      	beq.n	80056a6 <HAL_UART_IRQHandler+0x52>
 8005694:	6a3b      	ldr	r3, [r7, #32]
 8005696:	f003 0320 	and.w	r3, r3, #32
 800569a:	2b00      	cmp	r3, #0
 800569c:	d003      	beq.n	80056a6 <HAL_UART_IRQHandler+0x52>
    {
      UART_Receive_IT(huart);
 800569e:	6878      	ldr	r0, [r7, #4]
 80056a0:	f000 fafe 	bl	8005ca0 <UART_Receive_IT>
      return;
 80056a4:	e17b      	b.n	800599e <HAL_UART_IRQHandler+0x34a>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET) || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 80056a6:	69bb      	ldr	r3, [r7, #24]
 80056a8:	2b00      	cmp	r3, #0
 80056aa:	f000 80b1 	beq.w	8005810 <HAL_UART_IRQHandler+0x1bc>
 80056ae:	69fb      	ldr	r3, [r7, #28]
 80056b0:	f003 0301 	and.w	r3, r3, #1
 80056b4:	2b00      	cmp	r3, #0
 80056b6:	d105      	bne.n	80056c4 <HAL_UART_IRQHandler+0x70>
 80056b8:	6a3b      	ldr	r3, [r7, #32]
 80056ba:	f403 7390 	and.w	r3, r3, #288	; 0x120
 80056be:	2b00      	cmp	r3, #0
 80056c0:	f000 80a6 	beq.w	8005810 <HAL_UART_IRQHandler+0x1bc>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 80056c4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80056c6:	f003 0301 	and.w	r3, r3, #1
 80056ca:	2b00      	cmp	r3, #0
 80056cc:	d00a      	beq.n	80056e4 <HAL_UART_IRQHandler+0x90>
 80056ce:	6a3b      	ldr	r3, [r7, #32]
 80056d0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80056d4:	2b00      	cmp	r3, #0
 80056d6:	d005      	beq.n	80056e4 <HAL_UART_IRQHandler+0x90>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 80056d8:	687b      	ldr	r3, [r7, #4]
 80056da:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80056dc:	f043 0201 	orr.w	r2, r3, #1
 80056e0:	687b      	ldr	r3, [r7, #4]
 80056e2:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 80056e4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80056e6:	f003 0304 	and.w	r3, r3, #4
 80056ea:	2b00      	cmp	r3, #0
 80056ec:	d00a      	beq.n	8005704 <HAL_UART_IRQHandler+0xb0>
 80056ee:	69fb      	ldr	r3, [r7, #28]
 80056f0:	f003 0301 	and.w	r3, r3, #1
 80056f4:	2b00      	cmp	r3, #0
 80056f6:	d005      	beq.n	8005704 <HAL_UART_IRQHandler+0xb0>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 80056f8:	687b      	ldr	r3, [r7, #4]
 80056fa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80056fc:	f043 0202 	orr.w	r2, r3, #2
 8005700:	687b      	ldr	r3, [r7, #4]
 8005702:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8005704:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005706:	f003 0302 	and.w	r3, r3, #2
 800570a:	2b00      	cmp	r3, #0
 800570c:	d00a      	beq.n	8005724 <HAL_UART_IRQHandler+0xd0>
 800570e:	69fb      	ldr	r3, [r7, #28]
 8005710:	f003 0301 	and.w	r3, r3, #1
 8005714:	2b00      	cmp	r3, #0
 8005716:	d005      	beq.n	8005724 <HAL_UART_IRQHandler+0xd0>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8005718:	687b      	ldr	r3, [r7, #4]
 800571a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800571c:	f043 0204 	orr.w	r2, r3, #4
 8005720:	687b      	ldr	r3, [r7, #4]
 8005722:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET) || ((cr3its & USART_CR3_EIE) != RESET)))
 8005724:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005726:	f003 0308 	and.w	r3, r3, #8
 800572a:	2b00      	cmp	r3, #0
 800572c:	d00f      	beq.n	800574e <HAL_UART_IRQHandler+0xfa>
 800572e:	6a3b      	ldr	r3, [r7, #32]
 8005730:	f003 0320 	and.w	r3, r3, #32
 8005734:	2b00      	cmp	r3, #0
 8005736:	d104      	bne.n	8005742 <HAL_UART_IRQHandler+0xee>
 8005738:	69fb      	ldr	r3, [r7, #28]
 800573a:	f003 0301 	and.w	r3, r3, #1
 800573e:	2b00      	cmp	r3, #0
 8005740:	d005      	beq.n	800574e <HAL_UART_IRQHandler+0xfa>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8005742:	687b      	ldr	r3, [r7, #4]
 8005744:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005746:	f043 0208 	orr.w	r2, r3, #8
 800574a:	687b      	ldr	r3, [r7, #4]
 800574c:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 800574e:	687b      	ldr	r3, [r7, #4]
 8005750:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005752:	2b00      	cmp	r3, #0
 8005754:	f000 811e 	beq.w	8005994 <HAL_UART_IRQHandler+0x340>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8005758:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800575a:	f003 0320 	and.w	r3, r3, #32
 800575e:	2b00      	cmp	r3, #0
 8005760:	d007      	beq.n	8005772 <HAL_UART_IRQHandler+0x11e>
 8005762:	6a3b      	ldr	r3, [r7, #32]
 8005764:	f003 0320 	and.w	r3, r3, #32
 8005768:	2b00      	cmp	r3, #0
 800576a:	d002      	beq.n	8005772 <HAL_UART_IRQHandler+0x11e>
      {
        UART_Receive_IT(huart);
 800576c:	6878      	ldr	r0, [r7, #4]
 800576e:	f000 fa97 	bl	8005ca0 <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8005772:	687b      	ldr	r3, [r7, #4]
 8005774:	681b      	ldr	r3, [r3, #0]
 8005776:	695b      	ldr	r3, [r3, #20]
 8005778:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800577c:	2b00      	cmp	r3, #0
 800577e:	bf14      	ite	ne
 8005780:	2301      	movne	r3, #1
 8005782:	2300      	moveq	r3, #0
 8005784:	b2db      	uxtb	r3, r3
 8005786:	617b      	str	r3, [r7, #20]
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 8005788:	687b      	ldr	r3, [r7, #4]
 800578a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800578c:	f003 0308 	and.w	r3, r3, #8
 8005790:	2b00      	cmp	r3, #0
 8005792:	d102      	bne.n	800579a <HAL_UART_IRQHandler+0x146>
 8005794:	697b      	ldr	r3, [r7, #20]
 8005796:	2b00      	cmp	r3, #0
 8005798:	d031      	beq.n	80057fe <HAL_UART_IRQHandler+0x1aa>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 800579a:	6878      	ldr	r0, [r7, #4]
 800579c:	f000 f9c1 	bl	8005b22 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80057a0:	687b      	ldr	r3, [r7, #4]
 80057a2:	681b      	ldr	r3, [r3, #0]
 80057a4:	695b      	ldr	r3, [r3, #20]
 80057a6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80057aa:	2b00      	cmp	r3, #0
 80057ac:	d023      	beq.n	80057f6 <HAL_UART_IRQHandler+0x1a2>
        {
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80057ae:	687b      	ldr	r3, [r7, #4]
 80057b0:	681b      	ldr	r3, [r3, #0]
 80057b2:	695a      	ldr	r2, [r3, #20]
 80057b4:	687b      	ldr	r3, [r7, #4]
 80057b6:	681b      	ldr	r3, [r3, #0]
 80057b8:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80057bc:	615a      	str	r2, [r3, #20]

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 80057be:	687b      	ldr	r3, [r7, #4]
 80057c0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80057c2:	2b00      	cmp	r3, #0
 80057c4:	d013      	beq.n	80057ee <HAL_UART_IRQHandler+0x19a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 80057c6:	687b      	ldr	r3, [r7, #4]
 80057c8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80057ca:	4a76      	ldr	r2, [pc, #472]	; (80059a4 <HAL_UART_IRQHandler+0x350>)
 80057cc:	635a      	str	r2, [r3, #52]	; 0x34
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 80057ce:	687b      	ldr	r3, [r7, #4]
 80057d0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80057d2:	4618      	mov	r0, r3
 80057d4:	f7fe f902 	bl	80039dc <HAL_DMA_Abort_IT>
 80057d8:	4603      	mov	r3, r0
 80057da:	2b00      	cmp	r3, #0
 80057dc:	d016      	beq.n	800580c <HAL_UART_IRQHandler+0x1b8>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 80057de:	687b      	ldr	r3, [r7, #4]
 80057e0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80057e2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80057e4:	687a      	ldr	r2, [r7, #4]
 80057e6:	6b92      	ldr	r2, [r2, #56]	; 0x38
 80057e8:	4610      	mov	r0, r2
 80057ea:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80057ec:	e00e      	b.n	800580c <HAL_UART_IRQHandler+0x1b8>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 80057ee:	6878      	ldr	r0, [r7, #4]
 80057f0:	f000 f8da 	bl	80059a8 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80057f4:	e00a      	b.n	800580c <HAL_UART_IRQHandler+0x1b8>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 80057f6:	6878      	ldr	r0, [r7, #4]
 80057f8:	f000 f8d6 	bl	80059a8 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80057fc:	e006      	b.n	800580c <HAL_UART_IRQHandler+0x1b8>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 80057fe:	6878      	ldr	r0, [r7, #4]
 8005800:	f000 f8d2 	bl	80059a8 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005804:	687b      	ldr	r3, [r7, #4]
 8005806:	2200      	movs	r2, #0
 8005808:	641a      	str	r2, [r3, #64]	; 0x40
      }
    }
    return;
 800580a:	e0c3      	b.n	8005994 <HAL_UART_IRQHandler+0x340>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800580c:	bf00      	nop
    return;
 800580e:	e0c1      	b.n	8005994 <HAL_UART_IRQHandler+0x340>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if (  (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8005810:	687b      	ldr	r3, [r7, #4]
 8005812:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005814:	2b01      	cmp	r3, #1
 8005816:	f040 80a1 	bne.w	800595c <HAL_UART_IRQHandler+0x308>
      &&((isrflags & USART_SR_IDLE) != 0U)
 800581a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800581c:	f003 0310 	and.w	r3, r3, #16
 8005820:	2b00      	cmp	r3, #0
 8005822:	f000 809b 	beq.w	800595c <HAL_UART_IRQHandler+0x308>
      &&((cr1its & USART_SR_IDLE) != 0U))
 8005826:	6a3b      	ldr	r3, [r7, #32]
 8005828:	f003 0310 	and.w	r3, r3, #16
 800582c:	2b00      	cmp	r3, #0
 800582e:	f000 8095 	beq.w	800595c <HAL_UART_IRQHandler+0x308>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 8005832:	2300      	movs	r3, #0
 8005834:	60fb      	str	r3, [r7, #12]
 8005836:	687b      	ldr	r3, [r7, #4]
 8005838:	681b      	ldr	r3, [r3, #0]
 800583a:	681b      	ldr	r3, [r3, #0]
 800583c:	60fb      	str	r3, [r7, #12]
 800583e:	687b      	ldr	r3, [r7, #4]
 8005840:	681b      	ldr	r3, [r3, #0]
 8005842:	685b      	ldr	r3, [r3, #4]
 8005844:	60fb      	str	r3, [r7, #12]
 8005846:	68fb      	ldr	r3, [r7, #12]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005848:	687b      	ldr	r3, [r7, #4]
 800584a:	681b      	ldr	r3, [r3, #0]
 800584c:	695b      	ldr	r3, [r3, #20]
 800584e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005852:	2b00      	cmp	r3, #0
 8005854:	d04e      	beq.n	80058f4 <HAL_UART_IRQHandler+0x2a0>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8005856:	687b      	ldr	r3, [r7, #4]
 8005858:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800585a:	681b      	ldr	r3, [r3, #0]
 800585c:	685b      	ldr	r3, [r3, #4]
 800585e:	823b      	strh	r3, [r7, #16]
      if (  (nb_remaining_rx_data > 0U)
 8005860:	8a3b      	ldrh	r3, [r7, #16]
 8005862:	2b00      	cmp	r3, #0
 8005864:	f000 8098 	beq.w	8005998 <HAL_UART_IRQHandler+0x344>
          &&(nb_remaining_rx_data < huart->RxXferSize))
 8005868:	687b      	ldr	r3, [r7, #4]
 800586a:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 800586c:	8a3a      	ldrh	r2, [r7, #16]
 800586e:	429a      	cmp	r2, r3
 8005870:	f080 8092 	bcs.w	8005998 <HAL_UART_IRQHandler+0x344>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8005874:	687b      	ldr	r3, [r7, #4]
 8005876:	8a3a      	ldrh	r2, [r7, #16]
 8005878:	85da      	strh	r2, [r3, #46]	; 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 800587a:	687b      	ldr	r3, [r7, #4]
 800587c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800587e:	699b      	ldr	r3, [r3, #24]
 8005880:	2b20      	cmp	r3, #32
 8005882:	d02b      	beq.n	80058dc <HAL_UART_IRQHandler+0x288>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8005884:	687b      	ldr	r3, [r7, #4]
 8005886:	681b      	ldr	r3, [r3, #0]
 8005888:	68da      	ldr	r2, [r3, #12]
 800588a:	687b      	ldr	r3, [r7, #4]
 800588c:	681b      	ldr	r3, [r3, #0]
 800588e:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8005892:	60da      	str	r2, [r3, #12]
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005894:	687b      	ldr	r3, [r7, #4]
 8005896:	681b      	ldr	r3, [r3, #0]
 8005898:	695a      	ldr	r2, [r3, #20]
 800589a:	687b      	ldr	r3, [r7, #4]
 800589c:	681b      	ldr	r3, [r3, #0]
 800589e:	f022 0201 	bic.w	r2, r2, #1
 80058a2:	615a      	str	r2, [r3, #20]

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80058a4:	687b      	ldr	r3, [r7, #4]
 80058a6:	681b      	ldr	r3, [r3, #0]
 80058a8:	695a      	ldr	r2, [r3, #20]
 80058aa:	687b      	ldr	r3, [r7, #4]
 80058ac:	681b      	ldr	r3, [r3, #0]
 80058ae:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80058b2:	615a      	str	r2, [r3, #20]

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 80058b4:	687b      	ldr	r3, [r7, #4]
 80058b6:	2220      	movs	r2, #32
 80058b8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80058bc:	687b      	ldr	r3, [r7, #4]
 80058be:	2200      	movs	r2, #0
 80058c0:	631a      	str	r2, [r3, #48]	; 0x30

          CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80058c2:	687b      	ldr	r3, [r7, #4]
 80058c4:	681b      	ldr	r3, [r3, #0]
 80058c6:	68da      	ldr	r2, [r3, #12]
 80058c8:	687b      	ldr	r3, [r7, #4]
 80058ca:	681b      	ldr	r3, [r3, #0]
 80058cc:	f022 0210 	bic.w	r2, r2, #16
 80058d0:	60da      	str	r2, [r3, #12]

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 80058d2:	687b      	ldr	r3, [r7, #4]
 80058d4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80058d6:	4618      	mov	r0, r3
 80058d8:	f7fe f845 	bl	8003966 <HAL_DMA_Abort>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 80058dc:	687b      	ldr	r3, [r7, #4]
 80058de:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 80058e0:	687b      	ldr	r3, [r7, #4]
 80058e2:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 80058e4:	b29b      	uxth	r3, r3
 80058e6:	1ad3      	subs	r3, r2, r3
 80058e8:	b29b      	uxth	r3, r3
 80058ea:	4619      	mov	r1, r3
 80058ec:	6878      	ldr	r0, [r7, #4]
 80058ee:	f000 f86d 	bl	80059cc <HAL_UARTEx_RxEventCallback>
#endif
      }
      return;
 80058f2:	e051      	b.n	8005998 <HAL_UART_IRQHandler+0x344>
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 80058f4:	687b      	ldr	r3, [r7, #4]
 80058f6:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 80058f8:	687b      	ldr	r3, [r7, #4]
 80058fa:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 80058fc:	b29b      	uxth	r3, r3
 80058fe:	1ad3      	subs	r3, r2, r3
 8005900:	827b      	strh	r3, [r7, #18]
      if (  (huart->RxXferCount > 0U)
 8005902:	687b      	ldr	r3, [r7, #4]
 8005904:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8005906:	b29b      	uxth	r3, r3
 8005908:	2b00      	cmp	r3, #0
 800590a:	d047      	beq.n	800599c <HAL_UART_IRQHandler+0x348>
          &&(nb_rx_data > 0U) )
 800590c:	8a7b      	ldrh	r3, [r7, #18]
 800590e:	2b00      	cmp	r3, #0
 8005910:	d044      	beq.n	800599c <HAL_UART_IRQHandler+0x348>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8005912:	687b      	ldr	r3, [r7, #4]
 8005914:	681b      	ldr	r3, [r3, #0]
 8005916:	68da      	ldr	r2, [r3, #12]
 8005918:	687b      	ldr	r3, [r7, #4]
 800591a:	681b      	ldr	r3, [r3, #0]
 800591c:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 8005920:	60da      	str	r2, [r3, #12]

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005922:	687b      	ldr	r3, [r7, #4]
 8005924:	681b      	ldr	r3, [r3, #0]
 8005926:	695a      	ldr	r2, [r3, #20]
 8005928:	687b      	ldr	r3, [r7, #4]
 800592a:	681b      	ldr	r3, [r3, #0]
 800592c:	f022 0201 	bic.w	r2, r2, #1
 8005930:	615a      	str	r2, [r3, #20]

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8005932:	687b      	ldr	r3, [r7, #4]
 8005934:	2220      	movs	r2, #32
 8005936:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800593a:	687b      	ldr	r3, [r7, #4]
 800593c:	2200      	movs	r2, #0
 800593e:	631a      	str	r2, [r3, #48]	; 0x30

        CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8005940:	687b      	ldr	r3, [r7, #4]
 8005942:	681b      	ldr	r3, [r3, #0]
 8005944:	68da      	ldr	r2, [r3, #12]
 8005946:	687b      	ldr	r3, [r7, #4]
 8005948:	681b      	ldr	r3, [r3, #0]
 800594a:	f022 0210 	bic.w	r2, r2, #16
 800594e:	60da      	str	r2, [r3, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8005950:	8a7b      	ldrh	r3, [r7, #18]
 8005952:	4619      	mov	r1, r3
 8005954:	6878      	ldr	r0, [r7, #4]
 8005956:	f000 f839 	bl	80059cc <HAL_UARTEx_RxEventCallback>
#endif
      }
      return;
 800595a:	e01f      	b.n	800599c <HAL_UART_IRQHandler+0x348>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 800595c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800595e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005962:	2b00      	cmp	r3, #0
 8005964:	d008      	beq.n	8005978 <HAL_UART_IRQHandler+0x324>
 8005966:	6a3b      	ldr	r3, [r7, #32]
 8005968:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800596c:	2b00      	cmp	r3, #0
 800596e:	d003      	beq.n	8005978 <HAL_UART_IRQHandler+0x324>
  {
    UART_Transmit_IT(huart);
 8005970:	6878      	ldr	r0, [r7, #4]
 8005972:	f000 f92e 	bl	8005bd2 <UART_Transmit_IT>
    return;
 8005976:	e012      	b.n	800599e <HAL_UART_IRQHandler+0x34a>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 8005978:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800597a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800597e:	2b00      	cmp	r3, #0
 8005980:	d00d      	beq.n	800599e <HAL_UART_IRQHandler+0x34a>
 8005982:	6a3b      	ldr	r3, [r7, #32]
 8005984:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005988:	2b00      	cmp	r3, #0
 800598a:	d008      	beq.n	800599e <HAL_UART_IRQHandler+0x34a>
  {
    UART_EndTransmit_IT(huart);
 800598c:	6878      	ldr	r0, [r7, #4]
 800598e:	f000 f96f 	bl	8005c70 <UART_EndTransmit_IT>
    return;
 8005992:	e004      	b.n	800599e <HAL_UART_IRQHandler+0x34a>
    return;
 8005994:	bf00      	nop
 8005996:	e002      	b.n	800599e <HAL_UART_IRQHandler+0x34a>
      return;
 8005998:	bf00      	nop
 800599a:	e000      	b.n	800599e <HAL_UART_IRQHandler+0x34a>
      return;
 800599c:	bf00      	nop
  }
}
 800599e:	3728      	adds	r7, #40	; 0x28
 80059a0:	46bd      	mov	sp, r7
 80059a2:	bd80      	pop	{r7, pc}
 80059a4:	08005b7b 	.word	0x08005b7b

080059a8 <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 80059a8:	b480      	push	{r7}
 80059aa:	b083      	sub	sp, #12
 80059ac:	af00      	add	r7, sp, #0
 80059ae:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 80059b0:	bf00      	nop
 80059b2:	370c      	adds	r7, #12
 80059b4:	46bd      	mov	sp, r7
 80059b6:	bc80      	pop	{r7}
 80059b8:	4770      	bx	lr

080059ba <HAL_UART_AbortReceiveCpltCallback>:
  * @brief  UART Abort Receive Complete callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_AbortReceiveCpltCallback(UART_HandleTypeDef *huart)
{
 80059ba:	b480      	push	{r7}
 80059bc:	b083      	sub	sp, #12
 80059be:	af00      	add	r7, sp, #0
 80059c0:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_AbortReceiveCpltCallback can be implemented in the user file.
   */
}
 80059c2:	bf00      	nop
 80059c4:	370c      	adds	r7, #12
 80059c6:	46bd      	mov	sp, r7
 80059c8:	bc80      	pop	{r7}
 80059ca:	4770      	bx	lr

080059cc <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 80059cc:	b480      	push	{r7}
 80059ce:	b083      	sub	sp, #12
 80059d0:	af00      	add	r7, sp, #0
 80059d2:	6078      	str	r0, [r7, #4]
 80059d4:	460b      	mov	r3, r1
 80059d6:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 80059d8:	bf00      	nop
 80059da:	370c      	adds	r7, #12
 80059dc:	46bd      	mov	sp, r7
 80059de:	bc80      	pop	{r7}
 80059e0:	4770      	bx	lr

080059e2 <HAL_UART_GetState>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL state
  */
HAL_UART_StateTypeDef HAL_UART_GetState(UART_HandleTypeDef *huart)
{
 80059e2:	b480      	push	{r7}
 80059e4:	b085      	sub	sp, #20
 80059e6:	af00      	add	r7, sp, #0
 80059e8:	6078      	str	r0, [r7, #4]
  uint32_t temp1 = 0x00U, temp2 = 0x00U;
 80059ea:	2300      	movs	r3, #0
 80059ec:	60fb      	str	r3, [r7, #12]
 80059ee:	2300      	movs	r3, #0
 80059f0:	60bb      	str	r3, [r7, #8]
  temp1 = huart->gState;
 80059f2:	687b      	ldr	r3, [r7, #4]
 80059f4:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80059f8:	b2db      	uxtb	r3, r3
 80059fa:	60fb      	str	r3, [r7, #12]
  temp2 = huart->RxState;
 80059fc:	687b      	ldr	r3, [r7, #4]
 80059fe:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8005a02:	b2db      	uxtb	r3, r3
 8005a04:	60bb      	str	r3, [r7, #8]

  return (HAL_UART_StateTypeDef)(temp1 | temp2);
 8005a06:	68fb      	ldr	r3, [r7, #12]
 8005a08:	b2da      	uxtb	r2, r3
 8005a0a:	68bb      	ldr	r3, [r7, #8]
 8005a0c:	b2db      	uxtb	r3, r3
 8005a0e:	4313      	orrs	r3, r2
 8005a10:	b2db      	uxtb	r3, r3
}
 8005a12:	4618      	mov	r0, r3
 8005a14:	3714      	adds	r7, #20
 8005a16:	46bd      	mov	sp, r7
 8005a18:	bc80      	pop	{r7}
 8005a1a:	4770      	bx	lr

08005a1c <UART_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status, uint32_t Tickstart, uint32_t Timeout)
{
 8005a1c:	b580      	push	{r7, lr}
 8005a1e:	b084      	sub	sp, #16
 8005a20:	af00      	add	r7, sp, #0
 8005a22:	60f8      	str	r0, [r7, #12]
 8005a24:	60b9      	str	r1, [r7, #8]
 8005a26:	603b      	str	r3, [r7, #0]
 8005a28:	4613      	mov	r3, r2
 8005a2a:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8005a2c:	e02c      	b.n	8005a88 <UART_WaitOnFlagUntilTimeout+0x6c>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8005a2e:	69bb      	ldr	r3, [r7, #24]
 8005a30:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005a34:	d028      	beq.n	8005a88 <UART_WaitOnFlagUntilTimeout+0x6c>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 8005a36:	69bb      	ldr	r3, [r7, #24]
 8005a38:	2b00      	cmp	r3, #0
 8005a3a:	d007      	beq.n	8005a4c <UART_WaitOnFlagUntilTimeout+0x30>
 8005a3c:	f7fd fb56 	bl	80030ec <HAL_GetTick>
 8005a40:	4602      	mov	r2, r0
 8005a42:	683b      	ldr	r3, [r7, #0]
 8005a44:	1ad3      	subs	r3, r2, r3
 8005a46:	69ba      	ldr	r2, [r7, #24]
 8005a48:	429a      	cmp	r2, r3
 8005a4a:	d21d      	bcs.n	8005a88 <UART_WaitOnFlagUntilTimeout+0x6c>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8005a4c:	68fb      	ldr	r3, [r7, #12]
 8005a4e:	681b      	ldr	r3, [r3, #0]
 8005a50:	68da      	ldr	r2, [r3, #12]
 8005a52:	68fb      	ldr	r3, [r7, #12]
 8005a54:	681b      	ldr	r3, [r3, #0]
 8005a56:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 8005a5a:	60da      	str	r2, [r3, #12]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005a5c:	68fb      	ldr	r3, [r7, #12]
 8005a5e:	681b      	ldr	r3, [r3, #0]
 8005a60:	695a      	ldr	r2, [r3, #20]
 8005a62:	68fb      	ldr	r3, [r7, #12]
 8005a64:	681b      	ldr	r3, [r3, #0]
 8005a66:	f022 0201 	bic.w	r2, r2, #1
 8005a6a:	615a      	str	r2, [r3, #20]

        huart->gState  = HAL_UART_STATE_READY;
 8005a6c:	68fb      	ldr	r3, [r7, #12]
 8005a6e:	2220      	movs	r2, #32
 8005a70:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        huart->RxState = HAL_UART_STATE_READY;
 8005a74:	68fb      	ldr	r3, [r7, #12]
 8005a76:	2220      	movs	r2, #32
 8005a78:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 8005a7c:	68fb      	ldr	r3, [r7, #12]
 8005a7e:	2200      	movs	r2, #0
 8005a80:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_TIMEOUT;
 8005a84:	2303      	movs	r3, #3
 8005a86:	e00f      	b.n	8005aa8 <UART_WaitOnFlagUntilTimeout+0x8c>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8005a88:	68fb      	ldr	r3, [r7, #12]
 8005a8a:	681b      	ldr	r3, [r3, #0]
 8005a8c:	681a      	ldr	r2, [r3, #0]
 8005a8e:	68bb      	ldr	r3, [r7, #8]
 8005a90:	4013      	ands	r3, r2
 8005a92:	68ba      	ldr	r2, [r7, #8]
 8005a94:	429a      	cmp	r2, r3
 8005a96:	bf0c      	ite	eq
 8005a98:	2301      	moveq	r3, #1
 8005a9a:	2300      	movne	r3, #0
 8005a9c:	b2db      	uxtb	r3, r3
 8005a9e:	461a      	mov	r2, r3
 8005aa0:	79fb      	ldrb	r3, [r7, #7]
 8005aa2:	429a      	cmp	r2, r3
 8005aa4:	d0c3      	beq.n	8005a2e <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8005aa6:	2300      	movs	r3, #0
}
 8005aa8:	4618      	mov	r0, r3
 8005aaa:	3710      	adds	r7, #16
 8005aac:	46bd      	mov	sp, r7
 8005aae:	bd80      	pop	{r7, pc}

08005ab0 <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8005ab0:	b480      	push	{r7}
 8005ab2:	b085      	sub	sp, #20
 8005ab4:	af00      	add	r7, sp, #0
 8005ab6:	60f8      	str	r0, [r7, #12]
 8005ab8:	60b9      	str	r1, [r7, #8]
 8005aba:	4613      	mov	r3, r2
 8005abc:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr = pData;
 8005abe:	68fb      	ldr	r3, [r7, #12]
 8005ac0:	68ba      	ldr	r2, [r7, #8]
 8005ac2:	629a      	str	r2, [r3, #40]	; 0x28
  huart->RxXferSize = Size;
 8005ac4:	68fb      	ldr	r3, [r7, #12]
 8005ac6:	88fa      	ldrh	r2, [r7, #6]
 8005ac8:	859a      	strh	r2, [r3, #44]	; 0x2c
  huart->RxXferCount = Size;
 8005aca:	68fb      	ldr	r3, [r7, #12]
 8005acc:	88fa      	ldrh	r2, [r7, #6]
 8005ace:	85da      	strh	r2, [r3, #46]	; 0x2e

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005ad0:	68fb      	ldr	r3, [r7, #12]
 8005ad2:	2200      	movs	r2, #0
 8005ad4:	641a      	str	r2, [r3, #64]	; 0x40
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 8005ad6:	68fb      	ldr	r3, [r7, #12]
 8005ad8:	2222      	movs	r2, #34	; 0x22
 8005ada:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8005ade:	68fb      	ldr	r3, [r7, #12]
 8005ae0:	2200      	movs	r2, #0
 8005ae2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Enable the UART Parity Error Interrupt */
  __HAL_UART_ENABLE_IT(huart, UART_IT_PE);
 8005ae6:	68fb      	ldr	r3, [r7, #12]
 8005ae8:	681b      	ldr	r3, [r3, #0]
 8005aea:	68da      	ldr	r2, [r3, #12]
 8005aec:	68fb      	ldr	r3, [r7, #12]
 8005aee:	681b      	ldr	r3, [r3, #0]
 8005af0:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8005af4:	60da      	str	r2, [r3, #12]

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  __HAL_UART_ENABLE_IT(huart, UART_IT_ERR);
 8005af6:	68fb      	ldr	r3, [r7, #12]
 8005af8:	681b      	ldr	r3, [r3, #0]
 8005afa:	695a      	ldr	r2, [r3, #20]
 8005afc:	68fb      	ldr	r3, [r7, #12]
 8005afe:	681b      	ldr	r3, [r3, #0]
 8005b00:	f042 0201 	orr.w	r2, r2, #1
 8005b04:	615a      	str	r2, [r3, #20]

  /* Enable the UART Data Register not empty Interrupt */
  __HAL_UART_ENABLE_IT(huart, UART_IT_RXNE);
 8005b06:	68fb      	ldr	r3, [r7, #12]
 8005b08:	681b      	ldr	r3, [r3, #0]
 8005b0a:	68da      	ldr	r2, [r3, #12]
 8005b0c:	68fb      	ldr	r3, [r7, #12]
 8005b0e:	681b      	ldr	r3, [r3, #0]
 8005b10:	f042 0220 	orr.w	r2, r2, #32
 8005b14:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 8005b16:	2300      	movs	r3, #0
}
 8005b18:	4618      	mov	r0, r3
 8005b1a:	3714      	adds	r7, #20
 8005b1c:	46bd      	mov	sp, r7
 8005b1e:	bc80      	pop	{r7}
 8005b20:	4770      	bx	lr

08005b22 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8005b22:	b480      	push	{r7}
 8005b24:	b083      	sub	sp, #12
 8005b26:	af00      	add	r7, sp, #0
 8005b28:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8005b2a:	687b      	ldr	r3, [r7, #4]
 8005b2c:	681b      	ldr	r3, [r3, #0]
 8005b2e:	68da      	ldr	r2, [r3, #12]
 8005b30:	687b      	ldr	r3, [r7, #4]
 8005b32:	681b      	ldr	r3, [r3, #0]
 8005b34:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 8005b38:	60da      	str	r2, [r3, #12]
  CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005b3a:	687b      	ldr	r3, [r7, #4]
 8005b3c:	681b      	ldr	r3, [r3, #0]
 8005b3e:	695a      	ldr	r2, [r3, #20]
 8005b40:	687b      	ldr	r3, [r7, #4]
 8005b42:	681b      	ldr	r3, [r3, #0]
 8005b44:	f022 0201 	bic.w	r2, r2, #1
 8005b48:	615a      	str	r2, [r3, #20]

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8005b4a:	687b      	ldr	r3, [r7, #4]
 8005b4c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005b4e:	2b01      	cmp	r3, #1
 8005b50:	d107      	bne.n	8005b62 <UART_EndRxTransfer+0x40>
  {
    CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8005b52:	687b      	ldr	r3, [r7, #4]
 8005b54:	681b      	ldr	r3, [r3, #0]
 8005b56:	68da      	ldr	r2, [r3, #12]
 8005b58:	687b      	ldr	r3, [r7, #4]
 8005b5a:	681b      	ldr	r3, [r3, #0]
 8005b5c:	f022 0210 	bic.w	r2, r2, #16
 8005b60:	60da      	str	r2, [r3, #12]
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8005b62:	687b      	ldr	r3, [r7, #4]
 8005b64:	2220      	movs	r2, #32
 8005b66:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005b6a:	687b      	ldr	r3, [r7, #4]
 8005b6c:	2200      	movs	r2, #0
 8005b6e:	631a      	str	r2, [r3, #48]	; 0x30
}
 8005b70:	bf00      	nop
 8005b72:	370c      	adds	r7, #12
 8005b74:	46bd      	mov	sp, r7
 8005b76:	bc80      	pop	{r7}
 8005b78:	4770      	bx	lr

08005b7a <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8005b7a:	b580      	push	{r7, lr}
 8005b7c:	b084      	sub	sp, #16
 8005b7e:	af00      	add	r7, sp, #0
 8005b80:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8005b82:	687b      	ldr	r3, [r7, #4]
 8005b84:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005b86:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 8005b88:	68fb      	ldr	r3, [r7, #12]
 8005b8a:	2200      	movs	r2, #0
 8005b8c:	85da      	strh	r2, [r3, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 8005b8e:	68fb      	ldr	r3, [r7, #12]
 8005b90:	2200      	movs	r2, #0
 8005b92:	84da      	strh	r2, [r3, #38]	; 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8005b94:	68f8      	ldr	r0, [r7, #12]
 8005b96:	f7ff ff07 	bl	80059a8 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8005b9a:	bf00      	nop
 8005b9c:	3710      	adds	r7, #16
 8005b9e:	46bd      	mov	sp, r7
 8005ba0:	bd80      	pop	{r7, pc}

08005ba2 <UART_DMARxOnlyAbortCallback>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMARxOnlyAbortCallback(DMA_HandleTypeDef *hdma)
{
 8005ba2:	b580      	push	{r7, lr}
 8005ba4:	b084      	sub	sp, #16
 8005ba6:	af00      	add	r7, sp, #0
 8005ba8:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8005baa:	687b      	ldr	r3, [r7, #4]
 8005bac:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005bae:	60fb      	str	r3, [r7, #12]

  huart->RxXferCount = 0x00U;
 8005bb0:	68fb      	ldr	r3, [r7, #12]
 8005bb2:	2200      	movs	r2, #0
 8005bb4:	85da      	strh	r2, [r3, #46]	; 0x2e

  /* Restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8005bb6:	68fb      	ldr	r3, [r7, #12]
 8005bb8:	2220      	movs	r2, #32
 8005bba:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005bbe:	68fb      	ldr	r3, [r7, #12]
 8005bc0:	2200      	movs	r2, #0
 8005bc2:	631a      	str	r2, [r3, #48]	; 0x30
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /* Call registered Abort Receive Complete Callback */
  huart->AbortReceiveCpltCallback(huart);
#else
  /* Call legacy weak Abort Receive Complete Callback */
  HAL_UART_AbortReceiveCpltCallback(huart);
 8005bc4:	68f8      	ldr	r0, [r7, #12]
 8005bc6:	f7ff fef8 	bl	80059ba <HAL_UART_AbortReceiveCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8005bca:	bf00      	nop
 8005bcc:	3710      	adds	r7, #16
 8005bce:	46bd      	mov	sp, r7
 8005bd0:	bd80      	pop	{r7, pc}

08005bd2 <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 8005bd2:	b480      	push	{r7}
 8005bd4:	b085      	sub	sp, #20
 8005bd6:	af00      	add	r7, sp, #0
 8005bd8:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8005bda:	687b      	ldr	r3, [r7, #4]
 8005bdc:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005be0:	b2db      	uxtb	r3, r3
 8005be2:	2b21      	cmp	r3, #33	; 0x21
 8005be4:	d13e      	bne.n	8005c64 <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8005be6:	687b      	ldr	r3, [r7, #4]
 8005be8:	689b      	ldr	r3, [r3, #8]
 8005bea:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005bee:	d114      	bne.n	8005c1a <UART_Transmit_IT+0x48>
 8005bf0:	687b      	ldr	r3, [r7, #4]
 8005bf2:	691b      	ldr	r3, [r3, #16]
 8005bf4:	2b00      	cmp	r3, #0
 8005bf6:	d110      	bne.n	8005c1a <UART_Transmit_IT+0x48>
    {
      tmp = (uint16_t *) huart->pTxBuffPtr;
 8005bf8:	687b      	ldr	r3, [r7, #4]
 8005bfa:	6a1b      	ldr	r3, [r3, #32]
 8005bfc:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 8005bfe:	68fb      	ldr	r3, [r7, #12]
 8005c00:	881b      	ldrh	r3, [r3, #0]
 8005c02:	461a      	mov	r2, r3
 8005c04:	687b      	ldr	r3, [r7, #4]
 8005c06:	681b      	ldr	r3, [r3, #0]
 8005c08:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8005c0c:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 8005c0e:	687b      	ldr	r3, [r7, #4]
 8005c10:	6a1b      	ldr	r3, [r3, #32]
 8005c12:	1c9a      	adds	r2, r3, #2
 8005c14:	687b      	ldr	r3, [r7, #4]
 8005c16:	621a      	str	r2, [r3, #32]
 8005c18:	e008      	b.n	8005c2c <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 8005c1a:	687b      	ldr	r3, [r7, #4]
 8005c1c:	6a1b      	ldr	r3, [r3, #32]
 8005c1e:	1c59      	adds	r1, r3, #1
 8005c20:	687a      	ldr	r2, [r7, #4]
 8005c22:	6211      	str	r1, [r2, #32]
 8005c24:	781a      	ldrb	r2, [r3, #0]
 8005c26:	687b      	ldr	r3, [r7, #4]
 8005c28:	681b      	ldr	r3, [r3, #0]
 8005c2a:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 8005c2c:	687b      	ldr	r3, [r7, #4]
 8005c2e:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8005c30:	b29b      	uxth	r3, r3
 8005c32:	3b01      	subs	r3, #1
 8005c34:	b29b      	uxth	r3, r3
 8005c36:	687a      	ldr	r2, [r7, #4]
 8005c38:	4619      	mov	r1, r3
 8005c3a:	84d1      	strh	r1, [r2, #38]	; 0x26
 8005c3c:	2b00      	cmp	r3, #0
 8005c3e:	d10f      	bne.n	8005c60 <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Complete Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 8005c40:	687b      	ldr	r3, [r7, #4]
 8005c42:	681b      	ldr	r3, [r3, #0]
 8005c44:	68da      	ldr	r2, [r3, #12]
 8005c46:	687b      	ldr	r3, [r7, #4]
 8005c48:	681b      	ldr	r3, [r3, #0]
 8005c4a:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8005c4e:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 8005c50:	687b      	ldr	r3, [r7, #4]
 8005c52:	681b      	ldr	r3, [r3, #0]
 8005c54:	68da      	ldr	r2, [r3, #12]
 8005c56:	687b      	ldr	r3, [r7, #4]
 8005c58:	681b      	ldr	r3, [r3, #0]
 8005c5a:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8005c5e:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 8005c60:	2300      	movs	r3, #0
 8005c62:	e000      	b.n	8005c66 <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 8005c64:	2302      	movs	r3, #2
  }
}
 8005c66:	4618      	mov	r0, r3
 8005c68:	3714      	adds	r7, #20
 8005c6a:	46bd      	mov	sp, r7
 8005c6c:	bc80      	pop	{r7}
 8005c6e:	4770      	bx	lr

08005c70 <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8005c70:	b580      	push	{r7, lr}
 8005c72:	b082      	sub	sp, #8
 8005c74:	af00      	add	r7, sp, #0
 8005c76:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 8005c78:	687b      	ldr	r3, [r7, #4]
 8005c7a:	681b      	ldr	r3, [r3, #0]
 8005c7c:	68da      	ldr	r2, [r3, #12]
 8005c7e:	687b      	ldr	r3, [r7, #4]
 8005c80:	681b      	ldr	r3, [r3, #0]
 8005c82:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8005c86:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8005c88:	687b      	ldr	r3, [r7, #4]
 8005c8a:	2220      	movs	r2, #32
 8005c8c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8005c90:	6878      	ldr	r0, [r7, #4]
 8005c92:	f7fc fc5d 	bl	8002550 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 8005c96:	2300      	movs	r3, #0
}
 8005c98:	4618      	mov	r0, r3
 8005c9a:	3708      	adds	r7, #8
 8005c9c:	46bd      	mov	sp, r7
 8005c9e:	bd80      	pop	{r7, pc}

08005ca0 <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 8005ca0:	b580      	push	{r7, lr}
 8005ca2:	b086      	sub	sp, #24
 8005ca4:	af00      	add	r7, sp, #0
 8005ca6:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8005ca8:	687b      	ldr	r3, [r7, #4]
 8005caa:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8005cae:	b2db      	uxtb	r3, r3
 8005cb0:	2b22      	cmp	r3, #34	; 0x22
 8005cb2:	f040 8099 	bne.w	8005de8 <UART_Receive_IT+0x148>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8005cb6:	687b      	ldr	r3, [r7, #4]
 8005cb8:	689b      	ldr	r3, [r3, #8]
 8005cba:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005cbe:	d117      	bne.n	8005cf0 <UART_Receive_IT+0x50>
 8005cc0:	687b      	ldr	r3, [r7, #4]
 8005cc2:	691b      	ldr	r3, [r3, #16]
 8005cc4:	2b00      	cmp	r3, #0
 8005cc6:	d113      	bne.n	8005cf0 <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 8005cc8:	2300      	movs	r3, #0
 8005cca:	617b      	str	r3, [r7, #20]
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 8005ccc:	687b      	ldr	r3, [r7, #4]
 8005cce:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005cd0:	613b      	str	r3, [r7, #16]
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 8005cd2:	687b      	ldr	r3, [r7, #4]
 8005cd4:	681b      	ldr	r3, [r3, #0]
 8005cd6:	685b      	ldr	r3, [r3, #4]
 8005cd8:	b29b      	uxth	r3, r3
 8005cda:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005cde:	b29a      	uxth	r2, r3
 8005ce0:	693b      	ldr	r3, [r7, #16]
 8005ce2:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 8005ce4:	687b      	ldr	r3, [r7, #4]
 8005ce6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005ce8:	1c9a      	adds	r2, r3, #2
 8005cea:	687b      	ldr	r3, [r7, #4]
 8005cec:	629a      	str	r2, [r3, #40]	; 0x28
 8005cee:	e026      	b.n	8005d3e <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 8005cf0:	687b      	ldr	r3, [r7, #4]
 8005cf2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005cf4:	617b      	str	r3, [r7, #20]
      pdata16bits  = NULL;
 8005cf6:	2300      	movs	r3, #0
 8005cf8:	613b      	str	r3, [r7, #16]

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 8005cfa:	687b      	ldr	r3, [r7, #4]
 8005cfc:	689b      	ldr	r3, [r3, #8]
 8005cfe:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005d02:	d007      	beq.n	8005d14 <UART_Receive_IT+0x74>
 8005d04:	687b      	ldr	r3, [r7, #4]
 8005d06:	689b      	ldr	r3, [r3, #8]
 8005d08:	2b00      	cmp	r3, #0
 8005d0a:	d10a      	bne.n	8005d22 <UART_Receive_IT+0x82>
 8005d0c:	687b      	ldr	r3, [r7, #4]
 8005d0e:	691b      	ldr	r3, [r3, #16]
 8005d10:	2b00      	cmp	r3, #0
 8005d12:	d106      	bne.n	8005d22 <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 8005d14:	687b      	ldr	r3, [r7, #4]
 8005d16:	681b      	ldr	r3, [r3, #0]
 8005d18:	685b      	ldr	r3, [r3, #4]
 8005d1a:	b2da      	uxtb	r2, r3
 8005d1c:	697b      	ldr	r3, [r7, #20]
 8005d1e:	701a      	strb	r2, [r3, #0]
 8005d20:	e008      	b.n	8005d34 <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 8005d22:	687b      	ldr	r3, [r7, #4]
 8005d24:	681b      	ldr	r3, [r3, #0]
 8005d26:	685b      	ldr	r3, [r3, #4]
 8005d28:	b2db      	uxtb	r3, r3
 8005d2a:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8005d2e:	b2da      	uxtb	r2, r3
 8005d30:	697b      	ldr	r3, [r7, #20]
 8005d32:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 8005d34:	687b      	ldr	r3, [r7, #4]
 8005d36:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005d38:	1c5a      	adds	r2, r3, #1
 8005d3a:	687b      	ldr	r3, [r7, #4]
 8005d3c:	629a      	str	r2, [r3, #40]	; 0x28
    }

    if (--huart->RxXferCount == 0U)
 8005d3e:	687b      	ldr	r3, [r7, #4]
 8005d40:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8005d42:	b29b      	uxth	r3, r3
 8005d44:	3b01      	subs	r3, #1
 8005d46:	b29b      	uxth	r3, r3
 8005d48:	687a      	ldr	r2, [r7, #4]
 8005d4a:	4619      	mov	r1, r3
 8005d4c:	85d1      	strh	r1, [r2, #46]	; 0x2e
 8005d4e:	2b00      	cmp	r3, #0
 8005d50:	d148      	bne.n	8005de4 <UART_Receive_IT+0x144>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 8005d52:	687b      	ldr	r3, [r7, #4]
 8005d54:	681b      	ldr	r3, [r3, #0]
 8005d56:	68da      	ldr	r2, [r3, #12]
 8005d58:	687b      	ldr	r3, [r7, #4]
 8005d5a:	681b      	ldr	r3, [r3, #0]
 8005d5c:	f022 0220 	bic.w	r2, r2, #32
 8005d60:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 8005d62:	687b      	ldr	r3, [r7, #4]
 8005d64:	681b      	ldr	r3, [r3, #0]
 8005d66:	68da      	ldr	r2, [r3, #12]
 8005d68:	687b      	ldr	r3, [r7, #4]
 8005d6a:	681b      	ldr	r3, [r3, #0]
 8005d6c:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8005d70:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 8005d72:	687b      	ldr	r3, [r7, #4]
 8005d74:	681b      	ldr	r3, [r3, #0]
 8005d76:	695a      	ldr	r2, [r3, #20]
 8005d78:	687b      	ldr	r3, [r7, #4]
 8005d7a:	681b      	ldr	r3, [r3, #0]
 8005d7c:	f022 0201 	bic.w	r2, r2, #1
 8005d80:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8005d82:	687b      	ldr	r3, [r7, #4]
 8005d84:	2220      	movs	r2, #32
 8005d86:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8005d8a:	687b      	ldr	r3, [r7, #4]
 8005d8c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005d8e:	2b01      	cmp	r3, #1
 8005d90:	d123      	bne.n	8005dda <UART_Receive_IT+0x13a>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005d92:	687b      	ldr	r3, [r7, #4]
 8005d94:	2200      	movs	r2, #0
 8005d96:	631a      	str	r2, [r3, #48]	; 0x30

        /* Disable IDLE interrupt */
        CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8005d98:	687b      	ldr	r3, [r7, #4]
 8005d9a:	681b      	ldr	r3, [r3, #0]
 8005d9c:	68da      	ldr	r2, [r3, #12]
 8005d9e:	687b      	ldr	r3, [r7, #4]
 8005da0:	681b      	ldr	r3, [r3, #0]
 8005da2:	f022 0210 	bic.w	r2, r2, #16
 8005da6:	60da      	str	r2, [r3, #12]

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 8005da8:	687b      	ldr	r3, [r7, #4]
 8005daa:	681b      	ldr	r3, [r3, #0]
 8005dac:	681b      	ldr	r3, [r3, #0]
 8005dae:	f003 0310 	and.w	r3, r3, #16
 8005db2:	2b10      	cmp	r3, #16
 8005db4:	d10a      	bne.n	8005dcc <UART_Receive_IT+0x12c>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 8005db6:	2300      	movs	r3, #0
 8005db8:	60fb      	str	r3, [r7, #12]
 8005dba:	687b      	ldr	r3, [r7, #4]
 8005dbc:	681b      	ldr	r3, [r3, #0]
 8005dbe:	681b      	ldr	r3, [r3, #0]
 8005dc0:	60fb      	str	r3, [r7, #12]
 8005dc2:	687b      	ldr	r3, [r7, #4]
 8005dc4:	681b      	ldr	r3, [r3, #0]
 8005dc6:	685b      	ldr	r3, [r3, #4]
 8005dc8:	60fb      	str	r3, [r7, #12]
 8005dca:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8005dcc:	687b      	ldr	r3, [r7, #4]
 8005dce:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8005dd0:	4619      	mov	r1, r3
 8005dd2:	6878      	ldr	r0, [r7, #4]
 8005dd4:	f7ff fdfa 	bl	80059cc <HAL_UARTEx_RxEventCallback>
 8005dd8:	e002      	b.n	8005de0 <UART_Receive_IT+0x140>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)		  
       /*Call registered Rx complete callback*/
       huart->RxCpltCallback(huart);
#else
       /*Call legacy weak Rx complete callback*/
       HAL_UART_RxCpltCallback(huart);
 8005dda:	6878      	ldr	r0, [r7, #4]
 8005ddc:	f7fc fbf6 	bl	80025cc <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 8005de0:	2300      	movs	r3, #0
 8005de2:	e002      	b.n	8005dea <UART_Receive_IT+0x14a>
    }
    return HAL_OK;
 8005de4:	2300      	movs	r3, #0
 8005de6:	e000      	b.n	8005dea <UART_Receive_IT+0x14a>
  }
  else
  {
    return HAL_BUSY;
 8005de8:	2302      	movs	r3, #2
  }
}
 8005dea:	4618      	mov	r0, r3
 8005dec:	3718      	adds	r7, #24
 8005dee:	46bd      	mov	sp, r7
 8005df0:	bd80      	pop	{r7, pc}
	...

08005df4 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8005df4:	b580      	push	{r7, lr}
 8005df6:	b084      	sub	sp, #16
 8005df8:	af00      	add	r7, sp, #0
 8005dfa:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8005dfc:	687b      	ldr	r3, [r7, #4]
 8005dfe:	681b      	ldr	r3, [r3, #0]
 8005e00:	691b      	ldr	r3, [r3, #16]
 8005e02:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8005e06:	687b      	ldr	r3, [r7, #4]
 8005e08:	68da      	ldr	r2, [r3, #12]
 8005e0a:	687b      	ldr	r3, [r7, #4]
 8005e0c:	681b      	ldr	r3, [r3, #0]
 8005e0e:	430a      	orrs	r2, r1
 8005e10:	611a      	str	r2, [r3, #16]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
  MODIFY_REG(huart->Instance->CR1,
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);
#else
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode;
 8005e12:	687b      	ldr	r3, [r7, #4]
 8005e14:	689a      	ldr	r2, [r3, #8]
 8005e16:	687b      	ldr	r3, [r7, #4]
 8005e18:	691b      	ldr	r3, [r3, #16]
 8005e1a:	431a      	orrs	r2, r3
 8005e1c:	687b      	ldr	r3, [r7, #4]
 8005e1e:	695b      	ldr	r3, [r3, #20]
 8005e20:	4313      	orrs	r3, r2
 8005e22:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(huart->Instance->CR1,
 8005e24:	687b      	ldr	r3, [r7, #4]
 8005e26:	681b      	ldr	r3, [r3, #0]
 8005e28:	68db      	ldr	r3, [r3, #12]
 8005e2a:	f423 53b0 	bic.w	r3, r3, #5632	; 0x1600
 8005e2e:	f023 030c 	bic.w	r3, r3, #12
 8005e32:	687a      	ldr	r2, [r7, #4]
 8005e34:	6812      	ldr	r2, [r2, #0]
 8005e36:	68b9      	ldr	r1, [r7, #8]
 8005e38:	430b      	orrs	r3, r1
 8005e3a:	60d3      	str	r3, [r2, #12]
             tmpreg);
#endif /* USART_CR1_OVER8 */

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8005e3c:	687b      	ldr	r3, [r7, #4]
 8005e3e:	681b      	ldr	r3, [r3, #0]
 8005e40:	695b      	ldr	r3, [r3, #20]
 8005e42:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 8005e46:	687b      	ldr	r3, [r7, #4]
 8005e48:	699a      	ldr	r2, [r3, #24]
 8005e4a:	687b      	ldr	r3, [r7, #4]
 8005e4c:	681b      	ldr	r3, [r3, #0]
 8005e4e:	430a      	orrs	r2, r1
 8005e50:	615a      	str	r2, [r3, #20]


  if(huart->Instance == USART1)
 8005e52:	687b      	ldr	r3, [r7, #4]
 8005e54:	681b      	ldr	r3, [r3, #0]
 8005e56:	4a2c      	ldr	r2, [pc, #176]	; (8005f08 <UART_SetConfig+0x114>)
 8005e58:	4293      	cmp	r3, r2
 8005e5a:	d103      	bne.n	8005e64 <UART_SetConfig+0x70>
  {
    pclk = HAL_RCC_GetPCLK2Freq();
 8005e5c:	f7fe fbe8 	bl	8004630 <HAL_RCC_GetPCLK2Freq>
 8005e60:	60f8      	str	r0, [r7, #12]
 8005e62:	e002      	b.n	8005e6a <UART_SetConfig+0x76>
  }
  else
  {
    pclk = HAL_RCC_GetPCLK1Freq();
 8005e64:	f7fe fbd0 	bl	8004608 <HAL_RCC_GetPCLK1Freq>
 8005e68:	60f8      	str	r0, [r7, #12]
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
#else
  huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8005e6a:	68fa      	ldr	r2, [r7, #12]
 8005e6c:	4613      	mov	r3, r2
 8005e6e:	009b      	lsls	r3, r3, #2
 8005e70:	4413      	add	r3, r2
 8005e72:	009a      	lsls	r2, r3, #2
 8005e74:	441a      	add	r2, r3
 8005e76:	687b      	ldr	r3, [r7, #4]
 8005e78:	685b      	ldr	r3, [r3, #4]
 8005e7a:	009b      	lsls	r3, r3, #2
 8005e7c:	fbb2 f3f3 	udiv	r3, r2, r3
 8005e80:	4a22      	ldr	r2, [pc, #136]	; (8005f0c <UART_SetConfig+0x118>)
 8005e82:	fba2 2303 	umull	r2, r3, r2, r3
 8005e86:	095b      	lsrs	r3, r3, #5
 8005e88:	0119      	lsls	r1, r3, #4
 8005e8a:	68fa      	ldr	r2, [r7, #12]
 8005e8c:	4613      	mov	r3, r2
 8005e8e:	009b      	lsls	r3, r3, #2
 8005e90:	4413      	add	r3, r2
 8005e92:	009a      	lsls	r2, r3, #2
 8005e94:	441a      	add	r2, r3
 8005e96:	687b      	ldr	r3, [r7, #4]
 8005e98:	685b      	ldr	r3, [r3, #4]
 8005e9a:	009b      	lsls	r3, r3, #2
 8005e9c:	fbb2 f2f3 	udiv	r2, r2, r3
 8005ea0:	4b1a      	ldr	r3, [pc, #104]	; (8005f0c <UART_SetConfig+0x118>)
 8005ea2:	fba3 0302 	umull	r0, r3, r3, r2
 8005ea6:	095b      	lsrs	r3, r3, #5
 8005ea8:	2064      	movs	r0, #100	; 0x64
 8005eaa:	fb00 f303 	mul.w	r3, r0, r3
 8005eae:	1ad3      	subs	r3, r2, r3
 8005eb0:	011b      	lsls	r3, r3, #4
 8005eb2:	3332      	adds	r3, #50	; 0x32
 8005eb4:	4a15      	ldr	r2, [pc, #84]	; (8005f0c <UART_SetConfig+0x118>)
 8005eb6:	fba2 2303 	umull	r2, r3, r2, r3
 8005eba:	095b      	lsrs	r3, r3, #5
 8005ebc:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8005ec0:	4419      	add	r1, r3
 8005ec2:	68fa      	ldr	r2, [r7, #12]
 8005ec4:	4613      	mov	r3, r2
 8005ec6:	009b      	lsls	r3, r3, #2
 8005ec8:	4413      	add	r3, r2
 8005eca:	009a      	lsls	r2, r3, #2
 8005ecc:	441a      	add	r2, r3
 8005ece:	687b      	ldr	r3, [r7, #4]
 8005ed0:	685b      	ldr	r3, [r3, #4]
 8005ed2:	009b      	lsls	r3, r3, #2
 8005ed4:	fbb2 f2f3 	udiv	r2, r2, r3
 8005ed8:	4b0c      	ldr	r3, [pc, #48]	; (8005f0c <UART_SetConfig+0x118>)
 8005eda:	fba3 0302 	umull	r0, r3, r3, r2
 8005ede:	095b      	lsrs	r3, r3, #5
 8005ee0:	2064      	movs	r0, #100	; 0x64
 8005ee2:	fb00 f303 	mul.w	r3, r0, r3
 8005ee6:	1ad3      	subs	r3, r2, r3
 8005ee8:	011b      	lsls	r3, r3, #4
 8005eea:	3332      	adds	r3, #50	; 0x32
 8005eec:	4a07      	ldr	r2, [pc, #28]	; (8005f0c <UART_SetConfig+0x118>)
 8005eee:	fba2 2303 	umull	r2, r3, r2, r3
 8005ef2:	095b      	lsrs	r3, r3, #5
 8005ef4:	f003 020f 	and.w	r2, r3, #15
 8005ef8:	687b      	ldr	r3, [r7, #4]
 8005efa:	681b      	ldr	r3, [r3, #0]
 8005efc:	440a      	add	r2, r1
 8005efe:	609a      	str	r2, [r3, #8]
#endif /* USART_CR1_OVER8 */
}
 8005f00:	bf00      	nop
 8005f02:	3710      	adds	r7, #16
 8005f04:	46bd      	mov	sp, r7
 8005f06:	bd80      	pop	{r7, pc}
 8005f08:	40013800 	.word	0x40013800
 8005f0c:	51eb851f 	.word	0x51eb851f

08005f10 <osKernelInitialize>:
}
#endif /* SysTick */

/*---------------------------------------------------------------------------*/

osStatus_t osKernelInitialize (void) {
 8005f10:	b480      	push	{r7}
 8005f12:	b085      	sub	sp, #20
 8005f14:	af00      	add	r7, sp, #0
 */
__STATIC_FORCEINLINE uint32_t __get_IPSR(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8005f16:	f3ef 8305 	mrs	r3, IPSR
 8005f1a:	60bb      	str	r3, [r7, #8]
  return(result);
 8005f1c:	68bb      	ldr	r3, [r7, #8]
  osStatus_t stat;

  if (IS_IRQ()) {
 8005f1e:	2b00      	cmp	r3, #0
 8005f20:	d10f      	bne.n	8005f42 <osKernelInitialize+0x32>
 */
__STATIC_FORCEINLINE uint32_t __get_PRIMASK(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8005f22:	f3ef 8310 	mrs	r3, PRIMASK
 8005f26:	607b      	str	r3, [r7, #4]
  return(result);
 8005f28:	687b      	ldr	r3, [r7, #4]
 8005f2a:	2b00      	cmp	r3, #0
 8005f2c:	d109      	bne.n	8005f42 <osKernelInitialize+0x32>
 8005f2e:	4b10      	ldr	r3, [pc, #64]	; (8005f70 <osKernelInitialize+0x60>)
 8005f30:	681b      	ldr	r3, [r3, #0]
 8005f32:	2b02      	cmp	r3, #2
 8005f34:	d109      	bne.n	8005f4a <osKernelInitialize+0x3a>
 */
__STATIC_FORCEINLINE uint32_t __get_BASEPRI(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 8005f36:	f3ef 8311 	mrs	r3, BASEPRI
 8005f3a:	603b      	str	r3, [r7, #0]
  return(result);
 8005f3c:	683b      	ldr	r3, [r7, #0]
 8005f3e:	2b00      	cmp	r3, #0
 8005f40:	d003      	beq.n	8005f4a <osKernelInitialize+0x3a>
    stat = osErrorISR;
 8005f42:	f06f 0305 	mvn.w	r3, #5
 8005f46:	60fb      	str	r3, [r7, #12]
 8005f48:	e00c      	b.n	8005f64 <osKernelInitialize+0x54>
  }
  else {
    if (KernelState == osKernelInactive) {
 8005f4a:	4b09      	ldr	r3, [pc, #36]	; (8005f70 <osKernelInitialize+0x60>)
 8005f4c:	681b      	ldr	r3, [r3, #0]
 8005f4e:	2b00      	cmp	r3, #0
 8005f50:	d105      	bne.n	8005f5e <osKernelInitialize+0x4e>
      #if defined(USE_FreeRTOS_HEAP_5)
        vPortDefineHeapRegions (xHeapRegions);
      #endif
      KernelState = osKernelReady;
 8005f52:	4b07      	ldr	r3, [pc, #28]	; (8005f70 <osKernelInitialize+0x60>)
 8005f54:	2201      	movs	r2, #1
 8005f56:	601a      	str	r2, [r3, #0]
      stat = osOK;
 8005f58:	2300      	movs	r3, #0
 8005f5a:	60fb      	str	r3, [r7, #12]
 8005f5c:	e002      	b.n	8005f64 <osKernelInitialize+0x54>
    } else {
      stat = osError;
 8005f5e:	f04f 33ff 	mov.w	r3, #4294967295
 8005f62:	60fb      	str	r3, [r7, #12]
    }
  }

  return (stat);
 8005f64:	68fb      	ldr	r3, [r7, #12]
}
 8005f66:	4618      	mov	r0, r3
 8005f68:	3714      	adds	r7, #20
 8005f6a:	46bd      	mov	sp, r7
 8005f6c:	bc80      	pop	{r7}
 8005f6e:	4770      	bx	lr
 8005f70:	200002cc 	.word	0x200002cc

08005f74 <osKernelStart>:
  }

  return (state);
}

osStatus_t osKernelStart (void) {
 8005f74:	b580      	push	{r7, lr}
 8005f76:	b084      	sub	sp, #16
 8005f78:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8005f7a:	f3ef 8305 	mrs	r3, IPSR
 8005f7e:	60bb      	str	r3, [r7, #8]
  return(result);
 8005f80:	68bb      	ldr	r3, [r7, #8]
  osStatus_t stat;

  if (IS_IRQ()) {
 8005f82:	2b00      	cmp	r3, #0
 8005f84:	d10f      	bne.n	8005fa6 <osKernelStart+0x32>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8005f86:	f3ef 8310 	mrs	r3, PRIMASK
 8005f8a:	607b      	str	r3, [r7, #4]
  return(result);
 8005f8c:	687b      	ldr	r3, [r7, #4]
 8005f8e:	2b00      	cmp	r3, #0
 8005f90:	d109      	bne.n	8005fa6 <osKernelStart+0x32>
 8005f92:	4b11      	ldr	r3, [pc, #68]	; (8005fd8 <osKernelStart+0x64>)
 8005f94:	681b      	ldr	r3, [r3, #0]
 8005f96:	2b02      	cmp	r3, #2
 8005f98:	d109      	bne.n	8005fae <osKernelStart+0x3a>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 8005f9a:	f3ef 8311 	mrs	r3, BASEPRI
 8005f9e:	603b      	str	r3, [r7, #0]
  return(result);
 8005fa0:	683b      	ldr	r3, [r7, #0]
 8005fa2:	2b00      	cmp	r3, #0
 8005fa4:	d003      	beq.n	8005fae <osKernelStart+0x3a>
    stat = osErrorISR;
 8005fa6:	f06f 0305 	mvn.w	r3, #5
 8005faa:	60fb      	str	r3, [r7, #12]
 8005fac:	e00e      	b.n	8005fcc <osKernelStart+0x58>
  }
  else {
    if (KernelState == osKernelReady) {
 8005fae:	4b0a      	ldr	r3, [pc, #40]	; (8005fd8 <osKernelStart+0x64>)
 8005fb0:	681b      	ldr	r3, [r3, #0]
 8005fb2:	2b01      	cmp	r3, #1
 8005fb4:	d107      	bne.n	8005fc6 <osKernelStart+0x52>
      KernelState = osKernelRunning;
 8005fb6:	4b08      	ldr	r3, [pc, #32]	; (8005fd8 <osKernelStart+0x64>)
 8005fb8:	2202      	movs	r2, #2
 8005fba:	601a      	str	r2, [r3, #0]
      vTaskStartScheduler();
 8005fbc:	f001 fbb2 	bl	8007724 <vTaskStartScheduler>
      stat = osOK;
 8005fc0:	2300      	movs	r3, #0
 8005fc2:	60fb      	str	r3, [r7, #12]
 8005fc4:	e002      	b.n	8005fcc <osKernelStart+0x58>
    } else {
      stat = osError;
 8005fc6:	f04f 33ff 	mov.w	r3, #4294967295
 8005fca:	60fb      	str	r3, [r7, #12]
    }
  }

  return (stat);
 8005fcc:	68fb      	ldr	r3, [r7, #12]
}
 8005fce:	4618      	mov	r0, r3
 8005fd0:	3710      	adds	r7, #16
 8005fd2:	46bd      	mov	sp, r7
 8005fd4:	bd80      	pop	{r7, pc}
 8005fd6:	bf00      	nop
 8005fd8:	200002cc 	.word	0x200002cc

08005fdc <osThreadNew>:
  return (configCPU_CLOCK_HZ);
}

/*---------------------------------------------------------------------------*/

osThreadId_t osThreadNew (osThreadFunc_t func, void *argument, const osThreadAttr_t *attr) {
 8005fdc:	b580      	push	{r7, lr}
 8005fde:	b092      	sub	sp, #72	; 0x48
 8005fe0:	af04      	add	r7, sp, #16
 8005fe2:	60f8      	str	r0, [r7, #12]
 8005fe4:	60b9      	str	r1, [r7, #8]
 8005fe6:	607a      	str	r2, [r7, #4]
  uint32_t stack;
  TaskHandle_t hTask;
  UBaseType_t prio;
  int32_t mem;

  hTask = NULL;
 8005fe8:	2300      	movs	r3, #0
 8005fea:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8005fec:	f3ef 8305 	mrs	r3, IPSR
 8005ff0:	627b      	str	r3, [r7, #36]	; 0x24
  return(result);
 8005ff2:	6a7b      	ldr	r3, [r7, #36]	; 0x24

  if (!IS_IRQ() && (func != NULL)) {
 8005ff4:	2b00      	cmp	r3, #0
 8005ff6:	f040 8094 	bne.w	8006122 <osThreadNew+0x146>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8005ffa:	f3ef 8310 	mrs	r3, PRIMASK
 8005ffe:	623b      	str	r3, [r7, #32]
  return(result);
 8006000:	6a3b      	ldr	r3, [r7, #32]
 8006002:	2b00      	cmp	r3, #0
 8006004:	f040 808d 	bne.w	8006122 <osThreadNew+0x146>
 8006008:	4b48      	ldr	r3, [pc, #288]	; (800612c <osThreadNew+0x150>)
 800600a:	681b      	ldr	r3, [r3, #0]
 800600c:	2b02      	cmp	r3, #2
 800600e:	d106      	bne.n	800601e <osThreadNew+0x42>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 8006010:	f3ef 8311 	mrs	r3, BASEPRI
 8006014:	61fb      	str	r3, [r7, #28]
  return(result);
 8006016:	69fb      	ldr	r3, [r7, #28]
 8006018:	2b00      	cmp	r3, #0
 800601a:	f040 8082 	bne.w	8006122 <osThreadNew+0x146>
 800601e:	68fb      	ldr	r3, [r7, #12]
 8006020:	2b00      	cmp	r3, #0
 8006022:	d07e      	beq.n	8006122 <osThreadNew+0x146>
    stack = configMINIMAL_STACK_SIZE;
 8006024:	2380      	movs	r3, #128	; 0x80
 8006026:	633b      	str	r3, [r7, #48]	; 0x30
    prio  = (UBaseType_t)osPriorityNormal;
 8006028:	2318      	movs	r3, #24
 800602a:	62fb      	str	r3, [r7, #44]	; 0x2c

    empty = '\0';
 800602c:	2300      	movs	r3, #0
 800602e:	76fb      	strb	r3, [r7, #27]
    name  = &empty;
 8006030:	f107 031b 	add.w	r3, r7, #27
 8006034:	637b      	str	r3, [r7, #52]	; 0x34
    mem   = -1;
 8006036:	f04f 33ff 	mov.w	r3, #4294967295
 800603a:	62bb      	str	r3, [r7, #40]	; 0x28

    if (attr != NULL) {
 800603c:	687b      	ldr	r3, [r7, #4]
 800603e:	2b00      	cmp	r3, #0
 8006040:	d045      	beq.n	80060ce <osThreadNew+0xf2>
      if (attr->name != NULL) {
 8006042:	687b      	ldr	r3, [r7, #4]
 8006044:	681b      	ldr	r3, [r3, #0]
 8006046:	2b00      	cmp	r3, #0
 8006048:	d002      	beq.n	8006050 <osThreadNew+0x74>
        name = attr->name;
 800604a:	687b      	ldr	r3, [r7, #4]
 800604c:	681b      	ldr	r3, [r3, #0]
 800604e:	637b      	str	r3, [r7, #52]	; 0x34
      }
      if (attr->priority != osPriorityNone) {
 8006050:	687b      	ldr	r3, [r7, #4]
 8006052:	699b      	ldr	r3, [r3, #24]
 8006054:	2b00      	cmp	r3, #0
 8006056:	d002      	beq.n	800605e <osThreadNew+0x82>
        prio = (UBaseType_t)attr->priority;
 8006058:	687b      	ldr	r3, [r7, #4]
 800605a:	699b      	ldr	r3, [r3, #24]
 800605c:	62fb      	str	r3, [r7, #44]	; 0x2c
      }

      if ((prio < osPriorityIdle) || (prio > osPriorityISR) || ((attr->attr_bits & osThreadJoinable) == osThreadJoinable)) {
 800605e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006060:	2b00      	cmp	r3, #0
 8006062:	d008      	beq.n	8006076 <osThreadNew+0x9a>
 8006064:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006066:	2b38      	cmp	r3, #56	; 0x38
 8006068:	d805      	bhi.n	8006076 <osThreadNew+0x9a>
 800606a:	687b      	ldr	r3, [r7, #4]
 800606c:	685b      	ldr	r3, [r3, #4]
 800606e:	f003 0301 	and.w	r3, r3, #1
 8006072:	2b00      	cmp	r3, #0
 8006074:	d001      	beq.n	800607a <osThreadNew+0x9e>
        return (NULL);
 8006076:	2300      	movs	r3, #0
 8006078:	e054      	b.n	8006124 <osThreadNew+0x148>
      }

      if (attr->stack_size > 0U) {
 800607a:	687b      	ldr	r3, [r7, #4]
 800607c:	695b      	ldr	r3, [r3, #20]
 800607e:	2b00      	cmp	r3, #0
 8006080:	d003      	beq.n	800608a <osThreadNew+0xae>
        /* In FreeRTOS stack is not in bytes, but in sizeof(StackType_t) which is 4 on ARM ports.       */
        /* Stack size should be therefore 4 byte aligned in order to avoid division caused side effects */
        stack = attr->stack_size / sizeof(StackType_t);
 8006082:	687b      	ldr	r3, [r7, #4]
 8006084:	695b      	ldr	r3, [r3, #20]
 8006086:	089b      	lsrs	r3, r3, #2
 8006088:	633b      	str	r3, [r7, #48]	; 0x30
      }

      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 800608a:	687b      	ldr	r3, [r7, #4]
 800608c:	689b      	ldr	r3, [r3, #8]
 800608e:	2b00      	cmp	r3, #0
 8006090:	d00e      	beq.n	80060b0 <osThreadNew+0xd4>
 8006092:	687b      	ldr	r3, [r7, #4]
 8006094:	68db      	ldr	r3, [r3, #12]
 8006096:	2b5b      	cmp	r3, #91	; 0x5b
 8006098:	d90a      	bls.n	80060b0 <osThreadNew+0xd4>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 800609a:	687b      	ldr	r3, [r7, #4]
 800609c:	691b      	ldr	r3, [r3, #16]
      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 800609e:	2b00      	cmp	r3, #0
 80060a0:	d006      	beq.n	80060b0 <osThreadNew+0xd4>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 80060a2:	687b      	ldr	r3, [r7, #4]
 80060a4:	695b      	ldr	r3, [r3, #20]
 80060a6:	2b00      	cmp	r3, #0
 80060a8:	d002      	beq.n	80060b0 <osThreadNew+0xd4>
        mem = 1;
 80060aa:	2301      	movs	r3, #1
 80060ac:	62bb      	str	r3, [r7, #40]	; 0x28
 80060ae:	e010      	b.n	80060d2 <osThreadNew+0xf6>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) && (attr->stack_mem == NULL)) {
 80060b0:	687b      	ldr	r3, [r7, #4]
 80060b2:	689b      	ldr	r3, [r3, #8]
 80060b4:	2b00      	cmp	r3, #0
 80060b6:	d10c      	bne.n	80060d2 <osThreadNew+0xf6>
 80060b8:	687b      	ldr	r3, [r7, #4]
 80060ba:	68db      	ldr	r3, [r3, #12]
 80060bc:	2b00      	cmp	r3, #0
 80060be:	d108      	bne.n	80060d2 <osThreadNew+0xf6>
 80060c0:	687b      	ldr	r3, [r7, #4]
 80060c2:	691b      	ldr	r3, [r3, #16]
 80060c4:	2b00      	cmp	r3, #0
 80060c6:	d104      	bne.n	80060d2 <osThreadNew+0xf6>
          mem = 0;
 80060c8:	2300      	movs	r3, #0
 80060ca:	62bb      	str	r3, [r7, #40]	; 0x28
 80060cc:	e001      	b.n	80060d2 <osThreadNew+0xf6>
        }
      }
    }
    else {
      mem = 0;
 80060ce:	2300      	movs	r3, #0
 80060d0:	62bb      	str	r3, [r7, #40]	; 0x28
    }

    if (mem == 1) {
 80060d2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80060d4:	2b01      	cmp	r3, #1
 80060d6:	d110      	bne.n	80060fa <osThreadNew+0x11e>
      hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 80060d8:	687b      	ldr	r3, [r7, #4]
 80060da:	691b      	ldr	r3, [r3, #16]
                                                                                    (StaticTask_t *)attr->cb_mem);
 80060dc:	687a      	ldr	r2, [r7, #4]
 80060de:	6892      	ldr	r2, [r2, #8]
      hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 80060e0:	9202      	str	r2, [sp, #8]
 80060e2:	9301      	str	r3, [sp, #4]
 80060e4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80060e6:	9300      	str	r3, [sp, #0]
 80060e8:	68bb      	ldr	r3, [r7, #8]
 80060ea:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80060ec:	6b79      	ldr	r1, [r7, #52]	; 0x34
 80060ee:	68f8      	ldr	r0, [r7, #12]
 80060f0:	f001 f94c 	bl	800738c <xTaskCreateStatic>
 80060f4:	4603      	mov	r3, r0
 80060f6:	617b      	str	r3, [r7, #20]
 80060f8:	e013      	b.n	8006122 <osThreadNew+0x146>
    }
    else {
      if (mem == 0) {
 80060fa:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80060fc:	2b00      	cmp	r3, #0
 80060fe:	d110      	bne.n	8006122 <osThreadNew+0x146>
        if (xTaskCreate ((TaskFunction_t)func, name, (uint16_t)stack, argument, prio, &hTask) != pdPASS) {
 8006100:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006102:	b29a      	uxth	r2, r3
 8006104:	f107 0314 	add.w	r3, r7, #20
 8006108:	9301      	str	r3, [sp, #4]
 800610a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800610c:	9300      	str	r3, [sp, #0]
 800610e:	68bb      	ldr	r3, [r7, #8]
 8006110:	6b79      	ldr	r1, [r7, #52]	; 0x34
 8006112:	68f8      	ldr	r0, [r7, #12]
 8006114:	f001 f996 	bl	8007444 <xTaskCreate>
 8006118:	4603      	mov	r3, r0
 800611a:	2b01      	cmp	r3, #1
 800611c:	d001      	beq.n	8006122 <osThreadNew+0x146>
          hTask = NULL;
 800611e:	2300      	movs	r3, #0
 8006120:	617b      	str	r3, [r7, #20]
        }
      }
    }
  }

  return ((osThreadId_t)hTask);
 8006122:	697b      	ldr	r3, [r7, #20]
}
 8006124:	4618      	mov	r0, r3
 8006126:	3738      	adds	r7, #56	; 0x38
 8006128:	46bd      	mov	sp, r7
 800612a:	bd80      	pop	{r7, pc}
 800612c:	200002cc 	.word	0x200002cc

08006130 <osDelay>:

  /* Return flags before clearing */
  return (rflags);
}

osStatus_t osDelay (uint32_t ticks) {
 8006130:	b580      	push	{r7, lr}
 8006132:	b086      	sub	sp, #24
 8006134:	af00      	add	r7, sp, #0
 8006136:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8006138:	f3ef 8305 	mrs	r3, IPSR
 800613c:	613b      	str	r3, [r7, #16]
  return(result);
 800613e:	693b      	ldr	r3, [r7, #16]
  osStatus_t stat;

  if (IS_IRQ()) {
 8006140:	2b00      	cmp	r3, #0
 8006142:	d10f      	bne.n	8006164 <osDelay+0x34>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8006144:	f3ef 8310 	mrs	r3, PRIMASK
 8006148:	60fb      	str	r3, [r7, #12]
  return(result);
 800614a:	68fb      	ldr	r3, [r7, #12]
 800614c:	2b00      	cmp	r3, #0
 800614e:	d109      	bne.n	8006164 <osDelay+0x34>
 8006150:	4b0d      	ldr	r3, [pc, #52]	; (8006188 <osDelay+0x58>)
 8006152:	681b      	ldr	r3, [r3, #0]
 8006154:	2b02      	cmp	r3, #2
 8006156:	d109      	bne.n	800616c <osDelay+0x3c>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 8006158:	f3ef 8311 	mrs	r3, BASEPRI
 800615c:	60bb      	str	r3, [r7, #8]
  return(result);
 800615e:	68bb      	ldr	r3, [r7, #8]
 8006160:	2b00      	cmp	r3, #0
 8006162:	d003      	beq.n	800616c <osDelay+0x3c>
    stat = osErrorISR;
 8006164:	f06f 0305 	mvn.w	r3, #5
 8006168:	617b      	str	r3, [r7, #20]
 800616a:	e007      	b.n	800617c <osDelay+0x4c>
  }
  else {
    stat = osOK;
 800616c:	2300      	movs	r3, #0
 800616e:	617b      	str	r3, [r7, #20]

    if (ticks != 0U) {
 8006170:	687b      	ldr	r3, [r7, #4]
 8006172:	2b00      	cmp	r3, #0
 8006174:	d002      	beq.n	800617c <osDelay+0x4c>
      vTaskDelay(ticks);
 8006176:	6878      	ldr	r0, [r7, #4]
 8006178:	f001 faa0 	bl	80076bc <vTaskDelay>
    }
  }

  return (stat);
 800617c:	697b      	ldr	r3, [r7, #20]
}
 800617e:	4618      	mov	r0, r3
 8006180:	3718      	adds	r7, #24
 8006182:	46bd      	mov	sp, r7
 8006184:	bd80      	pop	{r7, pc}
 8006186:	bf00      	nop
 8006188:	200002cc 	.word	0x200002cc

0800618c <osSemaphoreNew>:
  return (stat);
}

/*---------------------------------------------------------------------------*/

osSemaphoreId_t osSemaphoreNew (uint32_t max_count, uint32_t initial_count, const osSemaphoreAttr_t *attr) {
 800618c:	b580      	push	{r7, lr}
 800618e:	b08c      	sub	sp, #48	; 0x30
 8006190:	af02      	add	r7, sp, #8
 8006192:	60f8      	str	r0, [r7, #12]
 8006194:	60b9      	str	r1, [r7, #8]
 8006196:	607a      	str	r2, [r7, #4]
  int32_t mem;
  #if (configQUEUE_REGISTRY_SIZE > 0)
  const char *name;
  #endif

  hSemaphore = NULL;
 8006198:	2300      	movs	r3, #0
 800619a:	627b      	str	r3, [r7, #36]	; 0x24
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800619c:	f3ef 8305 	mrs	r3, IPSR
 80061a0:	61bb      	str	r3, [r7, #24]
  return(result);
 80061a2:	69bb      	ldr	r3, [r7, #24]

  if (!IS_IRQ() && (max_count > 0U) && (initial_count <= max_count)) {
 80061a4:	2b00      	cmp	r3, #0
 80061a6:	f040 8086 	bne.w	80062b6 <osSemaphoreNew+0x12a>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80061aa:	f3ef 8310 	mrs	r3, PRIMASK
 80061ae:	617b      	str	r3, [r7, #20]
  return(result);
 80061b0:	697b      	ldr	r3, [r7, #20]
 80061b2:	2b00      	cmp	r3, #0
 80061b4:	d17f      	bne.n	80062b6 <osSemaphoreNew+0x12a>
 80061b6:	4b42      	ldr	r3, [pc, #264]	; (80062c0 <osSemaphoreNew+0x134>)
 80061b8:	681b      	ldr	r3, [r3, #0]
 80061ba:	2b02      	cmp	r3, #2
 80061bc:	d105      	bne.n	80061ca <osSemaphoreNew+0x3e>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 80061be:	f3ef 8311 	mrs	r3, BASEPRI
 80061c2:	613b      	str	r3, [r7, #16]
  return(result);
 80061c4:	693b      	ldr	r3, [r7, #16]
 80061c6:	2b00      	cmp	r3, #0
 80061c8:	d175      	bne.n	80062b6 <osSemaphoreNew+0x12a>
 80061ca:	68fb      	ldr	r3, [r7, #12]
 80061cc:	2b00      	cmp	r3, #0
 80061ce:	d072      	beq.n	80062b6 <osSemaphoreNew+0x12a>
 80061d0:	68ba      	ldr	r2, [r7, #8]
 80061d2:	68fb      	ldr	r3, [r7, #12]
 80061d4:	429a      	cmp	r2, r3
 80061d6:	d86e      	bhi.n	80062b6 <osSemaphoreNew+0x12a>
    mem = -1;
 80061d8:	f04f 33ff 	mov.w	r3, #4294967295
 80061dc:	623b      	str	r3, [r7, #32]

    if (attr != NULL) {
 80061de:	687b      	ldr	r3, [r7, #4]
 80061e0:	2b00      	cmp	r3, #0
 80061e2:	d015      	beq.n	8006210 <osSemaphoreNew+0x84>
      if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticSemaphore_t))) {
 80061e4:	687b      	ldr	r3, [r7, #4]
 80061e6:	689b      	ldr	r3, [r3, #8]
 80061e8:	2b00      	cmp	r3, #0
 80061ea:	d006      	beq.n	80061fa <osSemaphoreNew+0x6e>
 80061ec:	687b      	ldr	r3, [r7, #4]
 80061ee:	68db      	ldr	r3, [r3, #12]
 80061f0:	2b4f      	cmp	r3, #79	; 0x4f
 80061f2:	d902      	bls.n	80061fa <osSemaphoreNew+0x6e>
        mem = 1;
 80061f4:	2301      	movs	r3, #1
 80061f6:	623b      	str	r3, [r7, #32]
 80061f8:	e00c      	b.n	8006214 <osSemaphoreNew+0x88>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U)) {
 80061fa:	687b      	ldr	r3, [r7, #4]
 80061fc:	689b      	ldr	r3, [r3, #8]
 80061fe:	2b00      	cmp	r3, #0
 8006200:	d108      	bne.n	8006214 <osSemaphoreNew+0x88>
 8006202:	687b      	ldr	r3, [r7, #4]
 8006204:	68db      	ldr	r3, [r3, #12]
 8006206:	2b00      	cmp	r3, #0
 8006208:	d104      	bne.n	8006214 <osSemaphoreNew+0x88>
          mem = 0;
 800620a:	2300      	movs	r3, #0
 800620c:	623b      	str	r3, [r7, #32]
 800620e:	e001      	b.n	8006214 <osSemaphoreNew+0x88>
        }
      }
    }
    else {
      mem = 0;
 8006210:	2300      	movs	r3, #0
 8006212:	623b      	str	r3, [r7, #32]
    }

    if (mem != -1) {
 8006214:	6a3b      	ldr	r3, [r7, #32]
 8006216:	f1b3 3fff 	cmp.w	r3, #4294967295
 800621a:	d04c      	beq.n	80062b6 <osSemaphoreNew+0x12a>
      if (max_count == 1U) {
 800621c:	68fb      	ldr	r3, [r7, #12]
 800621e:	2b01      	cmp	r3, #1
 8006220:	d128      	bne.n	8006274 <osSemaphoreNew+0xe8>
        if (mem == 1) {
 8006222:	6a3b      	ldr	r3, [r7, #32]
 8006224:	2b01      	cmp	r3, #1
 8006226:	d10a      	bne.n	800623e <osSemaphoreNew+0xb2>
          hSemaphore = xSemaphoreCreateBinaryStatic ((StaticSemaphore_t *)attr->cb_mem);
 8006228:	687b      	ldr	r3, [r7, #4]
 800622a:	689b      	ldr	r3, [r3, #8]
 800622c:	2203      	movs	r2, #3
 800622e:	9200      	str	r2, [sp, #0]
 8006230:	2200      	movs	r2, #0
 8006232:	2100      	movs	r1, #0
 8006234:	2001      	movs	r0, #1
 8006236:	f000 fa15 	bl	8006664 <xQueueGenericCreateStatic>
 800623a:	6278      	str	r0, [r7, #36]	; 0x24
 800623c:	e005      	b.n	800624a <osSemaphoreNew+0xbe>
        }
        else {
          hSemaphore = xSemaphoreCreateBinary();
 800623e:	2203      	movs	r2, #3
 8006240:	2100      	movs	r1, #0
 8006242:	2001      	movs	r0, #1
 8006244:	f000 fa85 	bl	8006752 <xQueueGenericCreate>
 8006248:	6278      	str	r0, [r7, #36]	; 0x24
        }

        if ((hSemaphore != NULL) && (initial_count != 0U)) {
 800624a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800624c:	2b00      	cmp	r3, #0
 800624e:	d022      	beq.n	8006296 <osSemaphoreNew+0x10a>
 8006250:	68bb      	ldr	r3, [r7, #8]
 8006252:	2b00      	cmp	r3, #0
 8006254:	d01f      	beq.n	8006296 <osSemaphoreNew+0x10a>
          if (xSemaphoreGive (hSemaphore) != pdPASS) {
 8006256:	2300      	movs	r3, #0
 8006258:	2200      	movs	r2, #0
 800625a:	2100      	movs	r1, #0
 800625c:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800625e:	f000 fb43 	bl	80068e8 <xQueueGenericSend>
 8006262:	4603      	mov	r3, r0
 8006264:	2b01      	cmp	r3, #1
 8006266:	d016      	beq.n	8006296 <osSemaphoreNew+0x10a>
            vSemaphoreDelete (hSemaphore);
 8006268:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800626a:	f000 febf 	bl	8006fec <vQueueDelete>
            hSemaphore = NULL;
 800626e:	2300      	movs	r3, #0
 8006270:	627b      	str	r3, [r7, #36]	; 0x24
 8006272:	e010      	b.n	8006296 <osSemaphoreNew+0x10a>
          }
        }
      }
      else {
        if (mem == 1) {
 8006274:	6a3b      	ldr	r3, [r7, #32]
 8006276:	2b01      	cmp	r3, #1
 8006278:	d108      	bne.n	800628c <osSemaphoreNew+0x100>
          hSemaphore = xSemaphoreCreateCountingStatic (max_count, initial_count, (StaticSemaphore_t *)attr->cb_mem);
 800627a:	687b      	ldr	r3, [r7, #4]
 800627c:	689b      	ldr	r3, [r3, #8]
 800627e:	461a      	mov	r2, r3
 8006280:	68b9      	ldr	r1, [r7, #8]
 8006282:	68f8      	ldr	r0, [r7, #12]
 8006284:	f000 fac6 	bl	8006814 <xQueueCreateCountingSemaphoreStatic>
 8006288:	6278      	str	r0, [r7, #36]	; 0x24
 800628a:	e004      	b.n	8006296 <osSemaphoreNew+0x10a>
        }
        else {
          hSemaphore = xSemaphoreCreateCounting (max_count, initial_count);
 800628c:	68b9      	ldr	r1, [r7, #8]
 800628e:	68f8      	ldr	r0, [r7, #12]
 8006290:	f000 faf7 	bl	8006882 <xQueueCreateCountingSemaphore>
 8006294:	6278      	str	r0, [r7, #36]	; 0x24
        }
      }

      #if (configQUEUE_REGISTRY_SIZE > 0)
      if (hSemaphore != NULL) {
 8006296:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006298:	2b00      	cmp	r3, #0
 800629a:	d00c      	beq.n	80062b6 <osSemaphoreNew+0x12a>
        if (attr != NULL) {
 800629c:	687b      	ldr	r3, [r7, #4]
 800629e:	2b00      	cmp	r3, #0
 80062a0:	d003      	beq.n	80062aa <osSemaphoreNew+0x11e>
          name = attr->name;
 80062a2:	687b      	ldr	r3, [r7, #4]
 80062a4:	681b      	ldr	r3, [r3, #0]
 80062a6:	61fb      	str	r3, [r7, #28]
 80062a8:	e001      	b.n	80062ae <osSemaphoreNew+0x122>
        } else {
          name = NULL;
 80062aa:	2300      	movs	r3, #0
 80062ac:	61fb      	str	r3, [r7, #28]
        }
        vQueueAddToRegistry (hSemaphore, name);
 80062ae:	69f9      	ldr	r1, [r7, #28]
 80062b0:	6a78      	ldr	r0, [r7, #36]	; 0x24
 80062b2:	f000 ffe5 	bl	8007280 <vQueueAddToRegistry>
      }
      #endif
    }
  }

  return ((osSemaphoreId_t)hSemaphore);
 80062b6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 80062b8:	4618      	mov	r0, r3
 80062ba:	3728      	adds	r7, #40	; 0x28
 80062bc:	46bd      	mov	sp, r7
 80062be:	bd80      	pop	{r7, pc}
 80062c0:	200002cc 	.word	0x200002cc

080062c4 <osMessageQueueNew>:
  return (stat);
}

/*---------------------------------------------------------------------------*/

osMessageQueueId_t osMessageQueueNew (uint32_t msg_count, uint32_t msg_size, const osMessageQueueAttr_t *attr) {
 80062c4:	b580      	push	{r7, lr}
 80062c6:	b08c      	sub	sp, #48	; 0x30
 80062c8:	af02      	add	r7, sp, #8
 80062ca:	60f8      	str	r0, [r7, #12]
 80062cc:	60b9      	str	r1, [r7, #8]
 80062ce:	607a      	str	r2, [r7, #4]
  int32_t mem;
  #if (configQUEUE_REGISTRY_SIZE > 0)
  const char *name;
  #endif

  hQueue = NULL;
 80062d0:	2300      	movs	r3, #0
 80062d2:	627b      	str	r3, [r7, #36]	; 0x24
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80062d4:	f3ef 8305 	mrs	r3, IPSR
 80062d8:	61bb      	str	r3, [r7, #24]
  return(result);
 80062da:	69bb      	ldr	r3, [r7, #24]

  if (!IS_IRQ() && (msg_count > 0U) && (msg_size > 0U)) {
 80062dc:	2b00      	cmp	r3, #0
 80062de:	d16f      	bne.n	80063c0 <osMessageQueueNew+0xfc>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80062e0:	f3ef 8310 	mrs	r3, PRIMASK
 80062e4:	617b      	str	r3, [r7, #20]
  return(result);
 80062e6:	697b      	ldr	r3, [r7, #20]
 80062e8:	2b00      	cmp	r3, #0
 80062ea:	d169      	bne.n	80063c0 <osMessageQueueNew+0xfc>
 80062ec:	4b37      	ldr	r3, [pc, #220]	; (80063cc <osMessageQueueNew+0x108>)
 80062ee:	681b      	ldr	r3, [r3, #0]
 80062f0:	2b02      	cmp	r3, #2
 80062f2:	d105      	bne.n	8006300 <osMessageQueueNew+0x3c>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 80062f4:	f3ef 8311 	mrs	r3, BASEPRI
 80062f8:	613b      	str	r3, [r7, #16]
  return(result);
 80062fa:	693b      	ldr	r3, [r7, #16]
 80062fc:	2b00      	cmp	r3, #0
 80062fe:	d15f      	bne.n	80063c0 <osMessageQueueNew+0xfc>
 8006300:	68fb      	ldr	r3, [r7, #12]
 8006302:	2b00      	cmp	r3, #0
 8006304:	d05c      	beq.n	80063c0 <osMessageQueueNew+0xfc>
 8006306:	68bb      	ldr	r3, [r7, #8]
 8006308:	2b00      	cmp	r3, #0
 800630a:	d059      	beq.n	80063c0 <osMessageQueueNew+0xfc>
    mem = -1;
 800630c:	f04f 33ff 	mov.w	r3, #4294967295
 8006310:	623b      	str	r3, [r7, #32]

    if (attr != NULL) {
 8006312:	687b      	ldr	r3, [r7, #4]
 8006314:	2b00      	cmp	r3, #0
 8006316:	d029      	beq.n	800636c <osMessageQueueNew+0xa8>
      if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticQueue_t)) &&
 8006318:	687b      	ldr	r3, [r7, #4]
 800631a:	689b      	ldr	r3, [r3, #8]
 800631c:	2b00      	cmp	r3, #0
 800631e:	d012      	beq.n	8006346 <osMessageQueueNew+0x82>
 8006320:	687b      	ldr	r3, [r7, #4]
 8006322:	68db      	ldr	r3, [r3, #12]
 8006324:	2b4f      	cmp	r3, #79	; 0x4f
 8006326:	d90e      	bls.n	8006346 <osMessageQueueNew+0x82>
          (attr->mq_mem != NULL) && (attr->mq_size >= (msg_count * msg_size))) {
 8006328:	687b      	ldr	r3, [r7, #4]
 800632a:	691b      	ldr	r3, [r3, #16]
      if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticQueue_t)) &&
 800632c:	2b00      	cmp	r3, #0
 800632e:	d00a      	beq.n	8006346 <osMessageQueueNew+0x82>
          (attr->mq_mem != NULL) && (attr->mq_size >= (msg_count * msg_size))) {
 8006330:	687b      	ldr	r3, [r7, #4]
 8006332:	695a      	ldr	r2, [r3, #20]
 8006334:	68fb      	ldr	r3, [r7, #12]
 8006336:	68b9      	ldr	r1, [r7, #8]
 8006338:	fb01 f303 	mul.w	r3, r1, r3
 800633c:	429a      	cmp	r2, r3
 800633e:	d302      	bcc.n	8006346 <osMessageQueueNew+0x82>
        mem = 1;
 8006340:	2301      	movs	r3, #1
 8006342:	623b      	str	r3, [r7, #32]
 8006344:	e014      	b.n	8006370 <osMessageQueueNew+0xac>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) &&
 8006346:	687b      	ldr	r3, [r7, #4]
 8006348:	689b      	ldr	r3, [r3, #8]
 800634a:	2b00      	cmp	r3, #0
 800634c:	d110      	bne.n	8006370 <osMessageQueueNew+0xac>
 800634e:	687b      	ldr	r3, [r7, #4]
 8006350:	68db      	ldr	r3, [r3, #12]
 8006352:	2b00      	cmp	r3, #0
 8006354:	d10c      	bne.n	8006370 <osMessageQueueNew+0xac>
            (attr->mq_mem == NULL) && (attr->mq_size == 0U)) {
 8006356:	687b      	ldr	r3, [r7, #4]
 8006358:	691b      	ldr	r3, [r3, #16]
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) &&
 800635a:	2b00      	cmp	r3, #0
 800635c:	d108      	bne.n	8006370 <osMessageQueueNew+0xac>
            (attr->mq_mem == NULL) && (attr->mq_size == 0U)) {
 800635e:	687b      	ldr	r3, [r7, #4]
 8006360:	695b      	ldr	r3, [r3, #20]
 8006362:	2b00      	cmp	r3, #0
 8006364:	d104      	bne.n	8006370 <osMessageQueueNew+0xac>
          mem = 0;
 8006366:	2300      	movs	r3, #0
 8006368:	623b      	str	r3, [r7, #32]
 800636a:	e001      	b.n	8006370 <osMessageQueueNew+0xac>
        }
      }
    }
    else {
      mem = 0;
 800636c:	2300      	movs	r3, #0
 800636e:	623b      	str	r3, [r7, #32]
    }

    if (mem == 1) {
 8006370:	6a3b      	ldr	r3, [r7, #32]
 8006372:	2b01      	cmp	r3, #1
 8006374:	d10b      	bne.n	800638e <osMessageQueueNew+0xca>
      hQueue = xQueueCreateStatic (msg_count, msg_size, attr->mq_mem, attr->cb_mem);
 8006376:	687b      	ldr	r3, [r7, #4]
 8006378:	691a      	ldr	r2, [r3, #16]
 800637a:	687b      	ldr	r3, [r7, #4]
 800637c:	689b      	ldr	r3, [r3, #8]
 800637e:	2100      	movs	r1, #0
 8006380:	9100      	str	r1, [sp, #0]
 8006382:	68b9      	ldr	r1, [r7, #8]
 8006384:	68f8      	ldr	r0, [r7, #12]
 8006386:	f000 f96d 	bl	8006664 <xQueueGenericCreateStatic>
 800638a:	6278      	str	r0, [r7, #36]	; 0x24
 800638c:	e008      	b.n	80063a0 <osMessageQueueNew+0xdc>
    }
    else {
      if (mem == 0) {
 800638e:	6a3b      	ldr	r3, [r7, #32]
 8006390:	2b00      	cmp	r3, #0
 8006392:	d105      	bne.n	80063a0 <osMessageQueueNew+0xdc>
        hQueue = xQueueCreate (msg_count, msg_size);
 8006394:	2200      	movs	r2, #0
 8006396:	68b9      	ldr	r1, [r7, #8]
 8006398:	68f8      	ldr	r0, [r7, #12]
 800639a:	f000 f9da 	bl	8006752 <xQueueGenericCreate>
 800639e:	6278      	str	r0, [r7, #36]	; 0x24
      }
    }

    #if (configQUEUE_REGISTRY_SIZE > 0)
    if (hQueue != NULL) {
 80063a0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80063a2:	2b00      	cmp	r3, #0
 80063a4:	d00c      	beq.n	80063c0 <osMessageQueueNew+0xfc>
      if (attr != NULL) {
 80063a6:	687b      	ldr	r3, [r7, #4]
 80063a8:	2b00      	cmp	r3, #0
 80063aa:	d003      	beq.n	80063b4 <osMessageQueueNew+0xf0>
        name = attr->name;
 80063ac:	687b      	ldr	r3, [r7, #4]
 80063ae:	681b      	ldr	r3, [r3, #0]
 80063b0:	61fb      	str	r3, [r7, #28]
 80063b2:	e001      	b.n	80063b8 <osMessageQueueNew+0xf4>
      } else {
        name = NULL;
 80063b4:	2300      	movs	r3, #0
 80063b6:	61fb      	str	r3, [r7, #28]
      }
      vQueueAddToRegistry (hQueue, name);
 80063b8:	69f9      	ldr	r1, [r7, #28]
 80063ba:	6a78      	ldr	r0, [r7, #36]	; 0x24
 80063bc:	f000 ff60 	bl	8007280 <vQueueAddToRegistry>
    }
    #endif

  }

  return ((osMessageQueueId_t)hQueue);
 80063c0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 80063c2:	4618      	mov	r0, r3
 80063c4:	3728      	adds	r7, #40	; 0x28
 80063c6:	46bd      	mov	sp, r7
 80063c8:	bd80      	pop	{r7, pc}
 80063ca:	bf00      	nop
 80063cc:	200002cc 	.word	0x200002cc

080063d0 <vApplicationGetIdleTaskMemory>:

/*
  vApplicationGetIdleTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
void vApplicationGetIdleTaskMemory (StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize) {
 80063d0:	b480      	push	{r7}
 80063d2:	b085      	sub	sp, #20
 80063d4:	af00      	add	r7, sp, #0
 80063d6:	60f8      	str	r0, [r7, #12]
 80063d8:	60b9      	str	r1, [r7, #8]
 80063da:	607a      	str	r2, [r7, #4]
  *ppxIdleTaskTCBBuffer   = &Idle_TCB;
 80063dc:	68fb      	ldr	r3, [r7, #12]
 80063de:	4a06      	ldr	r2, [pc, #24]	; (80063f8 <vApplicationGetIdleTaskMemory+0x28>)
 80063e0:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &Idle_Stack[0];
 80063e2:	68bb      	ldr	r3, [r7, #8]
 80063e4:	4a05      	ldr	r2, [pc, #20]	; (80063fc <vApplicationGetIdleTaskMemory+0x2c>)
 80063e6:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize   = (uint32_t)configMINIMAL_STACK_SIZE;
 80063e8:	687b      	ldr	r3, [r7, #4]
 80063ea:	2280      	movs	r2, #128	; 0x80
 80063ec:	601a      	str	r2, [r3, #0]
}
 80063ee:	bf00      	nop
 80063f0:	3714      	adds	r7, #20
 80063f2:	46bd      	mov	sp, r7
 80063f4:	bc80      	pop	{r7}
 80063f6:	4770      	bx	lr
 80063f8:	200002d0 	.word	0x200002d0
 80063fc:	2000032c 	.word	0x2000032c

08006400 <vApplicationGetTimerTaskMemory>:

/*
  vApplicationGetTimerTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
void vApplicationGetTimerTaskMemory (StaticTask_t **ppxTimerTaskTCBBuffer, StackType_t **ppxTimerTaskStackBuffer, uint32_t *pulTimerTaskStackSize) {
 8006400:	b480      	push	{r7}
 8006402:	b085      	sub	sp, #20
 8006404:	af00      	add	r7, sp, #0
 8006406:	60f8      	str	r0, [r7, #12]
 8006408:	60b9      	str	r1, [r7, #8]
 800640a:	607a      	str	r2, [r7, #4]
  *ppxTimerTaskTCBBuffer   = &Timer_TCB;
 800640c:	68fb      	ldr	r3, [r7, #12]
 800640e:	4a07      	ldr	r2, [pc, #28]	; (800642c <vApplicationGetTimerTaskMemory+0x2c>)
 8006410:	601a      	str	r2, [r3, #0]
  *ppxTimerTaskStackBuffer = &Timer_Stack[0];
 8006412:	68bb      	ldr	r3, [r7, #8]
 8006414:	4a06      	ldr	r2, [pc, #24]	; (8006430 <vApplicationGetTimerTaskMemory+0x30>)
 8006416:	601a      	str	r2, [r3, #0]
  *pulTimerTaskStackSize   = (uint32_t)configTIMER_TASK_STACK_DEPTH;
 8006418:	687b      	ldr	r3, [r7, #4]
 800641a:	f44f 7280 	mov.w	r2, #256	; 0x100
 800641e:	601a      	str	r2, [r3, #0]
}
 8006420:	bf00      	nop
 8006422:	3714      	adds	r7, #20
 8006424:	46bd      	mov	sp, r7
 8006426:	bc80      	pop	{r7}
 8006428:	4770      	bx	lr
 800642a:	bf00      	nop
 800642c:	2000052c 	.word	0x2000052c
 8006430:	20000588 	.word	0x20000588

08006434 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 8006434:	b480      	push	{r7}
 8006436:	b083      	sub	sp, #12
 8006438:	af00      	add	r7, sp, #0
 800643a:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800643c:	687b      	ldr	r3, [r7, #4]
 800643e:	f103 0208 	add.w	r2, r3, #8
 8006442:	687b      	ldr	r3, [r7, #4]
 8006444:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 8006446:	687b      	ldr	r3, [r7, #4]
 8006448:	f04f 32ff 	mov.w	r2, #4294967295
 800644c:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800644e:	687b      	ldr	r3, [r7, #4]
 8006450:	f103 0208 	add.w	r2, r3, #8
 8006454:	687b      	ldr	r3, [r7, #4]
 8006456:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8006458:	687b      	ldr	r3, [r7, #4]
 800645a:	f103 0208 	add.w	r2, r3, #8
 800645e:	687b      	ldr	r3, [r7, #4]
 8006460:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 8006462:	687b      	ldr	r3, [r7, #4]
 8006464:	2200      	movs	r2, #0
 8006466:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 8006468:	bf00      	nop
 800646a:	370c      	adds	r7, #12
 800646c:	46bd      	mov	sp, r7
 800646e:	bc80      	pop	{r7}
 8006470:	4770      	bx	lr

08006472 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 8006472:	b480      	push	{r7}
 8006474:	b083      	sub	sp, #12
 8006476:	af00      	add	r7, sp, #0
 8006478:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pvContainer = NULL;
 800647a:	687b      	ldr	r3, [r7, #4]
 800647c:	2200      	movs	r2, #0
 800647e:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 8006480:	bf00      	nop
 8006482:	370c      	adds	r7, #12
 8006484:	46bd      	mov	sp, r7
 8006486:	bc80      	pop	{r7}
 8006488:	4770      	bx	lr

0800648a <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 800648a:	b480      	push	{r7}
 800648c:	b085      	sub	sp, #20
 800648e:	af00      	add	r7, sp, #0
 8006490:	6078      	str	r0, [r7, #4]
 8006492:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 8006494:	687b      	ldr	r3, [r7, #4]
 8006496:	685b      	ldr	r3, [r3, #4]
 8006498:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 800649a:	683b      	ldr	r3, [r7, #0]
 800649c:	68fa      	ldr	r2, [r7, #12]
 800649e:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 80064a0:	68fb      	ldr	r3, [r7, #12]
 80064a2:	689a      	ldr	r2, [r3, #8]
 80064a4:	683b      	ldr	r3, [r7, #0]
 80064a6:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 80064a8:	68fb      	ldr	r3, [r7, #12]
 80064aa:	689b      	ldr	r3, [r3, #8]
 80064ac:	683a      	ldr	r2, [r7, #0]
 80064ae:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 80064b0:	68fb      	ldr	r3, [r7, #12]
 80064b2:	683a      	ldr	r2, [r7, #0]
 80064b4:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pvContainer = ( void * ) pxList;
 80064b6:	683b      	ldr	r3, [r7, #0]
 80064b8:	687a      	ldr	r2, [r7, #4]
 80064ba:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 80064bc:	687b      	ldr	r3, [r7, #4]
 80064be:	681b      	ldr	r3, [r3, #0]
 80064c0:	1c5a      	adds	r2, r3, #1
 80064c2:	687b      	ldr	r3, [r7, #4]
 80064c4:	601a      	str	r2, [r3, #0]
}
 80064c6:	bf00      	nop
 80064c8:	3714      	adds	r7, #20
 80064ca:	46bd      	mov	sp, r7
 80064cc:	bc80      	pop	{r7}
 80064ce:	4770      	bx	lr

080064d0 <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 80064d0:	b480      	push	{r7}
 80064d2:	b085      	sub	sp, #20
 80064d4:	af00      	add	r7, sp, #0
 80064d6:	6078      	str	r0, [r7, #4]
 80064d8:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 80064da:	683b      	ldr	r3, [r7, #0]
 80064dc:	681b      	ldr	r3, [r3, #0]
 80064de:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCB's which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 80064e0:	68bb      	ldr	r3, [r7, #8]
 80064e2:	f1b3 3fff 	cmp.w	r3, #4294967295
 80064e6:	d103      	bne.n	80064f0 <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 80064e8:	687b      	ldr	r3, [r7, #4]
 80064ea:	691b      	ldr	r3, [r3, #16]
 80064ec:	60fb      	str	r3, [r7, #12]
 80064ee:	e00c      	b.n	800650a <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80064f0:	687b      	ldr	r3, [r7, #4]
 80064f2:	3308      	adds	r3, #8
 80064f4:	60fb      	str	r3, [r7, #12]
 80064f6:	e002      	b.n	80064fe <vListInsert+0x2e>
 80064f8:	68fb      	ldr	r3, [r7, #12]
 80064fa:	685b      	ldr	r3, [r3, #4]
 80064fc:	60fb      	str	r3, [r7, #12]
 80064fe:	68fb      	ldr	r3, [r7, #12]
 8006500:	685b      	ldr	r3, [r3, #4]
 8006502:	681b      	ldr	r3, [r3, #0]
 8006504:	68ba      	ldr	r2, [r7, #8]
 8006506:	429a      	cmp	r2, r3
 8006508:	d2f6      	bcs.n	80064f8 <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 800650a:	68fb      	ldr	r3, [r7, #12]
 800650c:	685a      	ldr	r2, [r3, #4]
 800650e:	683b      	ldr	r3, [r7, #0]
 8006510:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 8006512:	683b      	ldr	r3, [r7, #0]
 8006514:	685b      	ldr	r3, [r3, #4]
 8006516:	683a      	ldr	r2, [r7, #0]
 8006518:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 800651a:	683b      	ldr	r3, [r7, #0]
 800651c:	68fa      	ldr	r2, [r7, #12]
 800651e:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 8006520:	68fb      	ldr	r3, [r7, #12]
 8006522:	683a      	ldr	r2, [r7, #0]
 8006524:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pvContainer = ( void * ) pxList;
 8006526:	683b      	ldr	r3, [r7, #0]
 8006528:	687a      	ldr	r2, [r7, #4]
 800652a:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 800652c:	687b      	ldr	r3, [r7, #4]
 800652e:	681b      	ldr	r3, [r3, #0]
 8006530:	1c5a      	adds	r2, r3, #1
 8006532:	687b      	ldr	r3, [r7, #4]
 8006534:	601a      	str	r2, [r3, #0]
}
 8006536:	bf00      	nop
 8006538:	3714      	adds	r7, #20
 800653a:	46bd      	mov	sp, r7
 800653c:	bc80      	pop	{r7}
 800653e:	4770      	bx	lr

08006540 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 8006540:	b480      	push	{r7}
 8006542:	b085      	sub	sp, #20
 8006544:	af00      	add	r7, sp, #0
 8006546:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = ( List_t * ) pxItemToRemove->pvContainer;
 8006548:	687b      	ldr	r3, [r7, #4]
 800654a:	691b      	ldr	r3, [r3, #16]
 800654c:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 800654e:	687b      	ldr	r3, [r7, #4]
 8006550:	685b      	ldr	r3, [r3, #4]
 8006552:	687a      	ldr	r2, [r7, #4]
 8006554:	6892      	ldr	r2, [r2, #8]
 8006556:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 8006558:	687b      	ldr	r3, [r7, #4]
 800655a:	689b      	ldr	r3, [r3, #8]
 800655c:	687a      	ldr	r2, [r7, #4]
 800655e:	6852      	ldr	r2, [r2, #4]
 8006560:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 8006562:	68fb      	ldr	r3, [r7, #12]
 8006564:	685b      	ldr	r3, [r3, #4]
 8006566:	687a      	ldr	r2, [r7, #4]
 8006568:	429a      	cmp	r2, r3
 800656a:	d103      	bne.n	8006574 <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 800656c:	687b      	ldr	r3, [r7, #4]
 800656e:	689a      	ldr	r2, [r3, #8]
 8006570:	68fb      	ldr	r3, [r7, #12]
 8006572:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pvContainer = NULL;
 8006574:	687b      	ldr	r3, [r7, #4]
 8006576:	2200      	movs	r2, #0
 8006578:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 800657a:	68fb      	ldr	r3, [r7, #12]
 800657c:	681b      	ldr	r3, [r3, #0]
 800657e:	1e5a      	subs	r2, r3, #1
 8006580:	68fb      	ldr	r3, [r7, #12]
 8006582:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 8006584:	68fb      	ldr	r3, [r7, #12]
 8006586:	681b      	ldr	r3, [r3, #0]
}
 8006588:	4618      	mov	r0, r3
 800658a:	3714      	adds	r7, #20
 800658c:	46bd      	mov	sp, r7
 800658e:	bc80      	pop	{r7}
 8006590:	4770      	bx	lr
	...

08006594 <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 8006594:	b580      	push	{r7, lr}
 8006596:	b084      	sub	sp, #16
 8006598:	af00      	add	r7, sp, #0
 800659a:	6078      	str	r0, [r7, #4]
 800659c:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 800659e:	687b      	ldr	r3, [r7, #4]
 80065a0:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 80065a2:	68fb      	ldr	r3, [r7, #12]
 80065a4:	2b00      	cmp	r3, #0
 80065a6:	d10a      	bne.n	80065be <xQueueGenericReset+0x2a>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 80065a8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80065ac:	f383 8811 	msr	BASEPRI, r3
 80065b0:	f3bf 8f6f 	isb	sy
 80065b4:	f3bf 8f4f 	dsb	sy
 80065b8:	60bb      	str	r3, [r7, #8]
		"	msr basepri, %0											\n" \
		"	isb														\n" \
		"	dsb														\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 80065ba:	bf00      	nop
 80065bc:	e7fe      	b.n	80065bc <xQueueGenericReset+0x28>

	taskENTER_CRITICAL();
 80065be:	f002 fd05 	bl	8008fcc <vPortEnterCritical>
	{
		pxQueue->pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize );
 80065c2:	68fb      	ldr	r3, [r7, #12]
 80065c4:	681a      	ldr	r2, [r3, #0]
 80065c6:	68fb      	ldr	r3, [r7, #12]
 80065c8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80065ca:	68f9      	ldr	r1, [r7, #12]
 80065cc:	6c09      	ldr	r1, [r1, #64]	; 0x40
 80065ce:	fb01 f303 	mul.w	r3, r1, r3
 80065d2:	441a      	add	r2, r3
 80065d4:	68fb      	ldr	r3, [r7, #12]
 80065d6:	605a      	str	r2, [r3, #4]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 80065d8:	68fb      	ldr	r3, [r7, #12]
 80065da:	2200      	movs	r2, #0
 80065dc:	639a      	str	r2, [r3, #56]	; 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 80065de:	68fb      	ldr	r3, [r7, #12]
 80065e0:	681a      	ldr	r2, [r3, #0]
 80065e2:	68fb      	ldr	r3, [r7, #12]
 80065e4:	609a      	str	r2, [r3, #8]
		pxQueue->u.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - ( UBaseType_t ) 1U ) * pxQueue->uxItemSize );
 80065e6:	68fb      	ldr	r3, [r7, #12]
 80065e8:	681a      	ldr	r2, [r3, #0]
 80065ea:	68fb      	ldr	r3, [r7, #12]
 80065ec:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80065ee:	3b01      	subs	r3, #1
 80065f0:	68f9      	ldr	r1, [r7, #12]
 80065f2:	6c09      	ldr	r1, [r1, #64]	; 0x40
 80065f4:	fb01 f303 	mul.w	r3, r1, r3
 80065f8:	441a      	add	r2, r3
 80065fa:	68fb      	ldr	r3, [r7, #12]
 80065fc:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 80065fe:	68fb      	ldr	r3, [r7, #12]
 8006600:	22ff      	movs	r2, #255	; 0xff
 8006602:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 8006606:	68fb      	ldr	r3, [r7, #12]
 8006608:	22ff      	movs	r2, #255	; 0xff
 800660a:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

		if( xNewQueue == pdFALSE )
 800660e:	683b      	ldr	r3, [r7, #0]
 8006610:	2b00      	cmp	r3, #0
 8006612:	d114      	bne.n	800663e <xQueueGenericReset+0xaa>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8006614:	68fb      	ldr	r3, [r7, #12]
 8006616:	691b      	ldr	r3, [r3, #16]
 8006618:	2b00      	cmp	r3, #0
 800661a:	d01a      	beq.n	8006652 <xQueueGenericReset+0xbe>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800661c:	68fb      	ldr	r3, [r7, #12]
 800661e:	3310      	adds	r3, #16
 8006620:	4618      	mov	r0, r3
 8006622:	f001 fb1b 	bl	8007c5c <xTaskRemoveFromEventList>
 8006626:	4603      	mov	r3, r0
 8006628:	2b00      	cmp	r3, #0
 800662a:	d012      	beq.n	8006652 <xQueueGenericReset+0xbe>
				{
					queueYIELD_IF_USING_PREEMPTION();
 800662c:	4b0c      	ldr	r3, [pc, #48]	; (8006660 <xQueueGenericReset+0xcc>)
 800662e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8006632:	601a      	str	r2, [r3, #0]
 8006634:	f3bf 8f4f 	dsb	sy
 8006638:	f3bf 8f6f 	isb	sy
 800663c:	e009      	b.n	8006652 <xQueueGenericReset+0xbe>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 800663e:	68fb      	ldr	r3, [r7, #12]
 8006640:	3310      	adds	r3, #16
 8006642:	4618      	mov	r0, r3
 8006644:	f7ff fef6 	bl	8006434 <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 8006648:	68fb      	ldr	r3, [r7, #12]
 800664a:	3324      	adds	r3, #36	; 0x24
 800664c:	4618      	mov	r0, r3
 800664e:	f7ff fef1 	bl	8006434 <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 8006652:	f002 fceb 	bl	800902c <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 8006656:	2301      	movs	r3, #1
}
 8006658:	4618      	mov	r0, r3
 800665a:	3710      	adds	r7, #16
 800665c:	46bd      	mov	sp, r7
 800665e:	bd80      	pop	{r7, pc}
 8006660:	e000ed04 	.word	0xe000ed04

08006664 <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 8006664:	b580      	push	{r7, lr}
 8006666:	b08e      	sub	sp, #56	; 0x38
 8006668:	af02      	add	r7, sp, #8
 800666a:	60f8      	str	r0, [r7, #12]
 800666c:	60b9      	str	r1, [r7, #8]
 800666e:	607a      	str	r2, [r7, #4]
 8006670:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 8006672:	68fb      	ldr	r3, [r7, #12]
 8006674:	2b00      	cmp	r3, #0
 8006676:	d10a      	bne.n	800668e <xQueueGenericCreateStatic+0x2a>
	__asm volatile
 8006678:	f04f 0350 	mov.w	r3, #80	; 0x50
 800667c:	f383 8811 	msr	BASEPRI, r3
 8006680:	f3bf 8f6f 	isb	sy
 8006684:	f3bf 8f4f 	dsb	sy
 8006688:	62bb      	str	r3, [r7, #40]	; 0x28
}
 800668a:	bf00      	nop
 800668c:	e7fe      	b.n	800668c <xQueueGenericCreateStatic+0x28>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 800668e:	683b      	ldr	r3, [r7, #0]
 8006690:	2b00      	cmp	r3, #0
 8006692:	d10a      	bne.n	80066aa <xQueueGenericCreateStatic+0x46>
	__asm volatile
 8006694:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006698:	f383 8811 	msr	BASEPRI, r3
 800669c:	f3bf 8f6f 	isb	sy
 80066a0:	f3bf 8f4f 	dsb	sy
 80066a4:	627b      	str	r3, [r7, #36]	; 0x24
}
 80066a6:	bf00      	nop
 80066a8:	e7fe      	b.n	80066a8 <xQueueGenericCreateStatic+0x44>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 80066aa:	687b      	ldr	r3, [r7, #4]
 80066ac:	2b00      	cmp	r3, #0
 80066ae:	d002      	beq.n	80066b6 <xQueueGenericCreateStatic+0x52>
 80066b0:	68bb      	ldr	r3, [r7, #8]
 80066b2:	2b00      	cmp	r3, #0
 80066b4:	d001      	beq.n	80066ba <xQueueGenericCreateStatic+0x56>
 80066b6:	2301      	movs	r3, #1
 80066b8:	e000      	b.n	80066bc <xQueueGenericCreateStatic+0x58>
 80066ba:	2300      	movs	r3, #0
 80066bc:	2b00      	cmp	r3, #0
 80066be:	d10a      	bne.n	80066d6 <xQueueGenericCreateStatic+0x72>
	__asm volatile
 80066c0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80066c4:	f383 8811 	msr	BASEPRI, r3
 80066c8:	f3bf 8f6f 	isb	sy
 80066cc:	f3bf 8f4f 	dsb	sy
 80066d0:	623b      	str	r3, [r7, #32]
}
 80066d2:	bf00      	nop
 80066d4:	e7fe      	b.n	80066d4 <xQueueGenericCreateStatic+0x70>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 80066d6:	687b      	ldr	r3, [r7, #4]
 80066d8:	2b00      	cmp	r3, #0
 80066da:	d102      	bne.n	80066e2 <xQueueGenericCreateStatic+0x7e>
 80066dc:	68bb      	ldr	r3, [r7, #8]
 80066de:	2b00      	cmp	r3, #0
 80066e0:	d101      	bne.n	80066e6 <xQueueGenericCreateStatic+0x82>
 80066e2:	2301      	movs	r3, #1
 80066e4:	e000      	b.n	80066e8 <xQueueGenericCreateStatic+0x84>
 80066e6:	2300      	movs	r3, #0
 80066e8:	2b00      	cmp	r3, #0
 80066ea:	d10a      	bne.n	8006702 <xQueueGenericCreateStatic+0x9e>
	__asm volatile
 80066ec:	f04f 0350 	mov.w	r3, #80	; 0x50
 80066f0:	f383 8811 	msr	BASEPRI, r3
 80066f4:	f3bf 8f6f 	isb	sy
 80066f8:	f3bf 8f4f 	dsb	sy
 80066fc:	61fb      	str	r3, [r7, #28]
}
 80066fe:	bf00      	nop
 8006700:	e7fe      	b.n	8006700 <xQueueGenericCreateStatic+0x9c>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 8006702:	2350      	movs	r3, #80	; 0x50
 8006704:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( Queue_t ) );
 8006706:	697b      	ldr	r3, [r7, #20]
 8006708:	2b50      	cmp	r3, #80	; 0x50
 800670a:	d00a      	beq.n	8006722 <xQueueGenericCreateStatic+0xbe>
	__asm volatile
 800670c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006710:	f383 8811 	msr	BASEPRI, r3
 8006714:	f3bf 8f6f 	isb	sy
 8006718:	f3bf 8f4f 	dsb	sy
 800671c:	61bb      	str	r3, [r7, #24]
}
 800671e:	bf00      	nop
 8006720:	e7fe      	b.n	8006720 <xQueueGenericCreateStatic+0xbc>
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8006722:	683b      	ldr	r3, [r7, #0]
 8006724:	62fb      	str	r3, [r7, #44]	; 0x2c

		if( pxNewQueue != NULL )
 8006726:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006728:	2b00      	cmp	r3, #0
 800672a:	d00d      	beq.n	8006748 <xQueueGenericCreateStatic+0xe4>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 800672c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800672e:	2201      	movs	r2, #1
 8006730:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 8006734:	f897 2038 	ldrb.w	r2, [r7, #56]	; 0x38
 8006738:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800673a:	9300      	str	r3, [sp, #0]
 800673c:	4613      	mov	r3, r2
 800673e:	687a      	ldr	r2, [r7, #4]
 8006740:	68b9      	ldr	r1, [r7, #8]
 8006742:	68f8      	ldr	r0, [r7, #12]
 8006744:	f000 f843 	bl	80067ce <prvInitialiseNewQueue>
		else
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
		}

		return pxNewQueue;
 8006748:	6afb      	ldr	r3, [r7, #44]	; 0x2c
	}
 800674a:	4618      	mov	r0, r3
 800674c:	3730      	adds	r7, #48	; 0x30
 800674e:	46bd      	mov	sp, r7
 8006750:	bd80      	pop	{r7, pc}

08006752 <xQueueGenericCreate>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreate( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, const uint8_t ucQueueType )
	{
 8006752:	b580      	push	{r7, lr}
 8006754:	b08a      	sub	sp, #40	; 0x28
 8006756:	af02      	add	r7, sp, #8
 8006758:	60f8      	str	r0, [r7, #12]
 800675a:	60b9      	str	r1, [r7, #8]
 800675c:	4613      	mov	r3, r2
 800675e:	71fb      	strb	r3, [r7, #7]
	Queue_t *pxNewQueue;
	size_t xQueueSizeInBytes;
	uint8_t *pucQueueStorage;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 8006760:	68fb      	ldr	r3, [r7, #12]
 8006762:	2b00      	cmp	r3, #0
 8006764:	d10a      	bne.n	800677c <xQueueGenericCreate+0x2a>
	__asm volatile
 8006766:	f04f 0350 	mov.w	r3, #80	; 0x50
 800676a:	f383 8811 	msr	BASEPRI, r3
 800676e:	f3bf 8f6f 	isb	sy
 8006772:	f3bf 8f4f 	dsb	sy
 8006776:	613b      	str	r3, [r7, #16]
}
 8006778:	bf00      	nop
 800677a:	e7fe      	b.n	800677a <xQueueGenericCreate+0x28>

		if( uxItemSize == ( UBaseType_t ) 0 )
 800677c:	68bb      	ldr	r3, [r7, #8]
 800677e:	2b00      	cmp	r3, #0
 8006780:	d102      	bne.n	8006788 <xQueueGenericCreate+0x36>
		{
			/* There is not going to be a queue storage area. */
			xQueueSizeInBytes = ( size_t ) 0;
 8006782:	2300      	movs	r3, #0
 8006784:	61fb      	str	r3, [r7, #28]
 8006786:	e004      	b.n	8006792 <xQueueGenericCreate+0x40>
		}
		else
		{
			/* Allocate enough space to hold the maximum number of items that
			can be in the queue at any time. */
			xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8006788:	68fb      	ldr	r3, [r7, #12]
 800678a:	68ba      	ldr	r2, [r7, #8]
 800678c:	fb02 f303 	mul.w	r3, r2, r3
 8006790:	61fb      	str	r3, [r7, #28]
		}

		pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes );
 8006792:	69fb      	ldr	r3, [r7, #28]
 8006794:	3350      	adds	r3, #80	; 0x50
 8006796:	4618      	mov	r0, r3
 8006798:	f002 fd18 	bl	80091cc <pvPortMalloc>
 800679c:	61b8      	str	r0, [r7, #24]

		if( pxNewQueue != NULL )
 800679e:	69bb      	ldr	r3, [r7, #24]
 80067a0:	2b00      	cmp	r3, #0
 80067a2:	d00f      	beq.n	80067c4 <xQueueGenericCreate+0x72>
		{
			/* Jump past the queue structure to find the location of the queue
			storage area. */
			pucQueueStorage = ( ( uint8_t * ) pxNewQueue ) + sizeof( Queue_t );
 80067a4:	69bb      	ldr	r3, [r7, #24]
 80067a6:	3350      	adds	r3, #80	; 0x50
 80067a8:	617b      	str	r3, [r7, #20]
			#if( configSUPPORT_STATIC_ALLOCATION == 1 )
			{
				/* Queues can be created either statically or dynamically, so
				note this task was created dynamically in case it is later
				deleted. */
				pxNewQueue->ucStaticallyAllocated = pdFALSE;
 80067aa:	69bb      	ldr	r3, [r7, #24]
 80067ac:	2200      	movs	r2, #0
 80067ae:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 80067b2:	79fa      	ldrb	r2, [r7, #7]
 80067b4:	69bb      	ldr	r3, [r7, #24]
 80067b6:	9300      	str	r3, [sp, #0]
 80067b8:	4613      	mov	r3, r2
 80067ba:	697a      	ldr	r2, [r7, #20]
 80067bc:	68b9      	ldr	r1, [r7, #8]
 80067be:	68f8      	ldr	r0, [r7, #12]
 80067c0:	f000 f805 	bl	80067ce <prvInitialiseNewQueue>
		else
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
		}

		return pxNewQueue;
 80067c4:	69bb      	ldr	r3, [r7, #24]
	}
 80067c6:	4618      	mov	r0, r3
 80067c8:	3720      	adds	r7, #32
 80067ca:	46bd      	mov	sp, r7
 80067cc:	bd80      	pop	{r7, pc}

080067ce <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 80067ce:	b580      	push	{r7, lr}
 80067d0:	b084      	sub	sp, #16
 80067d2:	af00      	add	r7, sp, #0
 80067d4:	60f8      	str	r0, [r7, #12]
 80067d6:	60b9      	str	r1, [r7, #8]
 80067d8:	607a      	str	r2, [r7, #4]
 80067da:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 80067dc:	68bb      	ldr	r3, [r7, #8]
 80067de:	2b00      	cmp	r3, #0
 80067e0:	d103      	bne.n	80067ea <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 80067e2:	69bb      	ldr	r3, [r7, #24]
 80067e4:	69ba      	ldr	r2, [r7, #24]
 80067e6:	601a      	str	r2, [r3, #0]
 80067e8:	e002      	b.n	80067f0 <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 80067ea:	69bb      	ldr	r3, [r7, #24]
 80067ec:	687a      	ldr	r2, [r7, #4]
 80067ee:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 80067f0:	69bb      	ldr	r3, [r7, #24]
 80067f2:	68fa      	ldr	r2, [r7, #12]
 80067f4:	63da      	str	r2, [r3, #60]	; 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 80067f6:	69bb      	ldr	r3, [r7, #24]
 80067f8:	68ba      	ldr	r2, [r7, #8]
 80067fa:	641a      	str	r2, [r3, #64]	; 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 80067fc:	2101      	movs	r1, #1
 80067fe:	69b8      	ldr	r0, [r7, #24]
 8006800:	f7ff fec8 	bl	8006594 <xQueueGenericReset>

	#if ( configUSE_TRACE_FACILITY == 1 )
	{
		pxNewQueue->ucQueueType = ucQueueType;
 8006804:	69bb      	ldr	r3, [r7, #24]
 8006806:	78fa      	ldrb	r2, [r7, #3]
 8006808:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 800680c:	bf00      	nop
 800680e:	3710      	adds	r7, #16
 8006810:	46bd      	mov	sp, r7
 8006812:	bd80      	pop	{r7, pc}

08006814 <xQueueCreateCountingSemaphoreStatic>:
/*-----------------------------------------------------------*/

#if( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 1 ) )

	QueueHandle_t xQueueCreateCountingSemaphoreStatic( const UBaseType_t uxMaxCount, const UBaseType_t uxInitialCount, StaticQueue_t *pxStaticQueue )
	{
 8006814:	b580      	push	{r7, lr}
 8006816:	b08a      	sub	sp, #40	; 0x28
 8006818:	af02      	add	r7, sp, #8
 800681a:	60f8      	str	r0, [r7, #12]
 800681c:	60b9      	str	r1, [r7, #8]
 800681e:	607a      	str	r2, [r7, #4]
	QueueHandle_t xHandle;

		configASSERT( uxMaxCount != 0 );
 8006820:	68fb      	ldr	r3, [r7, #12]
 8006822:	2b00      	cmp	r3, #0
 8006824:	d10a      	bne.n	800683c <xQueueCreateCountingSemaphoreStatic+0x28>
	__asm volatile
 8006826:	f04f 0350 	mov.w	r3, #80	; 0x50
 800682a:	f383 8811 	msr	BASEPRI, r3
 800682e:	f3bf 8f6f 	isb	sy
 8006832:	f3bf 8f4f 	dsb	sy
 8006836:	61bb      	str	r3, [r7, #24]
}
 8006838:	bf00      	nop
 800683a:	e7fe      	b.n	800683a <xQueueCreateCountingSemaphoreStatic+0x26>
		configASSERT( uxInitialCount <= uxMaxCount );
 800683c:	68ba      	ldr	r2, [r7, #8]
 800683e:	68fb      	ldr	r3, [r7, #12]
 8006840:	429a      	cmp	r2, r3
 8006842:	d90a      	bls.n	800685a <xQueueCreateCountingSemaphoreStatic+0x46>
	__asm volatile
 8006844:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006848:	f383 8811 	msr	BASEPRI, r3
 800684c:	f3bf 8f6f 	isb	sy
 8006850:	f3bf 8f4f 	dsb	sy
 8006854:	617b      	str	r3, [r7, #20]
}
 8006856:	bf00      	nop
 8006858:	e7fe      	b.n	8006858 <xQueueCreateCountingSemaphoreStatic+0x44>

		xHandle = xQueueGenericCreateStatic( uxMaxCount, queueSEMAPHORE_QUEUE_ITEM_LENGTH, NULL, pxStaticQueue, queueQUEUE_TYPE_COUNTING_SEMAPHORE );
 800685a:	2302      	movs	r3, #2
 800685c:	9300      	str	r3, [sp, #0]
 800685e:	687b      	ldr	r3, [r7, #4]
 8006860:	2200      	movs	r2, #0
 8006862:	2100      	movs	r1, #0
 8006864:	68f8      	ldr	r0, [r7, #12]
 8006866:	f7ff fefd 	bl	8006664 <xQueueGenericCreateStatic>
 800686a:	61f8      	str	r0, [r7, #28]

		if( xHandle != NULL )
 800686c:	69fb      	ldr	r3, [r7, #28]
 800686e:	2b00      	cmp	r3, #0
 8006870:	d002      	beq.n	8006878 <xQueueCreateCountingSemaphoreStatic+0x64>
		{
			( ( Queue_t * ) xHandle )->uxMessagesWaiting = uxInitialCount;
 8006872:	69fb      	ldr	r3, [r7, #28]
 8006874:	68ba      	ldr	r2, [r7, #8]
 8006876:	639a      	str	r2, [r3, #56]	; 0x38
		else
		{
			traceCREATE_COUNTING_SEMAPHORE_FAILED();
		}

		return xHandle;
 8006878:	69fb      	ldr	r3, [r7, #28]
	}
 800687a:	4618      	mov	r0, r3
 800687c:	3720      	adds	r7, #32
 800687e:	46bd      	mov	sp, r7
 8006880:	bd80      	pop	{r7, pc}

08006882 <xQueueCreateCountingSemaphore>:
/*-----------------------------------------------------------*/

#if( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) )

	QueueHandle_t xQueueCreateCountingSemaphore( const UBaseType_t uxMaxCount, const UBaseType_t uxInitialCount )
	{
 8006882:	b580      	push	{r7, lr}
 8006884:	b086      	sub	sp, #24
 8006886:	af00      	add	r7, sp, #0
 8006888:	6078      	str	r0, [r7, #4]
 800688a:	6039      	str	r1, [r7, #0]
	QueueHandle_t xHandle;

		configASSERT( uxMaxCount != 0 );
 800688c:	687b      	ldr	r3, [r7, #4]
 800688e:	2b00      	cmp	r3, #0
 8006890:	d10a      	bne.n	80068a8 <xQueueCreateCountingSemaphore+0x26>
	__asm volatile
 8006892:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006896:	f383 8811 	msr	BASEPRI, r3
 800689a:	f3bf 8f6f 	isb	sy
 800689e:	f3bf 8f4f 	dsb	sy
 80068a2:	613b      	str	r3, [r7, #16]
}
 80068a4:	bf00      	nop
 80068a6:	e7fe      	b.n	80068a6 <xQueueCreateCountingSemaphore+0x24>
		configASSERT( uxInitialCount <= uxMaxCount );
 80068a8:	683a      	ldr	r2, [r7, #0]
 80068aa:	687b      	ldr	r3, [r7, #4]
 80068ac:	429a      	cmp	r2, r3
 80068ae:	d90a      	bls.n	80068c6 <xQueueCreateCountingSemaphore+0x44>
	__asm volatile
 80068b0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80068b4:	f383 8811 	msr	BASEPRI, r3
 80068b8:	f3bf 8f6f 	isb	sy
 80068bc:	f3bf 8f4f 	dsb	sy
 80068c0:	60fb      	str	r3, [r7, #12]
}
 80068c2:	bf00      	nop
 80068c4:	e7fe      	b.n	80068c4 <xQueueCreateCountingSemaphore+0x42>

		xHandle = xQueueGenericCreate( uxMaxCount, queueSEMAPHORE_QUEUE_ITEM_LENGTH, queueQUEUE_TYPE_COUNTING_SEMAPHORE );
 80068c6:	2202      	movs	r2, #2
 80068c8:	2100      	movs	r1, #0
 80068ca:	6878      	ldr	r0, [r7, #4]
 80068cc:	f7ff ff41 	bl	8006752 <xQueueGenericCreate>
 80068d0:	6178      	str	r0, [r7, #20]

		if( xHandle != NULL )
 80068d2:	697b      	ldr	r3, [r7, #20]
 80068d4:	2b00      	cmp	r3, #0
 80068d6:	d002      	beq.n	80068de <xQueueCreateCountingSemaphore+0x5c>
		{
			( ( Queue_t * ) xHandle )->uxMessagesWaiting = uxInitialCount;
 80068d8:	697b      	ldr	r3, [r7, #20]
 80068da:	683a      	ldr	r2, [r7, #0]
 80068dc:	639a      	str	r2, [r3, #56]	; 0x38
		else
		{
			traceCREATE_COUNTING_SEMAPHORE_FAILED();
		}

		return xHandle;
 80068de:	697b      	ldr	r3, [r7, #20]
	}
 80068e0:	4618      	mov	r0, r3
 80068e2:	3718      	adds	r7, #24
 80068e4:	46bd      	mov	sp, r7
 80068e6:	bd80      	pop	{r7, pc}

080068e8 <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 80068e8:	b580      	push	{r7, lr}
 80068ea:	b08e      	sub	sp, #56	; 0x38
 80068ec:	af00      	add	r7, sp, #0
 80068ee:	60f8      	str	r0, [r7, #12]
 80068f0:	60b9      	str	r1, [r7, #8]
 80068f2:	607a      	str	r2, [r7, #4]
 80068f4:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 80068f6:	2300      	movs	r3, #0
 80068f8:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 80068fa:	68fb      	ldr	r3, [r7, #12]
 80068fc:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 80068fe:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006900:	2b00      	cmp	r3, #0
 8006902:	d10a      	bne.n	800691a <xQueueGenericSend+0x32>
	__asm volatile
 8006904:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006908:	f383 8811 	msr	BASEPRI, r3
 800690c:	f3bf 8f6f 	isb	sy
 8006910:	f3bf 8f4f 	dsb	sy
 8006914:	62bb      	str	r3, [r7, #40]	; 0x28
}
 8006916:	bf00      	nop
 8006918:	e7fe      	b.n	8006918 <xQueueGenericSend+0x30>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800691a:	68bb      	ldr	r3, [r7, #8]
 800691c:	2b00      	cmp	r3, #0
 800691e:	d103      	bne.n	8006928 <xQueueGenericSend+0x40>
 8006920:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006922:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006924:	2b00      	cmp	r3, #0
 8006926:	d101      	bne.n	800692c <xQueueGenericSend+0x44>
 8006928:	2301      	movs	r3, #1
 800692a:	e000      	b.n	800692e <xQueueGenericSend+0x46>
 800692c:	2300      	movs	r3, #0
 800692e:	2b00      	cmp	r3, #0
 8006930:	d10a      	bne.n	8006948 <xQueueGenericSend+0x60>
	__asm volatile
 8006932:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006936:	f383 8811 	msr	BASEPRI, r3
 800693a:	f3bf 8f6f 	isb	sy
 800693e:	f3bf 8f4f 	dsb	sy
 8006942:	627b      	str	r3, [r7, #36]	; 0x24
}
 8006944:	bf00      	nop
 8006946:	e7fe      	b.n	8006946 <xQueueGenericSend+0x5e>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8006948:	683b      	ldr	r3, [r7, #0]
 800694a:	2b02      	cmp	r3, #2
 800694c:	d103      	bne.n	8006956 <xQueueGenericSend+0x6e>
 800694e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006950:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006952:	2b01      	cmp	r3, #1
 8006954:	d101      	bne.n	800695a <xQueueGenericSend+0x72>
 8006956:	2301      	movs	r3, #1
 8006958:	e000      	b.n	800695c <xQueueGenericSend+0x74>
 800695a:	2300      	movs	r3, #0
 800695c:	2b00      	cmp	r3, #0
 800695e:	d10a      	bne.n	8006976 <xQueueGenericSend+0x8e>
	__asm volatile
 8006960:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006964:	f383 8811 	msr	BASEPRI, r3
 8006968:	f3bf 8f6f 	isb	sy
 800696c:	f3bf 8f4f 	dsb	sy
 8006970:	623b      	str	r3, [r7, #32]
}
 8006972:	bf00      	nop
 8006974:	e7fe      	b.n	8006974 <xQueueGenericSend+0x8c>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8006976:	f001 fb33 	bl	8007fe0 <xTaskGetSchedulerState>
 800697a:	4603      	mov	r3, r0
 800697c:	2b00      	cmp	r3, #0
 800697e:	d102      	bne.n	8006986 <xQueueGenericSend+0x9e>
 8006980:	687b      	ldr	r3, [r7, #4]
 8006982:	2b00      	cmp	r3, #0
 8006984:	d101      	bne.n	800698a <xQueueGenericSend+0xa2>
 8006986:	2301      	movs	r3, #1
 8006988:	e000      	b.n	800698c <xQueueGenericSend+0xa4>
 800698a:	2300      	movs	r3, #0
 800698c:	2b00      	cmp	r3, #0
 800698e:	d10a      	bne.n	80069a6 <xQueueGenericSend+0xbe>
	__asm volatile
 8006990:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006994:	f383 8811 	msr	BASEPRI, r3
 8006998:	f3bf 8f6f 	isb	sy
 800699c:	f3bf 8f4f 	dsb	sy
 80069a0:	61fb      	str	r3, [r7, #28]
}
 80069a2:	bf00      	nop
 80069a4:	e7fe      	b.n	80069a4 <xQueueGenericSend+0xbc>
	/* This function relaxes the coding standard somewhat to allow return
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 80069a6:	f002 fb11 	bl	8008fcc <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 80069aa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80069ac:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80069ae:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80069b0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80069b2:	429a      	cmp	r2, r3
 80069b4:	d302      	bcc.n	80069bc <xQueueGenericSend+0xd4>
 80069b6:	683b      	ldr	r3, [r7, #0]
 80069b8:	2b02      	cmp	r3, #2
 80069ba:	d129      	bne.n	8006a10 <xQueueGenericSend+0x128>
			{
				traceQUEUE_SEND( pxQueue );
				xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 80069bc:	683a      	ldr	r2, [r7, #0]
 80069be:	68b9      	ldr	r1, [r7, #8]
 80069c0:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80069c2:	f000 fb4d 	bl	8007060 <prvCopyDataToQueue>
 80069c6:	62f8      	str	r0, [r7, #44]	; 0x2c
				}
				#else /* configUSE_QUEUE_SETS */
				{
					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 80069c8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80069ca:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80069cc:	2b00      	cmp	r3, #0
 80069ce:	d010      	beq.n	80069f2 <xQueueGenericSend+0x10a>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 80069d0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80069d2:	3324      	adds	r3, #36	; 0x24
 80069d4:	4618      	mov	r0, r3
 80069d6:	f001 f941 	bl	8007c5c <xTaskRemoveFromEventList>
 80069da:	4603      	mov	r3, r0
 80069dc:	2b00      	cmp	r3, #0
 80069de:	d013      	beq.n	8006a08 <xQueueGenericSend+0x120>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 80069e0:	4b3f      	ldr	r3, [pc, #252]	; (8006ae0 <xQueueGenericSend+0x1f8>)
 80069e2:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80069e6:	601a      	str	r2, [r3, #0]
 80069e8:	f3bf 8f4f 	dsb	sy
 80069ec:	f3bf 8f6f 	isb	sy
 80069f0:	e00a      	b.n	8006a08 <xQueueGenericSend+0x120>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 80069f2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80069f4:	2b00      	cmp	r3, #0
 80069f6:	d007      	beq.n	8006a08 <xQueueGenericSend+0x120>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 80069f8:	4b39      	ldr	r3, [pc, #228]	; (8006ae0 <xQueueGenericSend+0x1f8>)
 80069fa:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80069fe:	601a      	str	r2, [r3, #0]
 8006a00:	f3bf 8f4f 	dsb	sy
 8006a04:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 8006a08:	f002 fb10 	bl	800902c <vPortExitCritical>
				return pdPASS;
 8006a0c:	2301      	movs	r3, #1
 8006a0e:	e063      	b.n	8006ad8 <xQueueGenericSend+0x1f0>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8006a10:	687b      	ldr	r3, [r7, #4]
 8006a12:	2b00      	cmp	r3, #0
 8006a14:	d103      	bne.n	8006a1e <xQueueGenericSend+0x136>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8006a16:	f002 fb09 	bl	800902c <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 8006a1a:	2300      	movs	r3, #0
 8006a1c:	e05c      	b.n	8006ad8 <xQueueGenericSend+0x1f0>
				}
				else if( xEntryTimeSet == pdFALSE )
 8006a1e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006a20:	2b00      	cmp	r3, #0
 8006a22:	d106      	bne.n	8006a32 <xQueueGenericSend+0x14a>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8006a24:	f107 0314 	add.w	r3, r7, #20
 8006a28:	4618      	mov	r0, r3
 8006a2a:	f001 f97b 	bl	8007d24 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8006a2e:	2301      	movs	r3, #1
 8006a30:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8006a32:	f002 fafb 	bl	800902c <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8006a36:	f000 fedb 	bl	80077f0 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8006a3a:	f002 fac7 	bl	8008fcc <vPortEnterCritical>
 8006a3e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006a40:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8006a44:	b25b      	sxtb	r3, r3
 8006a46:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006a4a:	d103      	bne.n	8006a54 <xQueueGenericSend+0x16c>
 8006a4c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006a4e:	2200      	movs	r2, #0
 8006a50:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8006a54:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006a56:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8006a5a:	b25b      	sxtb	r3, r3
 8006a5c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006a60:	d103      	bne.n	8006a6a <xQueueGenericSend+0x182>
 8006a62:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006a64:	2200      	movs	r2, #0
 8006a66:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8006a6a:	f002 fadf 	bl	800902c <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8006a6e:	1d3a      	adds	r2, r7, #4
 8006a70:	f107 0314 	add.w	r3, r7, #20
 8006a74:	4611      	mov	r1, r2
 8006a76:	4618      	mov	r0, r3
 8006a78:	f001 f96a 	bl	8007d50 <xTaskCheckForTimeOut>
 8006a7c:	4603      	mov	r3, r0
 8006a7e:	2b00      	cmp	r3, #0
 8006a80:	d124      	bne.n	8006acc <xQueueGenericSend+0x1e4>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 8006a82:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8006a84:	f000 fbe4 	bl	8007250 <prvIsQueueFull>
 8006a88:	4603      	mov	r3, r0
 8006a8a:	2b00      	cmp	r3, #0
 8006a8c:	d018      	beq.n	8006ac0 <xQueueGenericSend+0x1d8>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 8006a8e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006a90:	3310      	adds	r3, #16
 8006a92:	687a      	ldr	r2, [r7, #4]
 8006a94:	4611      	mov	r1, r2
 8006a96:	4618      	mov	r0, r3
 8006a98:	f001 f890 	bl	8007bbc <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 8006a9c:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8006a9e:	f000 fb6f 	bl	8007180 <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 8006aa2:	f000 feb3 	bl	800780c <xTaskResumeAll>
 8006aa6:	4603      	mov	r3, r0
 8006aa8:	2b00      	cmp	r3, #0
 8006aaa:	f47f af7c 	bne.w	80069a6 <xQueueGenericSend+0xbe>
				{
					portYIELD_WITHIN_API();
 8006aae:	4b0c      	ldr	r3, [pc, #48]	; (8006ae0 <xQueueGenericSend+0x1f8>)
 8006ab0:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8006ab4:	601a      	str	r2, [r3, #0]
 8006ab6:	f3bf 8f4f 	dsb	sy
 8006aba:	f3bf 8f6f 	isb	sy
 8006abe:	e772      	b.n	80069a6 <xQueueGenericSend+0xbe>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 8006ac0:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8006ac2:	f000 fb5d 	bl	8007180 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8006ac6:	f000 fea1 	bl	800780c <xTaskResumeAll>
 8006aca:	e76c      	b.n	80069a6 <xQueueGenericSend+0xbe>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 8006acc:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8006ace:	f000 fb57 	bl	8007180 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8006ad2:	f000 fe9b 	bl	800780c <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 8006ad6:	2300      	movs	r3, #0
		}
	}
}
 8006ad8:	4618      	mov	r0, r3
 8006ada:	3738      	adds	r7, #56	; 0x38
 8006adc:	46bd      	mov	sp, r7
 8006ade:	bd80      	pop	{r7, pc}
 8006ae0:	e000ed04 	.word	0xe000ed04

08006ae4 <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 8006ae4:	b580      	push	{r7, lr}
 8006ae6:	b08e      	sub	sp, #56	; 0x38
 8006ae8:	af00      	add	r7, sp, #0
 8006aea:	60f8      	str	r0, [r7, #12]
 8006aec:	60b9      	str	r1, [r7, #8]
 8006aee:	607a      	str	r2, [r7, #4]
 8006af0:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 8006af2:	68fb      	ldr	r3, [r7, #12]
 8006af4:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 8006af6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006af8:	2b00      	cmp	r3, #0
 8006afa:	d10a      	bne.n	8006b12 <xQueueGenericSendFromISR+0x2e>
	__asm volatile
 8006afc:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006b00:	f383 8811 	msr	BASEPRI, r3
 8006b04:	f3bf 8f6f 	isb	sy
 8006b08:	f3bf 8f4f 	dsb	sy
 8006b0c:	627b      	str	r3, [r7, #36]	; 0x24
}
 8006b0e:	bf00      	nop
 8006b10:	e7fe      	b.n	8006b10 <xQueueGenericSendFromISR+0x2c>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8006b12:	68bb      	ldr	r3, [r7, #8]
 8006b14:	2b00      	cmp	r3, #0
 8006b16:	d103      	bne.n	8006b20 <xQueueGenericSendFromISR+0x3c>
 8006b18:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006b1a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006b1c:	2b00      	cmp	r3, #0
 8006b1e:	d101      	bne.n	8006b24 <xQueueGenericSendFromISR+0x40>
 8006b20:	2301      	movs	r3, #1
 8006b22:	e000      	b.n	8006b26 <xQueueGenericSendFromISR+0x42>
 8006b24:	2300      	movs	r3, #0
 8006b26:	2b00      	cmp	r3, #0
 8006b28:	d10a      	bne.n	8006b40 <xQueueGenericSendFromISR+0x5c>
	__asm volatile
 8006b2a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006b2e:	f383 8811 	msr	BASEPRI, r3
 8006b32:	f3bf 8f6f 	isb	sy
 8006b36:	f3bf 8f4f 	dsb	sy
 8006b3a:	623b      	str	r3, [r7, #32]
}
 8006b3c:	bf00      	nop
 8006b3e:	e7fe      	b.n	8006b3e <xQueueGenericSendFromISR+0x5a>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8006b40:	683b      	ldr	r3, [r7, #0]
 8006b42:	2b02      	cmp	r3, #2
 8006b44:	d103      	bne.n	8006b4e <xQueueGenericSendFromISR+0x6a>
 8006b46:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006b48:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006b4a:	2b01      	cmp	r3, #1
 8006b4c:	d101      	bne.n	8006b52 <xQueueGenericSendFromISR+0x6e>
 8006b4e:	2301      	movs	r3, #1
 8006b50:	e000      	b.n	8006b54 <xQueueGenericSendFromISR+0x70>
 8006b52:	2300      	movs	r3, #0
 8006b54:	2b00      	cmp	r3, #0
 8006b56:	d10a      	bne.n	8006b6e <xQueueGenericSendFromISR+0x8a>
	__asm volatile
 8006b58:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006b5c:	f383 8811 	msr	BASEPRI, r3
 8006b60:	f3bf 8f6f 	isb	sy
 8006b64:	f3bf 8f4f 	dsb	sy
 8006b68:	61fb      	str	r3, [r7, #28]
}
 8006b6a:	bf00      	nop
 8006b6c:	e7fe      	b.n	8006b6c <xQueueGenericSendFromISR+0x88>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8006b6e:	f002 faef 	bl	8009150 <vPortValidateInterruptPriority>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 8006b72:	f3ef 8211 	mrs	r2, BASEPRI
 8006b76:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006b7a:	f383 8811 	msr	BASEPRI, r3
 8006b7e:	f3bf 8f6f 	isb	sy
 8006b82:	f3bf 8f4f 	dsb	sy
 8006b86:	61ba      	str	r2, [r7, #24]
 8006b88:	617b      	str	r3, [r7, #20]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 8006b8a:	69bb      	ldr	r3, [r7, #24]
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8006b8c:	62fb      	str	r3, [r7, #44]	; 0x2c
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8006b8e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006b90:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8006b92:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006b94:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006b96:	429a      	cmp	r2, r3
 8006b98:	d302      	bcc.n	8006ba0 <xQueueGenericSendFromISR+0xbc>
 8006b9a:	683b      	ldr	r3, [r7, #0]
 8006b9c:	2b02      	cmp	r3, #2
 8006b9e:	d12c      	bne.n	8006bfa <xQueueGenericSendFromISR+0x116>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 8006ba0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006ba2:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8006ba6:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8006baa:	683a      	ldr	r2, [r7, #0]
 8006bac:	68b9      	ldr	r1, [r7, #8]
 8006bae:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8006bb0:	f000 fa56 	bl	8007060 <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 8006bb4:	f997 302b 	ldrsb.w	r3, [r7, #43]	; 0x2b
 8006bb8:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006bbc:	d112      	bne.n	8006be4 <xQueueGenericSendFromISR+0x100>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8006bbe:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006bc0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006bc2:	2b00      	cmp	r3, #0
 8006bc4:	d016      	beq.n	8006bf4 <xQueueGenericSendFromISR+0x110>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8006bc6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006bc8:	3324      	adds	r3, #36	; 0x24
 8006bca:	4618      	mov	r0, r3
 8006bcc:	f001 f846 	bl	8007c5c <xTaskRemoveFromEventList>
 8006bd0:	4603      	mov	r3, r0
 8006bd2:	2b00      	cmp	r3, #0
 8006bd4:	d00e      	beq.n	8006bf4 <xQueueGenericSendFromISR+0x110>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 8006bd6:	687b      	ldr	r3, [r7, #4]
 8006bd8:	2b00      	cmp	r3, #0
 8006bda:	d00b      	beq.n	8006bf4 <xQueueGenericSendFromISR+0x110>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 8006bdc:	687b      	ldr	r3, [r7, #4]
 8006bde:	2201      	movs	r2, #1
 8006be0:	601a      	str	r2, [r3, #0]
 8006be2:	e007      	b.n	8006bf4 <xQueueGenericSendFromISR+0x110>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 8006be4:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 8006be8:	3301      	adds	r3, #1
 8006bea:	b2db      	uxtb	r3, r3
 8006bec:	b25a      	sxtb	r2, r3
 8006bee:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006bf0:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
			}

			xReturn = pdPASS;
 8006bf4:	2301      	movs	r3, #1
 8006bf6:	637b      	str	r3, [r7, #52]	; 0x34
		{
 8006bf8:	e001      	b.n	8006bfe <xQueueGenericSendFromISR+0x11a>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 8006bfa:	2300      	movs	r3, #0
 8006bfc:	637b      	str	r3, [r7, #52]	; 0x34
 8006bfe:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006c00:	613b      	str	r3, [r7, #16]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 8006c02:	693b      	ldr	r3, [r7, #16]
 8006c04:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 8006c08:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 8006c0a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 8006c0c:	4618      	mov	r0, r3
 8006c0e:	3738      	adds	r7, #56	; 0x38
 8006c10:	46bd      	mov	sp, r7
 8006c12:	bd80      	pop	{r7, pc}

08006c14 <xQueueReceive>:
	return xReturn;
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 8006c14:	b580      	push	{r7, lr}
 8006c16:	b08c      	sub	sp, #48	; 0x30
 8006c18:	af00      	add	r7, sp, #0
 8006c1a:	60f8      	str	r0, [r7, #12]
 8006c1c:	60b9      	str	r1, [r7, #8]
 8006c1e:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 8006c20:	2300      	movs	r3, #0
 8006c22:	62fb      	str	r3, [r7, #44]	; 0x2c
TimeOut_t xTimeOut;
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 8006c24:	68fb      	ldr	r3, [r7, #12]
 8006c26:	62bb      	str	r3, [r7, #40]	; 0x28

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 8006c28:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006c2a:	2b00      	cmp	r3, #0
 8006c2c:	d10a      	bne.n	8006c44 <xQueueReceive+0x30>
	__asm volatile
 8006c2e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006c32:	f383 8811 	msr	BASEPRI, r3
 8006c36:	f3bf 8f6f 	isb	sy
 8006c3a:	f3bf 8f4f 	dsb	sy
 8006c3e:	623b      	str	r3, [r7, #32]
}
 8006c40:	bf00      	nop
 8006c42:	e7fe      	b.n	8006c42 <xQueueReceive+0x2e>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8006c44:	68bb      	ldr	r3, [r7, #8]
 8006c46:	2b00      	cmp	r3, #0
 8006c48:	d103      	bne.n	8006c52 <xQueueReceive+0x3e>
 8006c4a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006c4c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006c4e:	2b00      	cmp	r3, #0
 8006c50:	d101      	bne.n	8006c56 <xQueueReceive+0x42>
 8006c52:	2301      	movs	r3, #1
 8006c54:	e000      	b.n	8006c58 <xQueueReceive+0x44>
 8006c56:	2300      	movs	r3, #0
 8006c58:	2b00      	cmp	r3, #0
 8006c5a:	d10a      	bne.n	8006c72 <xQueueReceive+0x5e>
	__asm volatile
 8006c5c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006c60:	f383 8811 	msr	BASEPRI, r3
 8006c64:	f3bf 8f6f 	isb	sy
 8006c68:	f3bf 8f4f 	dsb	sy
 8006c6c:	61fb      	str	r3, [r7, #28]
}
 8006c6e:	bf00      	nop
 8006c70:	e7fe      	b.n	8006c70 <xQueueReceive+0x5c>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8006c72:	f001 f9b5 	bl	8007fe0 <xTaskGetSchedulerState>
 8006c76:	4603      	mov	r3, r0
 8006c78:	2b00      	cmp	r3, #0
 8006c7a:	d102      	bne.n	8006c82 <xQueueReceive+0x6e>
 8006c7c:	687b      	ldr	r3, [r7, #4]
 8006c7e:	2b00      	cmp	r3, #0
 8006c80:	d101      	bne.n	8006c86 <xQueueReceive+0x72>
 8006c82:	2301      	movs	r3, #1
 8006c84:	e000      	b.n	8006c88 <xQueueReceive+0x74>
 8006c86:	2300      	movs	r3, #0
 8006c88:	2b00      	cmp	r3, #0
 8006c8a:	d10a      	bne.n	8006ca2 <xQueueReceive+0x8e>
	__asm volatile
 8006c8c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006c90:	f383 8811 	msr	BASEPRI, r3
 8006c94:	f3bf 8f6f 	isb	sy
 8006c98:	f3bf 8f4f 	dsb	sy
 8006c9c:	61bb      	str	r3, [r7, #24]
}
 8006c9e:	bf00      	nop
 8006ca0:	e7fe      	b.n	8006ca0 <xQueueReceive+0x8c>
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */

	for( ;; )
	{
		taskENTER_CRITICAL();
 8006ca2:	f002 f993 	bl	8008fcc <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8006ca6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006ca8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006caa:	627b      	str	r3, [r7, #36]	; 0x24

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8006cac:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006cae:	2b00      	cmp	r3, #0
 8006cb0:	d01f      	beq.n	8006cf2 <xQueueReceive+0xde>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 8006cb2:	68b9      	ldr	r1, [r7, #8]
 8006cb4:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8006cb6:	f000 fa3d 	bl	8007134 <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 8006cba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006cbc:	1e5a      	subs	r2, r3, #1
 8006cbe:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006cc0:	639a      	str	r2, [r3, #56]	; 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8006cc2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006cc4:	691b      	ldr	r3, [r3, #16]
 8006cc6:	2b00      	cmp	r3, #0
 8006cc8:	d00f      	beq.n	8006cea <xQueueReceive+0xd6>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8006cca:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006ccc:	3310      	adds	r3, #16
 8006cce:	4618      	mov	r0, r3
 8006cd0:	f000 ffc4 	bl	8007c5c <xTaskRemoveFromEventList>
 8006cd4:	4603      	mov	r3, r0
 8006cd6:	2b00      	cmp	r3, #0
 8006cd8:	d007      	beq.n	8006cea <xQueueReceive+0xd6>
					{
						queueYIELD_IF_USING_PREEMPTION();
 8006cda:	4b3d      	ldr	r3, [pc, #244]	; (8006dd0 <xQueueReceive+0x1bc>)
 8006cdc:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8006ce0:	601a      	str	r2, [r3, #0]
 8006ce2:	f3bf 8f4f 	dsb	sy
 8006ce6:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 8006cea:	f002 f99f 	bl	800902c <vPortExitCritical>
				return pdPASS;
 8006cee:	2301      	movs	r3, #1
 8006cf0:	e069      	b.n	8006dc6 <xQueueReceive+0x1b2>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8006cf2:	687b      	ldr	r3, [r7, #4]
 8006cf4:	2b00      	cmp	r3, #0
 8006cf6:	d103      	bne.n	8006d00 <xQueueReceive+0xec>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8006cf8:	f002 f998 	bl	800902c <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 8006cfc:	2300      	movs	r3, #0
 8006cfe:	e062      	b.n	8006dc6 <xQueueReceive+0x1b2>
				}
				else if( xEntryTimeSet == pdFALSE )
 8006d00:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006d02:	2b00      	cmp	r3, #0
 8006d04:	d106      	bne.n	8006d14 <xQueueReceive+0x100>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8006d06:	f107 0310 	add.w	r3, r7, #16
 8006d0a:	4618      	mov	r0, r3
 8006d0c:	f001 f80a 	bl	8007d24 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8006d10:	2301      	movs	r3, #1
 8006d12:	62fb      	str	r3, [r7, #44]	; 0x2c
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8006d14:	f002 f98a 	bl	800902c <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8006d18:	f000 fd6a 	bl	80077f0 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8006d1c:	f002 f956 	bl	8008fcc <vPortEnterCritical>
 8006d20:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006d22:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8006d26:	b25b      	sxtb	r3, r3
 8006d28:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006d2c:	d103      	bne.n	8006d36 <xQueueReceive+0x122>
 8006d2e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006d30:	2200      	movs	r2, #0
 8006d32:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8006d36:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006d38:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8006d3c:	b25b      	sxtb	r3, r3
 8006d3e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006d42:	d103      	bne.n	8006d4c <xQueueReceive+0x138>
 8006d44:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006d46:	2200      	movs	r2, #0
 8006d48:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8006d4c:	f002 f96e 	bl	800902c <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8006d50:	1d3a      	adds	r2, r7, #4
 8006d52:	f107 0310 	add.w	r3, r7, #16
 8006d56:	4611      	mov	r1, r2
 8006d58:	4618      	mov	r0, r3
 8006d5a:	f000 fff9 	bl	8007d50 <xTaskCheckForTimeOut>
 8006d5e:	4603      	mov	r3, r0
 8006d60:	2b00      	cmp	r3, #0
 8006d62:	d123      	bne.n	8006dac <xQueueReceive+0x198>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8006d64:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8006d66:	f000 fa5d 	bl	8007224 <prvIsQueueEmpty>
 8006d6a:	4603      	mov	r3, r0
 8006d6c:	2b00      	cmp	r3, #0
 8006d6e:	d017      	beq.n	8006da0 <xQueueReceive+0x18c>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 8006d70:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006d72:	3324      	adds	r3, #36	; 0x24
 8006d74:	687a      	ldr	r2, [r7, #4]
 8006d76:	4611      	mov	r1, r2
 8006d78:	4618      	mov	r0, r3
 8006d7a:	f000 ff1f 	bl	8007bbc <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 8006d7e:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8006d80:	f000 f9fe 	bl	8007180 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 8006d84:	f000 fd42 	bl	800780c <xTaskResumeAll>
 8006d88:	4603      	mov	r3, r0
 8006d8a:	2b00      	cmp	r3, #0
 8006d8c:	d189      	bne.n	8006ca2 <xQueueReceive+0x8e>
				{
					portYIELD_WITHIN_API();
 8006d8e:	4b10      	ldr	r3, [pc, #64]	; (8006dd0 <xQueueReceive+0x1bc>)
 8006d90:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8006d94:	601a      	str	r2, [r3, #0]
 8006d96:	f3bf 8f4f 	dsb	sy
 8006d9a:	f3bf 8f6f 	isb	sy
 8006d9e:	e780      	b.n	8006ca2 <xQueueReceive+0x8e>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 8006da0:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8006da2:	f000 f9ed 	bl	8007180 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8006da6:	f000 fd31 	bl	800780c <xTaskResumeAll>
 8006daa:	e77a      	b.n	8006ca2 <xQueueReceive+0x8e>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 8006dac:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8006dae:	f000 f9e7 	bl	8007180 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8006db2:	f000 fd2b 	bl	800780c <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8006db6:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8006db8:	f000 fa34 	bl	8007224 <prvIsQueueEmpty>
 8006dbc:	4603      	mov	r3, r0
 8006dbe:	2b00      	cmp	r3, #0
 8006dc0:	f43f af6f 	beq.w	8006ca2 <xQueueReceive+0x8e>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 8006dc4:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
}
 8006dc6:	4618      	mov	r0, r3
 8006dc8:	3730      	adds	r7, #48	; 0x30
 8006dca:	46bd      	mov	sp, r7
 8006dcc:	bd80      	pop	{r7, pc}
 8006dce:	bf00      	nop
 8006dd0:	e000ed04 	.word	0xe000ed04

08006dd4 <xQueueSemaphoreTake>:
/*-----------------------------------------------------------*/

BaseType_t xQueueSemaphoreTake( QueueHandle_t xQueue, TickType_t xTicksToWait )
{
 8006dd4:	b580      	push	{r7, lr}
 8006dd6:	b08e      	sub	sp, #56	; 0x38
 8006dd8:	af00      	add	r7, sp, #0
 8006dda:	6078      	str	r0, [r7, #4]
 8006ddc:	6039      	str	r1, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE;
 8006dde:	2300      	movs	r3, #0
 8006de0:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 8006de2:	687b      	ldr	r3, [r7, #4]
 8006de4:	62fb      	str	r3, [r7, #44]	; 0x2c

#if( configUSE_MUTEXES == 1 )
	BaseType_t xInheritanceOccurred = pdFALSE;
 8006de6:	2300      	movs	r3, #0
 8006de8:	633b      	str	r3, [r7, #48]	; 0x30
#endif

	/* Check the queue pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 8006dea:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006dec:	2b00      	cmp	r3, #0
 8006dee:	d10a      	bne.n	8006e06 <xQueueSemaphoreTake+0x32>
	__asm volatile
 8006df0:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006df4:	f383 8811 	msr	BASEPRI, r3
 8006df8:	f3bf 8f6f 	isb	sy
 8006dfc:	f3bf 8f4f 	dsb	sy
 8006e00:	623b      	str	r3, [r7, #32]
}
 8006e02:	bf00      	nop
 8006e04:	e7fe      	b.n	8006e04 <xQueueSemaphoreTake+0x30>

	/* Check this really is a semaphore, in which case the item size will be
	0. */
	configASSERT( pxQueue->uxItemSize == 0 );
 8006e06:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006e08:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006e0a:	2b00      	cmp	r3, #0
 8006e0c:	d00a      	beq.n	8006e24 <xQueueSemaphoreTake+0x50>
	__asm volatile
 8006e0e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006e12:	f383 8811 	msr	BASEPRI, r3
 8006e16:	f3bf 8f6f 	isb	sy
 8006e1a:	f3bf 8f4f 	dsb	sy
 8006e1e:	61fb      	str	r3, [r7, #28]
}
 8006e20:	bf00      	nop
 8006e22:	e7fe      	b.n	8006e22 <xQueueSemaphoreTake+0x4e>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8006e24:	f001 f8dc 	bl	8007fe0 <xTaskGetSchedulerState>
 8006e28:	4603      	mov	r3, r0
 8006e2a:	2b00      	cmp	r3, #0
 8006e2c:	d102      	bne.n	8006e34 <xQueueSemaphoreTake+0x60>
 8006e2e:	683b      	ldr	r3, [r7, #0]
 8006e30:	2b00      	cmp	r3, #0
 8006e32:	d101      	bne.n	8006e38 <xQueueSemaphoreTake+0x64>
 8006e34:	2301      	movs	r3, #1
 8006e36:	e000      	b.n	8006e3a <xQueueSemaphoreTake+0x66>
 8006e38:	2300      	movs	r3, #0
 8006e3a:	2b00      	cmp	r3, #0
 8006e3c:	d10a      	bne.n	8006e54 <xQueueSemaphoreTake+0x80>
	__asm volatile
 8006e3e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006e42:	f383 8811 	msr	BASEPRI, r3
 8006e46:	f3bf 8f6f 	isb	sy
 8006e4a:	f3bf 8f4f 	dsb	sy
 8006e4e:	61bb      	str	r3, [r7, #24]
}
 8006e50:	bf00      	nop
 8006e52:	e7fe      	b.n	8006e52 <xQueueSemaphoreTake+0x7e>
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */

	for( ;; )
	{
		taskENTER_CRITICAL();
 8006e54:	f002 f8ba 	bl	8008fcc <vPortEnterCritical>
		{
			/* Semaphores are queues with an item size of 0, and where the
			number of messages in the queue is the semaphore's count value. */
			const UBaseType_t uxSemaphoreCount = pxQueue->uxMessagesWaiting;
 8006e58:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006e5a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006e5c:	62bb      	str	r3, [r7, #40]	; 0x28

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxSemaphoreCount > ( UBaseType_t ) 0 )
 8006e5e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006e60:	2b00      	cmp	r3, #0
 8006e62:	d024      	beq.n	8006eae <xQueueSemaphoreTake+0xda>
			{
				traceQUEUE_RECEIVE( pxQueue );

				/* Semaphores are queues with a data size of zero and where the
				messages waiting is the semaphore's count.  Reduce the count. */
				pxQueue->uxMessagesWaiting = uxSemaphoreCount - ( UBaseType_t ) 1;
 8006e64:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006e66:	1e5a      	subs	r2, r3, #1
 8006e68:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006e6a:	639a      	str	r2, [r3, #56]	; 0x38

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8006e6c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006e6e:	681b      	ldr	r3, [r3, #0]
 8006e70:	2b00      	cmp	r3, #0
 8006e72:	d104      	bne.n	8006e7e <xQueueSemaphoreTake+0xaa>
					{
						/* Record the information required to implement
						priority inheritance should it become necessary. */
						pxQueue->pxMutexHolder = ( int8_t * ) pvTaskIncrementMutexHeldCount(); /*lint !e961 Cast is not redundant as TaskHandle_t is a typedef. */
 8006e74:	f001 fa34 	bl	80082e0 <pvTaskIncrementMutexHeldCount>
 8006e78:	4602      	mov	r2, r0
 8006e7a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006e7c:	605a      	str	r2, [r3, #4]
				}
				#endif /* configUSE_MUTEXES */

				/* Check to see if other tasks are blocked waiting to give the
				semaphore, and if so, unblock the highest priority such task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8006e7e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006e80:	691b      	ldr	r3, [r3, #16]
 8006e82:	2b00      	cmp	r3, #0
 8006e84:	d00f      	beq.n	8006ea6 <xQueueSemaphoreTake+0xd2>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8006e86:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006e88:	3310      	adds	r3, #16
 8006e8a:	4618      	mov	r0, r3
 8006e8c:	f000 fee6 	bl	8007c5c <xTaskRemoveFromEventList>
 8006e90:	4603      	mov	r3, r0
 8006e92:	2b00      	cmp	r3, #0
 8006e94:	d007      	beq.n	8006ea6 <xQueueSemaphoreTake+0xd2>
					{
						queueYIELD_IF_USING_PREEMPTION();
 8006e96:	4b54      	ldr	r3, [pc, #336]	; (8006fe8 <xQueueSemaphoreTake+0x214>)
 8006e98:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8006e9c:	601a      	str	r2, [r3, #0]
 8006e9e:	f3bf 8f4f 	dsb	sy
 8006ea2:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 8006ea6:	f002 f8c1 	bl	800902c <vPortExitCritical>
				return pdPASS;
 8006eaa:	2301      	movs	r3, #1
 8006eac:	e097      	b.n	8006fde <xQueueSemaphoreTake+0x20a>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8006eae:	683b      	ldr	r3, [r7, #0]
 8006eb0:	2b00      	cmp	r3, #0
 8006eb2:	d111      	bne.n	8006ed8 <xQueueSemaphoreTake+0x104>
					/* For inheritance to have occurred there must have been an
					initial timeout, and an adjusted timeout cannot become 0, as
					if it were 0 the function would have exited. */
					#if( configUSE_MUTEXES == 1 )
					{
						configASSERT( xInheritanceOccurred == pdFALSE );
 8006eb4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006eb6:	2b00      	cmp	r3, #0
 8006eb8:	d00a      	beq.n	8006ed0 <xQueueSemaphoreTake+0xfc>
	__asm volatile
 8006eba:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006ebe:	f383 8811 	msr	BASEPRI, r3
 8006ec2:	f3bf 8f6f 	isb	sy
 8006ec6:	f3bf 8f4f 	dsb	sy
 8006eca:	617b      	str	r3, [r7, #20]
}
 8006ecc:	bf00      	nop
 8006ece:	e7fe      	b.n	8006ece <xQueueSemaphoreTake+0xfa>
					}
					#endif /* configUSE_MUTEXES */

					/* The semaphore count was 0 and no block time is specified
					(or the block time has expired) so exit now. */
					taskEXIT_CRITICAL();
 8006ed0:	f002 f8ac 	bl	800902c <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 8006ed4:	2300      	movs	r3, #0
 8006ed6:	e082      	b.n	8006fde <xQueueSemaphoreTake+0x20a>
				}
				else if( xEntryTimeSet == pdFALSE )
 8006ed8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006eda:	2b00      	cmp	r3, #0
 8006edc:	d106      	bne.n	8006eec <xQueueSemaphoreTake+0x118>
				{
					/* The semaphore count was 0 and a block time was specified
					so configure the timeout structure ready to block. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8006ede:	f107 030c 	add.w	r3, r7, #12
 8006ee2:	4618      	mov	r0, r3
 8006ee4:	f000 ff1e 	bl	8007d24 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8006ee8:	2301      	movs	r3, #1
 8006eea:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8006eec:	f002 f89e 	bl	800902c <vPortExitCritical>

		/* Interrupts and other tasks can give to and take from the semaphore
		now the critical section has been exited. */

		vTaskSuspendAll();
 8006ef0:	f000 fc7e 	bl	80077f0 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8006ef4:	f002 f86a 	bl	8008fcc <vPortEnterCritical>
 8006ef8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006efa:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8006efe:	b25b      	sxtb	r3, r3
 8006f00:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006f04:	d103      	bne.n	8006f0e <xQueueSemaphoreTake+0x13a>
 8006f06:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006f08:	2200      	movs	r2, #0
 8006f0a:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8006f0e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006f10:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8006f14:	b25b      	sxtb	r3, r3
 8006f16:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006f1a:	d103      	bne.n	8006f24 <xQueueSemaphoreTake+0x150>
 8006f1c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006f1e:	2200      	movs	r2, #0
 8006f20:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8006f24:	f002 f882 	bl	800902c <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8006f28:	463a      	mov	r2, r7
 8006f2a:	f107 030c 	add.w	r3, r7, #12
 8006f2e:	4611      	mov	r1, r2
 8006f30:	4618      	mov	r0, r3
 8006f32:	f000 ff0d 	bl	8007d50 <xTaskCheckForTimeOut>
 8006f36:	4603      	mov	r3, r0
 8006f38:	2b00      	cmp	r3, #0
 8006f3a:	d132      	bne.n	8006fa2 <xQueueSemaphoreTake+0x1ce>
		{
			/* A block time is specified and not expired.  If the semaphore
			count is 0 then enter the Blocked state to wait for a semaphore to
			become available.  As semaphores are implemented with queues the
			queue being empty is equivalent to the semaphore count being 0. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8006f3c:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8006f3e:	f000 f971 	bl	8007224 <prvIsQueueEmpty>
 8006f42:	4603      	mov	r3, r0
 8006f44:	2b00      	cmp	r3, #0
 8006f46:	d026      	beq.n	8006f96 <xQueueSemaphoreTake+0x1c2>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8006f48:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006f4a:	681b      	ldr	r3, [r3, #0]
 8006f4c:	2b00      	cmp	r3, #0
 8006f4e:	d109      	bne.n	8006f64 <xQueueSemaphoreTake+0x190>
					{
						taskENTER_CRITICAL();
 8006f50:	f002 f83c 	bl	8008fcc <vPortEnterCritical>
						{
							xInheritanceOccurred = xTaskPriorityInherit( ( void * ) pxQueue->pxMutexHolder );
 8006f54:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006f56:	685b      	ldr	r3, [r3, #4]
 8006f58:	4618      	mov	r0, r3
 8006f5a:	f001 f85f 	bl	800801c <xTaskPriorityInherit>
 8006f5e:	6338      	str	r0, [r7, #48]	; 0x30
						}
						taskEXIT_CRITICAL();
 8006f60:	f002 f864 	bl	800902c <vPortExitCritical>
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif

				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 8006f64:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006f66:	3324      	adds	r3, #36	; 0x24
 8006f68:	683a      	ldr	r2, [r7, #0]
 8006f6a:	4611      	mov	r1, r2
 8006f6c:	4618      	mov	r0, r3
 8006f6e:	f000 fe25 	bl	8007bbc <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 8006f72:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8006f74:	f000 f904 	bl	8007180 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 8006f78:	f000 fc48 	bl	800780c <xTaskResumeAll>
 8006f7c:	4603      	mov	r3, r0
 8006f7e:	2b00      	cmp	r3, #0
 8006f80:	f47f af68 	bne.w	8006e54 <xQueueSemaphoreTake+0x80>
				{
					portYIELD_WITHIN_API();
 8006f84:	4b18      	ldr	r3, [pc, #96]	; (8006fe8 <xQueueSemaphoreTake+0x214>)
 8006f86:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8006f8a:	601a      	str	r2, [r3, #0]
 8006f8c:	f3bf 8f4f 	dsb	sy
 8006f90:	f3bf 8f6f 	isb	sy
 8006f94:	e75e      	b.n	8006e54 <xQueueSemaphoreTake+0x80>
			}
			else
			{
				/* There was no timeout and the semaphore count was not 0, so
				attempt to take the semaphore again. */
				prvUnlockQueue( pxQueue );
 8006f96:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8006f98:	f000 f8f2 	bl	8007180 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8006f9c:	f000 fc36 	bl	800780c <xTaskResumeAll>
 8006fa0:	e758      	b.n	8006e54 <xQueueSemaphoreTake+0x80>
			}
		}
		else
		{
			/* Timed out. */
			prvUnlockQueue( pxQueue );
 8006fa2:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8006fa4:	f000 f8ec 	bl	8007180 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8006fa8:	f000 fc30 	bl	800780c <xTaskResumeAll>

			/* If the semaphore count is 0 exit now as the timeout has
			expired.  Otherwise return to attempt to take the semaphore that is
			known to be available.  As semaphores are implemented by queues the
			queue being empty is equivalent to the semaphore count being 0. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8006fac:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8006fae:	f000 f939 	bl	8007224 <prvIsQueueEmpty>
 8006fb2:	4603      	mov	r3, r0
 8006fb4:	2b00      	cmp	r3, #0
 8006fb6:	f43f af4d 	beq.w	8006e54 <xQueueSemaphoreTake+0x80>
				#if ( configUSE_MUTEXES == 1 )
				{
					/* xInheritanceOccurred could only have be set if
					pxQueue->uxQueueType == queueQUEUE_IS_MUTEX so no need to
					test the mutex type again to check it is actually a mutex. */
					if( xInheritanceOccurred != pdFALSE )
 8006fba:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006fbc:	2b00      	cmp	r3, #0
 8006fbe:	d00d      	beq.n	8006fdc <xQueueSemaphoreTake+0x208>
					{
						taskENTER_CRITICAL();
 8006fc0:	f002 f804 	bl	8008fcc <vPortEnterCritical>
							/* This task blocking on the mutex caused another
							task to inherit this task's priority.  Now this task
							has timed out the priority should be disinherited
							again, but only as low as the next highest priority
							task that is waiting for the same mutex. */
							uxHighestWaitingPriority = prvGetDisinheritPriorityAfterTimeout( pxQueue );
 8006fc4:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8006fc6:	f000 f834 	bl	8007032 <prvGetDisinheritPriorityAfterTimeout>
 8006fca:	6278      	str	r0, [r7, #36]	; 0x24
							vTaskPriorityDisinheritAfterTimeout( ( void * ) pxQueue->pxMutexHolder, uxHighestWaitingPriority );
 8006fcc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006fce:	685b      	ldr	r3, [r3, #4]
 8006fd0:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8006fd2:	4618      	mov	r0, r3
 8006fd4:	f001 f8fe 	bl	80081d4 <vTaskPriorityDisinheritAfterTimeout>
						}
						taskEXIT_CRITICAL();
 8006fd8:	f002 f828 	bl	800902c <vPortExitCritical>
					}
				}
				#endif /* configUSE_MUTEXES */

				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 8006fdc:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
}
 8006fde:	4618      	mov	r0, r3
 8006fe0:	3738      	adds	r7, #56	; 0x38
 8006fe2:	46bd      	mov	sp, r7
 8006fe4:	bd80      	pop	{r7, pc}
 8006fe6:	bf00      	nop
 8006fe8:	e000ed04 	.word	0xe000ed04

08006fec <vQueueDelete>:
	return uxReturn;
} /*lint !e818 Pointer cannot be declared const as xQueue is a typedef not pointer. */
/*-----------------------------------------------------------*/

void vQueueDelete( QueueHandle_t xQueue )
{
 8006fec:	b580      	push	{r7, lr}
 8006fee:	b084      	sub	sp, #16
 8006ff0:	af00      	add	r7, sp, #0
 8006ff2:	6078      	str	r0, [r7, #4]
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 8006ff4:	687b      	ldr	r3, [r7, #4]
 8006ff6:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 8006ff8:	68fb      	ldr	r3, [r7, #12]
 8006ffa:	2b00      	cmp	r3, #0
 8006ffc:	d10a      	bne.n	8007014 <vQueueDelete+0x28>
	__asm volatile
 8006ffe:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007002:	f383 8811 	msr	BASEPRI, r3
 8007006:	f3bf 8f6f 	isb	sy
 800700a:	f3bf 8f4f 	dsb	sy
 800700e:	60bb      	str	r3, [r7, #8]
}
 8007010:	bf00      	nop
 8007012:	e7fe      	b.n	8007012 <vQueueDelete+0x26>
	traceQUEUE_DELETE( pxQueue );

	#if ( configQUEUE_REGISTRY_SIZE > 0 )
	{
		vQueueUnregisterQueue( pxQueue );
 8007014:	68f8      	ldr	r0, [r7, #12]
 8007016:	f000 f95b 	bl	80072d0 <vQueueUnregisterQueue>
	}
	#elif( ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 1 ) )
	{
		/* The queue could have been allocated statically or dynamically, so
		check before attempting to free the memory. */
		if( pxQueue->ucStaticallyAllocated == ( uint8_t ) pdFALSE )
 800701a:	68fb      	ldr	r3, [r7, #12]
 800701c:	f893 3046 	ldrb.w	r3, [r3, #70]	; 0x46
 8007020:	2b00      	cmp	r3, #0
 8007022:	d102      	bne.n	800702a <vQueueDelete+0x3e>
		{
			vPortFree( pxQueue );
 8007024:	68f8      	ldr	r0, [r7, #12]
 8007026:	f002 f995 	bl	8009354 <vPortFree>
		/* The queue must have been statically allocated, so is not going to be
		deleted.  Avoid compiler warnings about the unused parameter. */
		( void ) pxQueue;
	}
	#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
}
 800702a:	bf00      	nop
 800702c:	3710      	adds	r7, #16
 800702e:	46bd      	mov	sp, r7
 8007030:	bd80      	pop	{r7, pc}

08007032 <prvGetDisinheritPriorityAfterTimeout>:
/*-----------------------------------------------------------*/

#if( configUSE_MUTEXES == 1 )

	static UBaseType_t prvGetDisinheritPriorityAfterTimeout( const Queue_t * const pxQueue )
	{
 8007032:	b480      	push	{r7}
 8007034:	b085      	sub	sp, #20
 8007036:	af00      	add	r7, sp, #0
 8007038:	6078      	str	r0, [r7, #4]
		priority, but the waiting task times out, then the holder should
		disinherit the priority - but only down to the highest priority of any
		other tasks that are waiting for the same mutex.  For this purpose,
		return the priority of the highest priority task that is waiting for the
		mutex. */
		if( listCURRENT_LIST_LENGTH( &( pxQueue->xTasksWaitingToReceive ) ) > 0 )
 800703a:	687b      	ldr	r3, [r7, #4]
 800703c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800703e:	2b00      	cmp	r3, #0
 8007040:	d006      	beq.n	8007050 <prvGetDisinheritPriorityAfterTimeout+0x1e>
		{
			uxHighestPriorityOfWaitingTasks = configMAX_PRIORITIES - listGET_ITEM_VALUE_OF_HEAD_ENTRY( &( pxQueue->xTasksWaitingToReceive ) );
 8007042:	687b      	ldr	r3, [r7, #4]
 8007044:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007046:	681b      	ldr	r3, [r3, #0]
 8007048:	f1c3 0338 	rsb	r3, r3, #56	; 0x38
 800704c:	60fb      	str	r3, [r7, #12]
 800704e:	e001      	b.n	8007054 <prvGetDisinheritPriorityAfterTimeout+0x22>
		}
		else
		{
			uxHighestPriorityOfWaitingTasks = tskIDLE_PRIORITY;
 8007050:	2300      	movs	r3, #0
 8007052:	60fb      	str	r3, [r7, #12]
		}

		return uxHighestPriorityOfWaitingTasks;
 8007054:	68fb      	ldr	r3, [r7, #12]
	}
 8007056:	4618      	mov	r0, r3
 8007058:	3714      	adds	r7, #20
 800705a:	46bd      	mov	sp, r7
 800705c:	bc80      	pop	{r7}
 800705e:	4770      	bx	lr

08007060 <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 8007060:	b580      	push	{r7, lr}
 8007062:	b086      	sub	sp, #24
 8007064:	af00      	add	r7, sp, #0
 8007066:	60f8      	str	r0, [r7, #12]
 8007068:	60b9      	str	r1, [r7, #8]
 800706a:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 800706c:	2300      	movs	r3, #0
 800706e:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8007070:	68fb      	ldr	r3, [r7, #12]
 8007072:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007074:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 8007076:	68fb      	ldr	r3, [r7, #12]
 8007078:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800707a:	2b00      	cmp	r3, #0
 800707c:	d10d      	bne.n	800709a <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 800707e:	68fb      	ldr	r3, [r7, #12]
 8007080:	681b      	ldr	r3, [r3, #0]
 8007082:	2b00      	cmp	r3, #0
 8007084:	d14d      	bne.n	8007122 <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( ( void * ) pxQueue->pxMutexHolder );
 8007086:	68fb      	ldr	r3, [r7, #12]
 8007088:	685b      	ldr	r3, [r3, #4]
 800708a:	4618      	mov	r0, r3
 800708c:	f001 f834 	bl	80080f8 <xTaskPriorityDisinherit>
 8007090:	6178      	str	r0, [r7, #20]
				pxQueue->pxMutexHolder = NULL;
 8007092:	68fb      	ldr	r3, [r7, #12]
 8007094:	2200      	movs	r2, #0
 8007096:	605a      	str	r2, [r3, #4]
 8007098:	e043      	b.n	8007122 <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 800709a:	687b      	ldr	r3, [r7, #4]
 800709c:	2b00      	cmp	r3, #0
 800709e:	d119      	bne.n	80070d4 <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0. */
 80070a0:	68fb      	ldr	r3, [r7, #12]
 80070a2:	6898      	ldr	r0, [r3, #8]
 80070a4:	68fb      	ldr	r3, [r7, #12]
 80070a6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80070a8:	461a      	mov	r2, r3
 80070aa:	68b9      	ldr	r1, [r7, #8]
 80070ac:	f002 fa8a 	bl	80095c4 <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize;
 80070b0:	68fb      	ldr	r3, [r7, #12]
 80070b2:	689a      	ldr	r2, [r3, #8]
 80070b4:	68fb      	ldr	r3, [r7, #12]
 80070b6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80070b8:	441a      	add	r2, r3
 80070ba:	68fb      	ldr	r3, [r7, #12]
 80070bc:	609a      	str	r2, [r3, #8]
		if( pxQueue->pcWriteTo >= pxQueue->pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 80070be:	68fb      	ldr	r3, [r7, #12]
 80070c0:	689a      	ldr	r2, [r3, #8]
 80070c2:	68fb      	ldr	r3, [r7, #12]
 80070c4:	685b      	ldr	r3, [r3, #4]
 80070c6:	429a      	cmp	r2, r3
 80070c8:	d32b      	bcc.n	8007122 <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 80070ca:	68fb      	ldr	r3, [r7, #12]
 80070cc:	681a      	ldr	r2, [r3, #0]
 80070ce:	68fb      	ldr	r3, [r7, #12]
 80070d0:	609a      	str	r2, [r3, #8]
 80070d2:	e026      	b.n	8007122 <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80070d4:	68fb      	ldr	r3, [r7, #12]
 80070d6:	68d8      	ldr	r0, [r3, #12]
 80070d8:	68fb      	ldr	r3, [r7, #12]
 80070da:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80070dc:	461a      	mov	r2, r3
 80070de:	68b9      	ldr	r1, [r7, #8]
 80070e0:	f002 fa70 	bl	80095c4 <memcpy>
		pxQueue->u.pcReadFrom -= pxQueue->uxItemSize;
 80070e4:	68fb      	ldr	r3, [r7, #12]
 80070e6:	68da      	ldr	r2, [r3, #12]
 80070e8:	68fb      	ldr	r3, [r7, #12]
 80070ea:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80070ec:	425b      	negs	r3, r3
 80070ee:	441a      	add	r2, r3
 80070f0:	68fb      	ldr	r3, [r7, #12]
 80070f2:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 80070f4:	68fb      	ldr	r3, [r7, #12]
 80070f6:	68da      	ldr	r2, [r3, #12]
 80070f8:	68fb      	ldr	r3, [r7, #12]
 80070fa:	681b      	ldr	r3, [r3, #0]
 80070fc:	429a      	cmp	r2, r3
 80070fe:	d207      	bcs.n	8007110 <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.pcReadFrom = ( pxQueue->pcTail - pxQueue->uxItemSize );
 8007100:	68fb      	ldr	r3, [r7, #12]
 8007102:	685a      	ldr	r2, [r3, #4]
 8007104:	68fb      	ldr	r3, [r7, #12]
 8007106:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007108:	425b      	negs	r3, r3
 800710a:	441a      	add	r2, r3
 800710c:	68fb      	ldr	r3, [r7, #12]
 800710e:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 8007110:	687b      	ldr	r3, [r7, #4]
 8007112:	2b02      	cmp	r3, #2
 8007114:	d105      	bne.n	8007122 <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8007116:	693b      	ldr	r3, [r7, #16]
 8007118:	2b00      	cmp	r3, #0
 800711a:	d002      	beq.n	8007122 <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 800711c:	693b      	ldr	r3, [r7, #16]
 800711e:	3b01      	subs	r3, #1
 8007120:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 8007122:	693b      	ldr	r3, [r7, #16]
 8007124:	1c5a      	adds	r2, r3, #1
 8007126:	68fb      	ldr	r3, [r7, #12]
 8007128:	639a      	str	r2, [r3, #56]	; 0x38

	return xReturn;
 800712a:	697b      	ldr	r3, [r7, #20]
}
 800712c:	4618      	mov	r0, r3
 800712e:	3718      	adds	r7, #24
 8007130:	46bd      	mov	sp, r7
 8007132:	bd80      	pop	{r7, pc}

08007134 <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 8007134:	b580      	push	{r7, lr}
 8007136:	b082      	sub	sp, #8
 8007138:	af00      	add	r7, sp, #0
 800713a:	6078      	str	r0, [r7, #4]
 800713c:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 800713e:	687b      	ldr	r3, [r7, #4]
 8007140:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007142:	2b00      	cmp	r3, #0
 8007144:	d018      	beq.n	8007178 <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.pcReadFrom += pxQueue->uxItemSize;
 8007146:	687b      	ldr	r3, [r7, #4]
 8007148:	68da      	ldr	r2, [r3, #12]
 800714a:	687b      	ldr	r3, [r7, #4]
 800714c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800714e:	441a      	add	r2, r3
 8007150:	687b      	ldr	r3, [r7, #4]
 8007152:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.pcReadFrom >= pxQueue->pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 8007154:	687b      	ldr	r3, [r7, #4]
 8007156:	68da      	ldr	r2, [r3, #12]
 8007158:	687b      	ldr	r3, [r7, #4]
 800715a:	685b      	ldr	r3, [r3, #4]
 800715c:	429a      	cmp	r2, r3
 800715e:	d303      	bcc.n	8007168 <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.pcReadFrom = pxQueue->pcHead;
 8007160:	687b      	ldr	r3, [r7, #4]
 8007162:	681a      	ldr	r2, [r3, #0]
 8007164:	687b      	ldr	r3, [r7, #4]
 8007166:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0. */
 8007168:	687b      	ldr	r3, [r7, #4]
 800716a:	68d9      	ldr	r1, [r3, #12]
 800716c:	687b      	ldr	r3, [r7, #4]
 800716e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007170:	461a      	mov	r2, r3
 8007172:	6838      	ldr	r0, [r7, #0]
 8007174:	f002 fa26 	bl	80095c4 <memcpy>
	}
}
 8007178:	bf00      	nop
 800717a:	3708      	adds	r7, #8
 800717c:	46bd      	mov	sp, r7
 800717e:	bd80      	pop	{r7, pc}

08007180 <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 8007180:	b580      	push	{r7, lr}
 8007182:	b084      	sub	sp, #16
 8007184:	af00      	add	r7, sp, #0
 8007186:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 8007188:	f001 ff20 	bl	8008fcc <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 800718c:	687b      	ldr	r3, [r7, #4]
 800718e:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8007192:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8007194:	e011      	b.n	80071ba <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8007196:	687b      	ldr	r3, [r7, #4]
 8007198:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800719a:	2b00      	cmp	r3, #0
 800719c:	d012      	beq.n	80071c4 <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800719e:	687b      	ldr	r3, [r7, #4]
 80071a0:	3324      	adds	r3, #36	; 0x24
 80071a2:	4618      	mov	r0, r3
 80071a4:	f000 fd5a 	bl	8007c5c <xTaskRemoveFromEventList>
 80071a8:	4603      	mov	r3, r0
 80071aa:	2b00      	cmp	r3, #0
 80071ac:	d001      	beq.n	80071b2 <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 80071ae:	f000 fe31 	bl	8007e14 <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 80071b2:	7bfb      	ldrb	r3, [r7, #15]
 80071b4:	3b01      	subs	r3, #1
 80071b6:	b2db      	uxtb	r3, r3
 80071b8:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 80071ba:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80071be:	2b00      	cmp	r3, #0
 80071c0:	dce9      	bgt.n	8007196 <prvUnlockQueue+0x16>
 80071c2:	e000      	b.n	80071c6 <prvUnlockQueue+0x46>
					break;
 80071c4:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 80071c6:	687b      	ldr	r3, [r7, #4]
 80071c8:	22ff      	movs	r2, #255	; 0xff
 80071ca:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
	}
	taskEXIT_CRITICAL();
 80071ce:	f001 ff2d 	bl	800902c <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 80071d2:	f001 fefb 	bl	8008fcc <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 80071d6:	687b      	ldr	r3, [r7, #4]
 80071d8:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 80071dc:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 80071de:	e011      	b.n	8007204 <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 80071e0:	687b      	ldr	r3, [r7, #4]
 80071e2:	691b      	ldr	r3, [r3, #16]
 80071e4:	2b00      	cmp	r3, #0
 80071e6:	d012      	beq.n	800720e <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 80071e8:	687b      	ldr	r3, [r7, #4]
 80071ea:	3310      	adds	r3, #16
 80071ec:	4618      	mov	r0, r3
 80071ee:	f000 fd35 	bl	8007c5c <xTaskRemoveFromEventList>
 80071f2:	4603      	mov	r3, r0
 80071f4:	2b00      	cmp	r3, #0
 80071f6:	d001      	beq.n	80071fc <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 80071f8:	f000 fe0c 	bl	8007e14 <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 80071fc:	7bbb      	ldrb	r3, [r7, #14]
 80071fe:	3b01      	subs	r3, #1
 8007200:	b2db      	uxtb	r3, r3
 8007202:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 8007204:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8007208:	2b00      	cmp	r3, #0
 800720a:	dce9      	bgt.n	80071e0 <prvUnlockQueue+0x60>
 800720c:	e000      	b.n	8007210 <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 800720e:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 8007210:	687b      	ldr	r3, [r7, #4]
 8007212:	22ff      	movs	r2, #255	; 0xff
 8007214:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
	}
	taskEXIT_CRITICAL();
 8007218:	f001 ff08 	bl	800902c <vPortExitCritical>
}
 800721c:	bf00      	nop
 800721e:	3710      	adds	r7, #16
 8007220:	46bd      	mov	sp, r7
 8007222:	bd80      	pop	{r7, pc}

08007224 <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 8007224:	b580      	push	{r7, lr}
 8007226:	b084      	sub	sp, #16
 8007228:	af00      	add	r7, sp, #0
 800722a:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 800722c:	f001 fece 	bl	8008fcc <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 8007230:	687b      	ldr	r3, [r7, #4]
 8007232:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007234:	2b00      	cmp	r3, #0
 8007236:	d102      	bne.n	800723e <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 8007238:	2301      	movs	r3, #1
 800723a:	60fb      	str	r3, [r7, #12]
 800723c:	e001      	b.n	8007242 <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 800723e:	2300      	movs	r3, #0
 8007240:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8007242:	f001 fef3 	bl	800902c <vPortExitCritical>

	return xReturn;
 8007246:	68fb      	ldr	r3, [r7, #12]
}
 8007248:	4618      	mov	r0, r3
 800724a:	3710      	adds	r7, #16
 800724c:	46bd      	mov	sp, r7
 800724e:	bd80      	pop	{r7, pc}

08007250 <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 8007250:	b580      	push	{r7, lr}
 8007252:	b084      	sub	sp, #16
 8007254:	af00      	add	r7, sp, #0
 8007256:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8007258:	f001 feb8 	bl	8008fcc <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 800725c:	687b      	ldr	r3, [r7, #4]
 800725e:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8007260:	687b      	ldr	r3, [r7, #4]
 8007262:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007264:	429a      	cmp	r2, r3
 8007266:	d102      	bne.n	800726e <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 8007268:	2301      	movs	r3, #1
 800726a:	60fb      	str	r3, [r7, #12]
 800726c:	e001      	b.n	8007272 <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 800726e:	2300      	movs	r3, #0
 8007270:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8007272:	f001 fedb 	bl	800902c <vPortExitCritical>

	return xReturn;
 8007276:	68fb      	ldr	r3, [r7, #12]
}
 8007278:	4618      	mov	r0, r3
 800727a:	3710      	adds	r7, #16
 800727c:	46bd      	mov	sp, r7
 800727e:	bd80      	pop	{r7, pc}

08007280 <vQueueAddToRegistry>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueAddToRegistry( QueueHandle_t xQueue, const char *pcQueueName ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
	{
 8007280:	b480      	push	{r7}
 8007282:	b085      	sub	sp, #20
 8007284:	af00      	add	r7, sp, #0
 8007286:	6078      	str	r0, [r7, #4]
 8007288:	6039      	str	r1, [r7, #0]
	UBaseType_t ux;

		/* See if there is an empty space in the registry.  A NULL name denotes
		a free slot. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 800728a:	2300      	movs	r3, #0
 800728c:	60fb      	str	r3, [r7, #12]
 800728e:	e014      	b.n	80072ba <vQueueAddToRegistry+0x3a>
		{
			if( xQueueRegistry[ ux ].pcQueueName == NULL )
 8007290:	4a0e      	ldr	r2, [pc, #56]	; (80072cc <vQueueAddToRegistry+0x4c>)
 8007292:	68fb      	ldr	r3, [r7, #12]
 8007294:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 8007298:	2b00      	cmp	r3, #0
 800729a:	d10b      	bne.n	80072b4 <vQueueAddToRegistry+0x34>
			{
				/* Store the information on this queue. */
				xQueueRegistry[ ux ].pcQueueName = pcQueueName;
 800729c:	490b      	ldr	r1, [pc, #44]	; (80072cc <vQueueAddToRegistry+0x4c>)
 800729e:	68fb      	ldr	r3, [r7, #12]
 80072a0:	683a      	ldr	r2, [r7, #0]
 80072a2:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
				xQueueRegistry[ ux ].xHandle = xQueue;
 80072a6:	4a09      	ldr	r2, [pc, #36]	; (80072cc <vQueueAddToRegistry+0x4c>)
 80072a8:	68fb      	ldr	r3, [r7, #12]
 80072aa:	00db      	lsls	r3, r3, #3
 80072ac:	4413      	add	r3, r2
 80072ae:	687a      	ldr	r2, [r7, #4]
 80072b0:	605a      	str	r2, [r3, #4]

				traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
				break;
 80072b2:	e006      	b.n	80072c2 <vQueueAddToRegistry+0x42>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 80072b4:	68fb      	ldr	r3, [r7, #12]
 80072b6:	3301      	adds	r3, #1
 80072b8:	60fb      	str	r3, [r7, #12]
 80072ba:	68fb      	ldr	r3, [r7, #12]
 80072bc:	2b07      	cmp	r3, #7
 80072be:	d9e7      	bls.n	8007290 <vQueueAddToRegistry+0x10>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 80072c0:	bf00      	nop
 80072c2:	bf00      	nop
 80072c4:	3714      	adds	r7, #20
 80072c6:	46bd      	mov	sp, r7
 80072c8:	bc80      	pop	{r7}
 80072ca:	4770      	bx	lr
 80072cc:	20000988 	.word	0x20000988

080072d0 <vQueueUnregisterQueue>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueUnregisterQueue( QueueHandle_t xQueue )
	{
 80072d0:	b480      	push	{r7}
 80072d2:	b085      	sub	sp, #20
 80072d4:	af00      	add	r7, sp, #0
 80072d6:	6078      	str	r0, [r7, #4]
	UBaseType_t ux;

		/* See if the handle of the queue being unregistered in actually in the
		registry. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 80072d8:	2300      	movs	r3, #0
 80072da:	60fb      	str	r3, [r7, #12]
 80072dc:	e016      	b.n	800730c <vQueueUnregisterQueue+0x3c>
		{
			if( xQueueRegistry[ ux ].xHandle == xQueue )
 80072de:	4a10      	ldr	r2, [pc, #64]	; (8007320 <vQueueUnregisterQueue+0x50>)
 80072e0:	68fb      	ldr	r3, [r7, #12]
 80072e2:	00db      	lsls	r3, r3, #3
 80072e4:	4413      	add	r3, r2
 80072e6:	685b      	ldr	r3, [r3, #4]
 80072e8:	687a      	ldr	r2, [r7, #4]
 80072ea:	429a      	cmp	r2, r3
 80072ec:	d10b      	bne.n	8007306 <vQueueUnregisterQueue+0x36>
			{
				/* Set the name to NULL to show that this slot if free again. */
				xQueueRegistry[ ux ].pcQueueName = NULL;
 80072ee:	4a0c      	ldr	r2, [pc, #48]	; (8007320 <vQueueUnregisterQueue+0x50>)
 80072f0:	68fb      	ldr	r3, [r7, #12]
 80072f2:	2100      	movs	r1, #0
 80072f4:	f842 1033 	str.w	r1, [r2, r3, lsl #3]

				/* Set the handle to NULL to ensure the same queue handle cannot
				appear in the registry twice if it is added, removed, then
				added again. */
				xQueueRegistry[ ux ].xHandle = ( QueueHandle_t ) 0;
 80072f8:	4a09      	ldr	r2, [pc, #36]	; (8007320 <vQueueUnregisterQueue+0x50>)
 80072fa:	68fb      	ldr	r3, [r7, #12]
 80072fc:	00db      	lsls	r3, r3, #3
 80072fe:	4413      	add	r3, r2
 8007300:	2200      	movs	r2, #0
 8007302:	605a      	str	r2, [r3, #4]
				break;
 8007304:	e006      	b.n	8007314 <vQueueUnregisterQueue+0x44>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8007306:	68fb      	ldr	r3, [r7, #12]
 8007308:	3301      	adds	r3, #1
 800730a:	60fb      	str	r3, [r7, #12]
 800730c:	68fb      	ldr	r3, [r7, #12]
 800730e:	2b07      	cmp	r3, #7
 8007310:	d9e5      	bls.n	80072de <vQueueUnregisterQueue+0xe>
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

	} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
 8007312:	bf00      	nop
 8007314:	bf00      	nop
 8007316:	3714      	adds	r7, #20
 8007318:	46bd      	mov	sp, r7
 800731a:	bc80      	pop	{r7}
 800731c:	4770      	bx	lr
 800731e:	bf00      	nop
 8007320:	20000988 	.word	0x20000988

08007324 <vQueueWaitForMessageRestricted>:
/*-----------------------------------------------------------*/

#if ( configUSE_TIMERS == 1 )

	void vQueueWaitForMessageRestricted( QueueHandle_t xQueue, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 8007324:	b580      	push	{r7, lr}
 8007326:	b086      	sub	sp, #24
 8007328:	af00      	add	r7, sp, #0
 800732a:	60f8      	str	r0, [r7, #12]
 800732c:	60b9      	str	r1, [r7, #8]
 800732e:	607a      	str	r2, [r7, #4]
	Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 8007330:	68fb      	ldr	r3, [r7, #12]
 8007332:	617b      	str	r3, [r7, #20]
		will not actually cause the task to block, just place it on a blocked
		list.  It will not block until the scheduler is unlocked - at which
		time a yield will be performed.  If an item is added to the queue while
		the queue is locked, and the calling task blocks on the queue, then the
		calling task will be immediately unblocked when the queue is unlocked. */
		prvLockQueue( pxQueue );
 8007334:	f001 fe4a 	bl	8008fcc <vPortEnterCritical>
 8007338:	697b      	ldr	r3, [r7, #20]
 800733a:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800733e:	b25b      	sxtb	r3, r3
 8007340:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007344:	d103      	bne.n	800734e <vQueueWaitForMessageRestricted+0x2a>
 8007346:	697b      	ldr	r3, [r7, #20]
 8007348:	2200      	movs	r2, #0
 800734a:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800734e:	697b      	ldr	r3, [r7, #20]
 8007350:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8007354:	b25b      	sxtb	r3, r3
 8007356:	f1b3 3fff 	cmp.w	r3, #4294967295
 800735a:	d103      	bne.n	8007364 <vQueueWaitForMessageRestricted+0x40>
 800735c:	697b      	ldr	r3, [r7, #20]
 800735e:	2200      	movs	r2, #0
 8007360:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8007364:	f001 fe62 	bl	800902c <vPortExitCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 8007368:	697b      	ldr	r3, [r7, #20]
 800736a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800736c:	2b00      	cmp	r3, #0
 800736e:	d106      	bne.n	800737e <vQueueWaitForMessageRestricted+0x5a>
		{
			/* There is nothing in the queue, block for the specified period. */
			vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 8007370:	697b      	ldr	r3, [r7, #20]
 8007372:	3324      	adds	r3, #36	; 0x24
 8007374:	687a      	ldr	r2, [r7, #4]
 8007376:	68b9      	ldr	r1, [r7, #8]
 8007378:	4618      	mov	r0, r3
 800737a:	f000 fc43 	bl	8007c04 <vTaskPlaceOnEventListRestricted>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		prvUnlockQueue( pxQueue );
 800737e:	6978      	ldr	r0, [r7, #20]
 8007380:	f7ff fefe 	bl	8007180 <prvUnlockQueue>
	}
 8007384:	bf00      	nop
 8007386:	3718      	adds	r7, #24
 8007388:	46bd      	mov	sp, r7
 800738a:	bd80      	pop	{r7, pc}

0800738c <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 800738c:	b580      	push	{r7, lr}
 800738e:	b08e      	sub	sp, #56	; 0x38
 8007390:	af04      	add	r7, sp, #16
 8007392:	60f8      	str	r0, [r7, #12]
 8007394:	60b9      	str	r1, [r7, #8]
 8007396:	607a      	str	r2, [r7, #4]
 8007398:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 800739a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800739c:	2b00      	cmp	r3, #0
 800739e:	d10a      	bne.n	80073b6 <xTaskCreateStatic+0x2a>
	__asm volatile
 80073a0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80073a4:	f383 8811 	msr	BASEPRI, r3
 80073a8:	f3bf 8f6f 	isb	sy
 80073ac:	f3bf 8f4f 	dsb	sy
 80073b0:	623b      	str	r3, [r7, #32]
}
 80073b2:	bf00      	nop
 80073b4:	e7fe      	b.n	80073b4 <xTaskCreateStatic+0x28>
		configASSERT( pxTaskBuffer != NULL );
 80073b6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80073b8:	2b00      	cmp	r3, #0
 80073ba:	d10a      	bne.n	80073d2 <xTaskCreateStatic+0x46>
	__asm volatile
 80073bc:	f04f 0350 	mov.w	r3, #80	; 0x50
 80073c0:	f383 8811 	msr	BASEPRI, r3
 80073c4:	f3bf 8f6f 	isb	sy
 80073c8:	f3bf 8f4f 	dsb	sy
 80073cc:	61fb      	str	r3, [r7, #28]
}
 80073ce:	bf00      	nop
 80073d0:	e7fe      	b.n	80073d0 <xTaskCreateStatic+0x44>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 80073d2:	235c      	movs	r3, #92	; 0x5c
 80073d4:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 80073d6:	693b      	ldr	r3, [r7, #16]
 80073d8:	2b5c      	cmp	r3, #92	; 0x5c
 80073da:	d00a      	beq.n	80073f2 <xTaskCreateStatic+0x66>
	__asm volatile
 80073dc:	f04f 0350 	mov.w	r3, #80	; 0x50
 80073e0:	f383 8811 	msr	BASEPRI, r3
 80073e4:	f3bf 8f6f 	isb	sy
 80073e8:	f3bf 8f4f 	dsb	sy
 80073ec:	61bb      	str	r3, [r7, #24]
}
 80073ee:	bf00      	nop
 80073f0:	e7fe      	b.n	80073f0 <xTaskCreateStatic+0x64>
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 80073f2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80073f4:	2b00      	cmp	r3, #0
 80073f6:	d01e      	beq.n	8007436 <xTaskCreateStatic+0xaa>
 80073f8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80073fa:	2b00      	cmp	r3, #0
 80073fc:	d01b      	beq.n	8007436 <xTaskCreateStatic+0xaa>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 80073fe:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007400:	627b      	str	r3, [r7, #36]	; 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 8007402:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007404:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8007406:	631a      	str	r2, [r3, #48]	; 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 8007408:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800740a:	2202      	movs	r2, #2
 800740c:	f883 2059 	strb.w	r2, [r3, #89]	; 0x59
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 8007410:	2300      	movs	r3, #0
 8007412:	9303      	str	r3, [sp, #12]
 8007414:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007416:	9302      	str	r3, [sp, #8]
 8007418:	f107 0314 	add.w	r3, r7, #20
 800741c:	9301      	str	r3, [sp, #4]
 800741e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007420:	9300      	str	r3, [sp, #0]
 8007422:	683b      	ldr	r3, [r7, #0]
 8007424:	687a      	ldr	r2, [r7, #4]
 8007426:	68b9      	ldr	r1, [r7, #8]
 8007428:	68f8      	ldr	r0, [r7, #12]
 800742a:	f000 f850 	bl	80074ce <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 800742e:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8007430:	f000 f8d4 	bl	80075dc <prvAddNewTaskToReadyList>
 8007434:	e001      	b.n	800743a <xTaskCreateStatic+0xae>
		}
		else
		{
			xReturn = NULL;
 8007436:	2300      	movs	r3, #0
 8007438:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 800743a:	697b      	ldr	r3, [r7, #20]
	}
 800743c:	4618      	mov	r0, r3
 800743e:	3728      	adds	r7, #40	; 0x28
 8007440:	46bd      	mov	sp, r7
 8007442:	bd80      	pop	{r7, pc}

08007444 <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 8007444:	b580      	push	{r7, lr}
 8007446:	b08c      	sub	sp, #48	; 0x30
 8007448:	af04      	add	r7, sp, #16
 800744a:	60f8      	str	r0, [r7, #12]
 800744c:	60b9      	str	r1, [r7, #8]
 800744e:	603b      	str	r3, [r7, #0]
 8007450:	4613      	mov	r3, r2
 8007452:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = ( StackType_t * ) pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8007454:	88fb      	ldrh	r3, [r7, #6]
 8007456:	009b      	lsls	r3, r3, #2
 8007458:	4618      	mov	r0, r3
 800745a:	f001 feb7 	bl	80091cc <pvPortMalloc>
 800745e:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 8007460:	697b      	ldr	r3, [r7, #20]
 8007462:	2b00      	cmp	r3, #0
 8007464:	d00e      	beq.n	8007484 <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e961 MISRA exception as the casts are only redundant for some paths. */
 8007466:	205c      	movs	r0, #92	; 0x5c
 8007468:	f001 feb0 	bl	80091cc <pvPortMalloc>
 800746c:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 800746e:	69fb      	ldr	r3, [r7, #28]
 8007470:	2b00      	cmp	r3, #0
 8007472:	d003      	beq.n	800747c <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 8007474:	69fb      	ldr	r3, [r7, #28]
 8007476:	697a      	ldr	r2, [r7, #20]
 8007478:	631a      	str	r2, [r3, #48]	; 0x30
 800747a:	e005      	b.n	8007488 <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 800747c:	6978      	ldr	r0, [r7, #20]
 800747e:	f001 ff69 	bl	8009354 <vPortFree>
 8007482:	e001      	b.n	8007488 <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 8007484:	2300      	movs	r3, #0
 8007486:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 8007488:	69fb      	ldr	r3, [r7, #28]
 800748a:	2b00      	cmp	r3, #0
 800748c:	d017      	beq.n	80074be <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 800748e:	69fb      	ldr	r3, [r7, #28]
 8007490:	2200      	movs	r2, #0
 8007492:	f883 2059 	strb.w	r2, [r3, #89]	; 0x59
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 8007496:	88fa      	ldrh	r2, [r7, #6]
 8007498:	2300      	movs	r3, #0
 800749a:	9303      	str	r3, [sp, #12]
 800749c:	69fb      	ldr	r3, [r7, #28]
 800749e:	9302      	str	r3, [sp, #8]
 80074a0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80074a2:	9301      	str	r3, [sp, #4]
 80074a4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80074a6:	9300      	str	r3, [sp, #0]
 80074a8:	683b      	ldr	r3, [r7, #0]
 80074aa:	68b9      	ldr	r1, [r7, #8]
 80074ac:	68f8      	ldr	r0, [r7, #12]
 80074ae:	f000 f80e 	bl	80074ce <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 80074b2:	69f8      	ldr	r0, [r7, #28]
 80074b4:	f000 f892 	bl	80075dc <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 80074b8:	2301      	movs	r3, #1
 80074ba:	61bb      	str	r3, [r7, #24]
 80074bc:	e002      	b.n	80074c4 <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 80074be:	f04f 33ff 	mov.w	r3, #4294967295
 80074c2:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 80074c4:	69bb      	ldr	r3, [r7, #24]
	}
 80074c6:	4618      	mov	r0, r3
 80074c8:	3720      	adds	r7, #32
 80074ca:	46bd      	mov	sp, r7
 80074cc:	bd80      	pop	{r7, pc}

080074ce <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 80074ce:	b580      	push	{r7, lr}
 80074d0:	b088      	sub	sp, #32
 80074d2:	af00      	add	r7, sp, #0
 80074d4:	60f8      	str	r0, [r7, #12]
 80074d6:	60b9      	str	r1, [r7, #8]
 80074d8:	607a      	str	r2, [r7, #4]
 80074da:	603b      	str	r3, [r7, #0]

	/* Avoid dependency on memset() if it is not required. */
	#if( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
	{
		/* Fill the stack with a known value to assist debugging. */
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 80074dc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80074de:	6b18      	ldr	r0, [r3, #48]	; 0x30
 80074e0:	687b      	ldr	r3, [r7, #4]
 80074e2:	009b      	lsls	r3, r3, #2
 80074e4:	461a      	mov	r2, r3
 80074e6:	21a5      	movs	r1, #165	; 0xa5
 80074e8:	f002 f87a 	bl	80095e0 <memset>
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
 80074ec:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80074ee:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80074f0:	687b      	ldr	r3, [r7, #4]
 80074f2:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 80074f6:	3b01      	subs	r3, #1
 80074f8:	009b      	lsls	r3, r3, #2
 80074fa:	4413      	add	r3, r2
 80074fc:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type. */
 80074fe:	69bb      	ldr	r3, [r7, #24]
 8007500:	f023 0307 	bic.w	r3, r3, #7
 8007504:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 8007506:	69bb      	ldr	r3, [r7, #24]
 8007508:	f003 0307 	and.w	r3, r3, #7
 800750c:	2b00      	cmp	r3, #0
 800750e:	d00a      	beq.n	8007526 <prvInitialiseNewTask+0x58>
	__asm volatile
 8007510:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007514:	f383 8811 	msr	BASEPRI, r3
 8007518:	f3bf 8f6f 	isb	sy
 800751c:	f3bf 8f4f 	dsb	sy
 8007520:	617b      	str	r3, [r7, #20]
}
 8007522:	bf00      	nop
 8007524:	e7fe      	b.n	8007524 <prvInitialiseNewTask+0x56>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8007526:	2300      	movs	r3, #0
 8007528:	61fb      	str	r3, [r7, #28]
 800752a:	e012      	b.n	8007552 <prvInitialiseNewTask+0x84>
	{
		pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 800752c:	68ba      	ldr	r2, [r7, #8]
 800752e:	69fb      	ldr	r3, [r7, #28]
 8007530:	4413      	add	r3, r2
 8007532:	7819      	ldrb	r1, [r3, #0]
 8007534:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8007536:	69fb      	ldr	r3, [r7, #28]
 8007538:	4413      	add	r3, r2
 800753a:	3334      	adds	r3, #52	; 0x34
 800753c:	460a      	mov	r2, r1
 800753e:	701a      	strb	r2, [r3, #0]

		/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
		configMAX_TASK_NAME_LEN characters just in case the memory after the
		string is not accessible (extremely unlikely). */
		if( pcName[ x ] == 0x00 )
 8007540:	68ba      	ldr	r2, [r7, #8]
 8007542:	69fb      	ldr	r3, [r7, #28]
 8007544:	4413      	add	r3, r2
 8007546:	781b      	ldrb	r3, [r3, #0]
 8007548:	2b00      	cmp	r3, #0
 800754a:	d006      	beq.n	800755a <prvInitialiseNewTask+0x8c>
	for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 800754c:	69fb      	ldr	r3, [r7, #28]
 800754e:	3301      	adds	r3, #1
 8007550:	61fb      	str	r3, [r7, #28]
 8007552:	69fb      	ldr	r3, [r7, #28]
 8007554:	2b0f      	cmp	r3, #15
 8007556:	d9e9      	bls.n	800752c <prvInitialiseNewTask+0x5e>
 8007558:	e000      	b.n	800755c <prvInitialiseNewTask+0x8e>
		{
			break;
 800755a:	bf00      	nop
		}
	}

	/* Ensure the name string is terminated in the case that the string length
	was greater or equal to configMAX_TASK_NAME_LEN. */
	pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 800755c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800755e:	2200      	movs	r2, #0
 8007560:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 8007564:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007566:	2b37      	cmp	r3, #55	; 0x37
 8007568:	d901      	bls.n	800756e <prvInitialiseNewTask+0xa0>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 800756a:	2337      	movs	r3, #55	; 0x37
 800756c:	62bb      	str	r3, [r7, #40]	; 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 800756e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007570:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8007572:	62da      	str	r2, [r3, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 8007574:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007576:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8007578:	64da      	str	r2, [r3, #76]	; 0x4c
		pxNewTCB->uxMutexesHeld = 0;
 800757a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800757c:	2200      	movs	r2, #0
 800757e:	651a      	str	r2, [r3, #80]	; 0x50
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 8007580:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007582:	3304      	adds	r3, #4
 8007584:	4618      	mov	r0, r3
 8007586:	f7fe ff74 	bl	8006472 <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 800758a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800758c:	3318      	adds	r3, #24
 800758e:	4618      	mov	r0, r3
 8007590:	f7fe ff6f 	bl	8006472 <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 8007594:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007596:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8007598:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800759a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800759c:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 80075a0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80075a2:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 80075a4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80075a6:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80075a8:	625a      	str	r2, [r3, #36]	; 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 80075aa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80075ac:	2200      	movs	r2, #0
 80075ae:	655a      	str	r2, [r3, #84]	; 0x54
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 80075b0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80075b2:	2200      	movs	r2, #0
 80075b4:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58
	{
		pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters, xRunPrivileged );
	}
	#else /* portUSING_MPU_WRAPPERS */
	{
		pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 80075b8:	683a      	ldr	r2, [r7, #0]
 80075ba:	68f9      	ldr	r1, [r7, #12]
 80075bc:	69b8      	ldr	r0, [r7, #24]
 80075be:	f001 fc13 	bl	8008de8 <pxPortInitialiseStack>
 80075c2:	4602      	mov	r2, r0
 80075c4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80075c6:	601a      	str	r2, [r3, #0]
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( ( void * ) pxCreatedTask != NULL )
 80075c8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80075ca:	2b00      	cmp	r3, #0
 80075cc:	d002      	beq.n	80075d4 <prvInitialiseNewTask+0x106>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 80075ce:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80075d0:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80075d2:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 80075d4:	bf00      	nop
 80075d6:	3720      	adds	r7, #32
 80075d8:	46bd      	mov	sp, r7
 80075da:	bd80      	pop	{r7, pc}

080075dc <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 80075dc:	b580      	push	{r7, lr}
 80075de:	b082      	sub	sp, #8
 80075e0:	af00      	add	r7, sp, #0
 80075e2:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 80075e4:	f001 fcf2 	bl	8008fcc <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 80075e8:	4b2d      	ldr	r3, [pc, #180]	; (80076a0 <prvAddNewTaskToReadyList+0xc4>)
 80075ea:	681b      	ldr	r3, [r3, #0]
 80075ec:	3301      	adds	r3, #1
 80075ee:	4a2c      	ldr	r2, [pc, #176]	; (80076a0 <prvAddNewTaskToReadyList+0xc4>)
 80075f0:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 80075f2:	4b2c      	ldr	r3, [pc, #176]	; (80076a4 <prvAddNewTaskToReadyList+0xc8>)
 80075f4:	681b      	ldr	r3, [r3, #0]
 80075f6:	2b00      	cmp	r3, #0
 80075f8:	d109      	bne.n	800760e <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 80075fa:	4a2a      	ldr	r2, [pc, #168]	; (80076a4 <prvAddNewTaskToReadyList+0xc8>)
 80075fc:	687b      	ldr	r3, [r7, #4]
 80075fe:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 8007600:	4b27      	ldr	r3, [pc, #156]	; (80076a0 <prvAddNewTaskToReadyList+0xc4>)
 8007602:	681b      	ldr	r3, [r3, #0]
 8007604:	2b01      	cmp	r3, #1
 8007606:	d110      	bne.n	800762a <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 8007608:	f000 fc28 	bl	8007e5c <prvInitialiseTaskLists>
 800760c:	e00d      	b.n	800762a <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 800760e:	4b26      	ldr	r3, [pc, #152]	; (80076a8 <prvAddNewTaskToReadyList+0xcc>)
 8007610:	681b      	ldr	r3, [r3, #0]
 8007612:	2b00      	cmp	r3, #0
 8007614:	d109      	bne.n	800762a <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 8007616:	4b23      	ldr	r3, [pc, #140]	; (80076a4 <prvAddNewTaskToReadyList+0xc8>)
 8007618:	681b      	ldr	r3, [r3, #0]
 800761a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800761c:	687b      	ldr	r3, [r7, #4]
 800761e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007620:	429a      	cmp	r2, r3
 8007622:	d802      	bhi.n	800762a <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 8007624:	4a1f      	ldr	r2, [pc, #124]	; (80076a4 <prvAddNewTaskToReadyList+0xc8>)
 8007626:	687b      	ldr	r3, [r7, #4]
 8007628:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 800762a:	4b20      	ldr	r3, [pc, #128]	; (80076ac <prvAddNewTaskToReadyList+0xd0>)
 800762c:	681b      	ldr	r3, [r3, #0]
 800762e:	3301      	adds	r3, #1
 8007630:	4a1e      	ldr	r2, [pc, #120]	; (80076ac <prvAddNewTaskToReadyList+0xd0>)
 8007632:	6013      	str	r3, [r2, #0]

		#if ( configUSE_TRACE_FACILITY == 1 )
		{
			/* Add a counter into the TCB for tracing only. */
			pxNewTCB->uxTCBNumber = uxTaskNumber;
 8007634:	4b1d      	ldr	r3, [pc, #116]	; (80076ac <prvAddNewTaskToReadyList+0xd0>)
 8007636:	681a      	ldr	r2, [r3, #0]
 8007638:	687b      	ldr	r3, [r7, #4]
 800763a:	645a      	str	r2, [r3, #68]	; 0x44
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 800763c:	687b      	ldr	r3, [r7, #4]
 800763e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007640:	4b1b      	ldr	r3, [pc, #108]	; (80076b0 <prvAddNewTaskToReadyList+0xd4>)
 8007642:	681b      	ldr	r3, [r3, #0]
 8007644:	429a      	cmp	r2, r3
 8007646:	d903      	bls.n	8007650 <prvAddNewTaskToReadyList+0x74>
 8007648:	687b      	ldr	r3, [r7, #4]
 800764a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800764c:	4a18      	ldr	r2, [pc, #96]	; (80076b0 <prvAddNewTaskToReadyList+0xd4>)
 800764e:	6013      	str	r3, [r2, #0]
 8007650:	687b      	ldr	r3, [r7, #4]
 8007652:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007654:	4613      	mov	r3, r2
 8007656:	009b      	lsls	r3, r3, #2
 8007658:	4413      	add	r3, r2
 800765a:	009b      	lsls	r3, r3, #2
 800765c:	4a15      	ldr	r2, [pc, #84]	; (80076b4 <prvAddNewTaskToReadyList+0xd8>)
 800765e:	441a      	add	r2, r3
 8007660:	687b      	ldr	r3, [r7, #4]
 8007662:	3304      	adds	r3, #4
 8007664:	4619      	mov	r1, r3
 8007666:	4610      	mov	r0, r2
 8007668:	f7fe ff0f 	bl	800648a <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 800766c:	f001 fcde 	bl	800902c <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 8007670:	4b0d      	ldr	r3, [pc, #52]	; (80076a8 <prvAddNewTaskToReadyList+0xcc>)
 8007672:	681b      	ldr	r3, [r3, #0]
 8007674:	2b00      	cmp	r3, #0
 8007676:	d00e      	beq.n	8007696 <prvAddNewTaskToReadyList+0xba>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 8007678:	4b0a      	ldr	r3, [pc, #40]	; (80076a4 <prvAddNewTaskToReadyList+0xc8>)
 800767a:	681b      	ldr	r3, [r3, #0]
 800767c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800767e:	687b      	ldr	r3, [r7, #4]
 8007680:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007682:	429a      	cmp	r2, r3
 8007684:	d207      	bcs.n	8007696 <prvAddNewTaskToReadyList+0xba>
		{
			taskYIELD_IF_USING_PREEMPTION();
 8007686:	4b0c      	ldr	r3, [pc, #48]	; (80076b8 <prvAddNewTaskToReadyList+0xdc>)
 8007688:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800768c:	601a      	str	r2, [r3, #0]
 800768e:	f3bf 8f4f 	dsb	sy
 8007692:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8007696:	bf00      	nop
 8007698:	3708      	adds	r7, #8
 800769a:	46bd      	mov	sp, r7
 800769c:	bd80      	pop	{r7, pc}
 800769e:	bf00      	nop
 80076a0:	20000e9c 	.word	0x20000e9c
 80076a4:	200009c8 	.word	0x200009c8
 80076a8:	20000ea8 	.word	0x20000ea8
 80076ac:	20000eb8 	.word	0x20000eb8
 80076b0:	20000ea4 	.word	0x20000ea4
 80076b4:	200009cc 	.word	0x200009cc
 80076b8:	e000ed04 	.word	0xe000ed04

080076bc <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 80076bc:	b580      	push	{r7, lr}
 80076be:	b084      	sub	sp, #16
 80076c0:	af00      	add	r7, sp, #0
 80076c2:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 80076c4:	2300      	movs	r3, #0
 80076c6:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 80076c8:	687b      	ldr	r3, [r7, #4]
 80076ca:	2b00      	cmp	r3, #0
 80076cc:	d017      	beq.n	80076fe <vTaskDelay+0x42>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 80076ce:	4b13      	ldr	r3, [pc, #76]	; (800771c <vTaskDelay+0x60>)
 80076d0:	681b      	ldr	r3, [r3, #0]
 80076d2:	2b00      	cmp	r3, #0
 80076d4:	d00a      	beq.n	80076ec <vTaskDelay+0x30>
	__asm volatile
 80076d6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80076da:	f383 8811 	msr	BASEPRI, r3
 80076de:	f3bf 8f6f 	isb	sy
 80076e2:	f3bf 8f4f 	dsb	sy
 80076e6:	60bb      	str	r3, [r7, #8]
}
 80076e8:	bf00      	nop
 80076ea:	e7fe      	b.n	80076ea <vTaskDelay+0x2e>
			vTaskSuspendAll();
 80076ec:	f000 f880 	bl	80077f0 <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 80076f0:	2100      	movs	r1, #0
 80076f2:	6878      	ldr	r0, [r7, #4]
 80076f4:	f000 ffbe 	bl	8008674 <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 80076f8:	f000 f888 	bl	800780c <xTaskResumeAll>
 80076fc:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 80076fe:	68fb      	ldr	r3, [r7, #12]
 8007700:	2b00      	cmp	r3, #0
 8007702:	d107      	bne.n	8007714 <vTaskDelay+0x58>
		{
			portYIELD_WITHIN_API();
 8007704:	4b06      	ldr	r3, [pc, #24]	; (8007720 <vTaskDelay+0x64>)
 8007706:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800770a:	601a      	str	r2, [r3, #0]
 800770c:	f3bf 8f4f 	dsb	sy
 8007710:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 8007714:	bf00      	nop
 8007716:	3710      	adds	r7, #16
 8007718:	46bd      	mov	sp, r7
 800771a:	bd80      	pop	{r7, pc}
 800771c:	20000ec4 	.word	0x20000ec4
 8007720:	e000ed04 	.word	0xe000ed04

08007724 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 8007724:	b580      	push	{r7, lr}
 8007726:	b08a      	sub	sp, #40	; 0x28
 8007728:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 800772a:	2300      	movs	r3, #0
 800772c:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 800772e:	2300      	movs	r3, #0
 8007730:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 8007732:	463a      	mov	r2, r7
 8007734:	1d39      	adds	r1, r7, #4
 8007736:	f107 0308 	add.w	r3, r7, #8
 800773a:	4618      	mov	r0, r3
 800773c:	f7fe fe48 	bl	80063d0 <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 8007740:	6839      	ldr	r1, [r7, #0]
 8007742:	687b      	ldr	r3, [r7, #4]
 8007744:	68ba      	ldr	r2, [r7, #8]
 8007746:	9202      	str	r2, [sp, #8]
 8007748:	9301      	str	r3, [sp, #4]
 800774a:	2300      	movs	r3, #0
 800774c:	9300      	str	r3, [sp, #0]
 800774e:	2300      	movs	r3, #0
 8007750:	460a      	mov	r2, r1
 8007752:	4921      	ldr	r1, [pc, #132]	; (80077d8 <vTaskStartScheduler+0xb4>)
 8007754:	4821      	ldr	r0, [pc, #132]	; (80077dc <vTaskStartScheduler+0xb8>)
 8007756:	f7ff fe19 	bl	800738c <xTaskCreateStatic>
 800775a:	4603      	mov	r3, r0
 800775c:	4a20      	ldr	r2, [pc, #128]	; (80077e0 <vTaskStartScheduler+0xbc>)
 800775e:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												( tskIDLE_PRIORITY | portPRIVILEGE_BIT ),
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 8007760:	4b1f      	ldr	r3, [pc, #124]	; (80077e0 <vTaskStartScheduler+0xbc>)
 8007762:	681b      	ldr	r3, [r3, #0]
 8007764:	2b00      	cmp	r3, #0
 8007766:	d002      	beq.n	800776e <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 8007768:	2301      	movs	r3, #1
 800776a:	617b      	str	r3, [r7, #20]
 800776c:	e001      	b.n	8007772 <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 800776e:	2300      	movs	r3, #0
 8007770:	617b      	str	r3, [r7, #20]
	}
	#endif /* configSUPPORT_STATIC_ALLOCATION */

	#if ( configUSE_TIMERS == 1 )
	{
		if( xReturn == pdPASS )
 8007772:	697b      	ldr	r3, [r7, #20]
 8007774:	2b01      	cmp	r3, #1
 8007776:	d102      	bne.n	800777e <vTaskStartScheduler+0x5a>
		{
			xReturn = xTimerCreateTimerTask();
 8007778:	f000 ffd0 	bl	800871c <xTimerCreateTimerTask>
 800777c:	6178      	str	r0, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 800777e:	697b      	ldr	r3, [r7, #20]
 8007780:	2b01      	cmp	r3, #1
 8007782:	d116      	bne.n	80077b2 <vTaskStartScheduler+0x8e>
	__asm volatile
 8007784:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007788:	f383 8811 	msr	BASEPRI, r3
 800778c:	f3bf 8f6f 	isb	sy
 8007790:	f3bf 8f4f 	dsb	sy
 8007794:	613b      	str	r3, [r7, #16]
}
 8007796:	bf00      	nop
			structure specific to the task that will run first. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 8007798:	4b12      	ldr	r3, [pc, #72]	; (80077e4 <vTaskStartScheduler+0xc0>)
 800779a:	f04f 32ff 	mov.w	r2, #4294967295
 800779e:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 80077a0:	4b11      	ldr	r3, [pc, #68]	; (80077e8 <vTaskStartScheduler+0xc4>)
 80077a2:	2201      	movs	r2, #1
 80077a4:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) 0U;
 80077a6:	4b11      	ldr	r3, [pc, #68]	; (80077ec <vTaskStartScheduler+0xc8>)
 80077a8:	2200      	movs	r2, #0
 80077aa:	601a      	str	r2, [r3, #0]
		FreeRTOSConfig.h file. */
		portCONFIGURE_TIMER_FOR_RUN_TIME_STATS();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 80077ac:	f001 fb9c 	bl	8008ee8 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 80077b0:	e00e      	b.n	80077d0 <vTaskStartScheduler+0xac>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 80077b2:	697b      	ldr	r3, [r7, #20]
 80077b4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80077b8:	d10a      	bne.n	80077d0 <vTaskStartScheduler+0xac>
	__asm volatile
 80077ba:	f04f 0350 	mov.w	r3, #80	; 0x50
 80077be:	f383 8811 	msr	BASEPRI, r3
 80077c2:	f3bf 8f6f 	isb	sy
 80077c6:	f3bf 8f4f 	dsb	sy
 80077ca:	60fb      	str	r3, [r7, #12]
}
 80077cc:	bf00      	nop
 80077ce:	e7fe      	b.n	80077ce <vTaskStartScheduler+0xaa>
}
 80077d0:	bf00      	nop
 80077d2:	3718      	adds	r7, #24
 80077d4:	46bd      	mov	sp, r7
 80077d6:	bd80      	pop	{r7, pc}
 80077d8:	08009684 	.word	0x08009684
 80077dc:	08007e2d 	.word	0x08007e2d
 80077e0:	20000ec0 	.word	0x20000ec0
 80077e4:	20000ebc 	.word	0x20000ebc
 80077e8:	20000ea8 	.word	0x20000ea8
 80077ec:	20000ea0 	.word	0x20000ea0

080077f0 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 80077f0:	b480      	push	{r7}
 80077f2:	af00      	add	r7, sp, #0
	/* A critical section is not required as the variable is of type
	BaseType_t.  Please read Richard Barry's reply in the following link to a
	post in the FreeRTOS support forum before reporting this as a bug! -
	http://goo.gl/wu4acr */
	++uxSchedulerSuspended;
 80077f4:	4b04      	ldr	r3, [pc, #16]	; (8007808 <vTaskSuspendAll+0x18>)
 80077f6:	681b      	ldr	r3, [r3, #0]
 80077f8:	3301      	adds	r3, #1
 80077fa:	4a03      	ldr	r2, [pc, #12]	; (8007808 <vTaskSuspendAll+0x18>)
 80077fc:	6013      	str	r3, [r2, #0]
}
 80077fe:	bf00      	nop
 8007800:	46bd      	mov	sp, r7
 8007802:	bc80      	pop	{r7}
 8007804:	4770      	bx	lr
 8007806:	bf00      	nop
 8007808:	20000ec4 	.word	0x20000ec4

0800780c <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 800780c:	b580      	push	{r7, lr}
 800780e:	b084      	sub	sp, #16
 8007810:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 8007812:	2300      	movs	r3, #0
 8007814:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 8007816:	2300      	movs	r3, #0
 8007818:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 800781a:	4b42      	ldr	r3, [pc, #264]	; (8007924 <xTaskResumeAll+0x118>)
 800781c:	681b      	ldr	r3, [r3, #0]
 800781e:	2b00      	cmp	r3, #0
 8007820:	d10a      	bne.n	8007838 <xTaskResumeAll+0x2c>
	__asm volatile
 8007822:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007826:	f383 8811 	msr	BASEPRI, r3
 800782a:	f3bf 8f6f 	isb	sy
 800782e:	f3bf 8f4f 	dsb	sy
 8007832:	603b      	str	r3, [r7, #0]
}
 8007834:	bf00      	nop
 8007836:	e7fe      	b.n	8007836 <xTaskResumeAll+0x2a>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 8007838:	f001 fbc8 	bl	8008fcc <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 800783c:	4b39      	ldr	r3, [pc, #228]	; (8007924 <xTaskResumeAll+0x118>)
 800783e:	681b      	ldr	r3, [r3, #0]
 8007840:	3b01      	subs	r3, #1
 8007842:	4a38      	ldr	r2, [pc, #224]	; (8007924 <xTaskResumeAll+0x118>)
 8007844:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8007846:	4b37      	ldr	r3, [pc, #220]	; (8007924 <xTaskResumeAll+0x118>)
 8007848:	681b      	ldr	r3, [r3, #0]
 800784a:	2b00      	cmp	r3, #0
 800784c:	d162      	bne.n	8007914 <xTaskResumeAll+0x108>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 800784e:	4b36      	ldr	r3, [pc, #216]	; (8007928 <xTaskResumeAll+0x11c>)
 8007850:	681b      	ldr	r3, [r3, #0]
 8007852:	2b00      	cmp	r3, #0
 8007854:	d05e      	beq.n	8007914 <xTaskResumeAll+0x108>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8007856:	e02f      	b.n	80078b8 <xTaskResumeAll+0xac>
				{
					pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) );
 8007858:	4b34      	ldr	r3, [pc, #208]	; (800792c <xTaskResumeAll+0x120>)
 800785a:	68db      	ldr	r3, [r3, #12]
 800785c:	68db      	ldr	r3, [r3, #12]
 800785e:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8007860:	68fb      	ldr	r3, [r7, #12]
 8007862:	3318      	adds	r3, #24
 8007864:	4618      	mov	r0, r3
 8007866:	f7fe fe6b 	bl	8006540 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800786a:	68fb      	ldr	r3, [r7, #12]
 800786c:	3304      	adds	r3, #4
 800786e:	4618      	mov	r0, r3
 8007870:	f7fe fe66 	bl	8006540 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 8007874:	68fb      	ldr	r3, [r7, #12]
 8007876:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007878:	4b2d      	ldr	r3, [pc, #180]	; (8007930 <xTaskResumeAll+0x124>)
 800787a:	681b      	ldr	r3, [r3, #0]
 800787c:	429a      	cmp	r2, r3
 800787e:	d903      	bls.n	8007888 <xTaskResumeAll+0x7c>
 8007880:	68fb      	ldr	r3, [r7, #12]
 8007882:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007884:	4a2a      	ldr	r2, [pc, #168]	; (8007930 <xTaskResumeAll+0x124>)
 8007886:	6013      	str	r3, [r2, #0]
 8007888:	68fb      	ldr	r3, [r7, #12]
 800788a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800788c:	4613      	mov	r3, r2
 800788e:	009b      	lsls	r3, r3, #2
 8007890:	4413      	add	r3, r2
 8007892:	009b      	lsls	r3, r3, #2
 8007894:	4a27      	ldr	r2, [pc, #156]	; (8007934 <xTaskResumeAll+0x128>)
 8007896:	441a      	add	r2, r3
 8007898:	68fb      	ldr	r3, [r7, #12]
 800789a:	3304      	adds	r3, #4
 800789c:	4619      	mov	r1, r3
 800789e:	4610      	mov	r0, r2
 80078a0:	f7fe fdf3 	bl	800648a <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 80078a4:	68fb      	ldr	r3, [r7, #12]
 80078a6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80078a8:	4b23      	ldr	r3, [pc, #140]	; (8007938 <xTaskResumeAll+0x12c>)
 80078aa:	681b      	ldr	r3, [r3, #0]
 80078ac:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80078ae:	429a      	cmp	r2, r3
 80078b0:	d302      	bcc.n	80078b8 <xTaskResumeAll+0xac>
					{
						xYieldPending = pdTRUE;
 80078b2:	4b22      	ldr	r3, [pc, #136]	; (800793c <xTaskResumeAll+0x130>)
 80078b4:	2201      	movs	r2, #1
 80078b6:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 80078b8:	4b1c      	ldr	r3, [pc, #112]	; (800792c <xTaskResumeAll+0x120>)
 80078ba:	681b      	ldr	r3, [r3, #0]
 80078bc:	2b00      	cmp	r3, #0
 80078be:	d1cb      	bne.n	8007858 <xTaskResumeAll+0x4c>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 80078c0:	68fb      	ldr	r3, [r7, #12]
 80078c2:	2b00      	cmp	r3, #0
 80078c4:	d001      	beq.n	80078ca <xTaskResumeAll+0xbe>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 80078c6:	f000 fb67 	bl	8007f98 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					UBaseType_t uxPendedCounts = uxPendedTicks; /* Non-volatile copy. */
 80078ca:	4b1d      	ldr	r3, [pc, #116]	; (8007940 <xTaskResumeAll+0x134>)
 80078cc:	681b      	ldr	r3, [r3, #0]
 80078ce:	607b      	str	r3, [r7, #4]

					if( uxPendedCounts > ( UBaseType_t ) 0U )
 80078d0:	687b      	ldr	r3, [r7, #4]
 80078d2:	2b00      	cmp	r3, #0
 80078d4:	d010      	beq.n	80078f8 <xTaskResumeAll+0xec>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 80078d6:	f000 f857 	bl	8007988 <xTaskIncrementTick>
 80078da:	4603      	mov	r3, r0
 80078dc:	2b00      	cmp	r3, #0
 80078de:	d002      	beq.n	80078e6 <xTaskResumeAll+0xda>
							{
								xYieldPending = pdTRUE;
 80078e0:	4b16      	ldr	r3, [pc, #88]	; (800793c <xTaskResumeAll+0x130>)
 80078e2:	2201      	movs	r2, #1
 80078e4:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--uxPendedCounts;
 80078e6:	687b      	ldr	r3, [r7, #4]
 80078e8:	3b01      	subs	r3, #1
 80078ea:	607b      	str	r3, [r7, #4]
						} while( uxPendedCounts > ( UBaseType_t ) 0U );
 80078ec:	687b      	ldr	r3, [r7, #4]
 80078ee:	2b00      	cmp	r3, #0
 80078f0:	d1f1      	bne.n	80078d6 <xTaskResumeAll+0xca>

						uxPendedTicks = 0;
 80078f2:	4b13      	ldr	r3, [pc, #76]	; (8007940 <xTaskResumeAll+0x134>)
 80078f4:	2200      	movs	r2, #0
 80078f6:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 80078f8:	4b10      	ldr	r3, [pc, #64]	; (800793c <xTaskResumeAll+0x130>)
 80078fa:	681b      	ldr	r3, [r3, #0]
 80078fc:	2b00      	cmp	r3, #0
 80078fe:	d009      	beq.n	8007914 <xTaskResumeAll+0x108>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 8007900:	2301      	movs	r3, #1
 8007902:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 8007904:	4b0f      	ldr	r3, [pc, #60]	; (8007944 <xTaskResumeAll+0x138>)
 8007906:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800790a:	601a      	str	r2, [r3, #0]
 800790c:	f3bf 8f4f 	dsb	sy
 8007910:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8007914:	f001 fb8a 	bl	800902c <vPortExitCritical>

	return xAlreadyYielded;
 8007918:	68bb      	ldr	r3, [r7, #8]
}
 800791a:	4618      	mov	r0, r3
 800791c:	3710      	adds	r7, #16
 800791e:	46bd      	mov	sp, r7
 8007920:	bd80      	pop	{r7, pc}
 8007922:	bf00      	nop
 8007924:	20000ec4 	.word	0x20000ec4
 8007928:	20000e9c 	.word	0x20000e9c
 800792c:	20000e5c 	.word	0x20000e5c
 8007930:	20000ea4 	.word	0x20000ea4
 8007934:	200009cc 	.word	0x200009cc
 8007938:	200009c8 	.word	0x200009c8
 800793c:	20000eb0 	.word	0x20000eb0
 8007940:	20000eac 	.word	0x20000eac
 8007944:	e000ed04 	.word	0xe000ed04

08007948 <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 8007948:	b480      	push	{r7}
 800794a:	b083      	sub	sp, #12
 800794c:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
 800794e:	4b04      	ldr	r3, [pc, #16]	; (8007960 <xTaskGetTickCount+0x18>)
 8007950:	681b      	ldr	r3, [r3, #0]
 8007952:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
 8007954:	687b      	ldr	r3, [r7, #4]
}
 8007956:	4618      	mov	r0, r3
 8007958:	370c      	adds	r7, #12
 800795a:	46bd      	mov	sp, r7
 800795c:	bc80      	pop	{r7}
 800795e:	4770      	bx	lr
 8007960:	20000ea0 	.word	0x20000ea0

08007964 <xTaskGetTickCountFromISR>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCountFromISR( void )
{
 8007964:	b580      	push	{r7, lr}
 8007966:	b082      	sub	sp, #8
 8007968:	af00      	add	r7, sp, #0
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 800796a:	f001 fbf1 	bl	8009150 <vPortValidateInterruptPriority>

	uxSavedInterruptStatus = portTICK_TYPE_SET_INTERRUPT_MASK_FROM_ISR();
 800796e:	2300      	movs	r3, #0
 8007970:	607b      	str	r3, [r7, #4]
	{
		xReturn = xTickCount;
 8007972:	4b04      	ldr	r3, [pc, #16]	; (8007984 <xTaskGetTickCountFromISR+0x20>)
 8007974:	681b      	ldr	r3, [r3, #0]
 8007976:	603b      	str	r3, [r7, #0]
	}
	portTICK_TYPE_CLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 8007978:	683b      	ldr	r3, [r7, #0]
}
 800797a:	4618      	mov	r0, r3
 800797c:	3708      	adds	r7, #8
 800797e:	46bd      	mov	sp, r7
 8007980:	bd80      	pop	{r7, pc}
 8007982:	bf00      	nop
 8007984:	20000ea0 	.word	0x20000ea0

08007988 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 8007988:	b580      	push	{r7, lr}
 800798a:	b086      	sub	sp, #24
 800798c:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 800798e:	2300      	movs	r3, #0
 8007990:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8007992:	4b51      	ldr	r3, [pc, #324]	; (8007ad8 <xTaskIncrementTick+0x150>)
 8007994:	681b      	ldr	r3, [r3, #0]
 8007996:	2b00      	cmp	r3, #0
 8007998:	f040 808e 	bne.w	8007ab8 <xTaskIncrementTick+0x130>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 800799c:	4b4f      	ldr	r3, [pc, #316]	; (8007adc <xTaskIncrementTick+0x154>)
 800799e:	681b      	ldr	r3, [r3, #0]
 80079a0:	3301      	adds	r3, #1
 80079a2:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 80079a4:	4a4d      	ldr	r2, [pc, #308]	; (8007adc <xTaskIncrementTick+0x154>)
 80079a6:	693b      	ldr	r3, [r7, #16]
 80079a8:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 80079aa:	693b      	ldr	r3, [r7, #16]
 80079ac:	2b00      	cmp	r3, #0
 80079ae:	d120      	bne.n	80079f2 <xTaskIncrementTick+0x6a>
		{
			taskSWITCH_DELAYED_LISTS();
 80079b0:	4b4b      	ldr	r3, [pc, #300]	; (8007ae0 <xTaskIncrementTick+0x158>)
 80079b2:	681b      	ldr	r3, [r3, #0]
 80079b4:	681b      	ldr	r3, [r3, #0]
 80079b6:	2b00      	cmp	r3, #0
 80079b8:	d00a      	beq.n	80079d0 <xTaskIncrementTick+0x48>
	__asm volatile
 80079ba:	f04f 0350 	mov.w	r3, #80	; 0x50
 80079be:	f383 8811 	msr	BASEPRI, r3
 80079c2:	f3bf 8f6f 	isb	sy
 80079c6:	f3bf 8f4f 	dsb	sy
 80079ca:	603b      	str	r3, [r7, #0]
}
 80079cc:	bf00      	nop
 80079ce:	e7fe      	b.n	80079ce <xTaskIncrementTick+0x46>
 80079d0:	4b43      	ldr	r3, [pc, #268]	; (8007ae0 <xTaskIncrementTick+0x158>)
 80079d2:	681b      	ldr	r3, [r3, #0]
 80079d4:	60fb      	str	r3, [r7, #12]
 80079d6:	4b43      	ldr	r3, [pc, #268]	; (8007ae4 <xTaskIncrementTick+0x15c>)
 80079d8:	681b      	ldr	r3, [r3, #0]
 80079da:	4a41      	ldr	r2, [pc, #260]	; (8007ae0 <xTaskIncrementTick+0x158>)
 80079dc:	6013      	str	r3, [r2, #0]
 80079de:	4a41      	ldr	r2, [pc, #260]	; (8007ae4 <xTaskIncrementTick+0x15c>)
 80079e0:	68fb      	ldr	r3, [r7, #12]
 80079e2:	6013      	str	r3, [r2, #0]
 80079e4:	4b40      	ldr	r3, [pc, #256]	; (8007ae8 <xTaskIncrementTick+0x160>)
 80079e6:	681b      	ldr	r3, [r3, #0]
 80079e8:	3301      	adds	r3, #1
 80079ea:	4a3f      	ldr	r2, [pc, #252]	; (8007ae8 <xTaskIncrementTick+0x160>)
 80079ec:	6013      	str	r3, [r2, #0]
 80079ee:	f000 fad3 	bl	8007f98 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 80079f2:	4b3e      	ldr	r3, [pc, #248]	; (8007aec <xTaskIncrementTick+0x164>)
 80079f4:	681b      	ldr	r3, [r3, #0]
 80079f6:	693a      	ldr	r2, [r7, #16]
 80079f8:	429a      	cmp	r2, r3
 80079fa:	d34e      	bcc.n	8007a9a <xTaskIncrementTick+0x112>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 80079fc:	4b38      	ldr	r3, [pc, #224]	; (8007ae0 <xTaskIncrementTick+0x158>)
 80079fe:	681b      	ldr	r3, [r3, #0]
 8007a00:	681b      	ldr	r3, [r3, #0]
 8007a02:	2b00      	cmp	r3, #0
 8007a04:	d101      	bne.n	8007a0a <xTaskIncrementTick+0x82>
 8007a06:	2301      	movs	r3, #1
 8007a08:	e000      	b.n	8007a0c <xTaskIncrementTick+0x84>
 8007a0a:	2300      	movs	r3, #0
 8007a0c:	2b00      	cmp	r3, #0
 8007a0e:	d004      	beq.n	8007a1a <xTaskIncrementTick+0x92>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8007a10:	4b36      	ldr	r3, [pc, #216]	; (8007aec <xTaskIncrementTick+0x164>)
 8007a12:	f04f 32ff 	mov.w	r2, #4294967295
 8007a16:	601a      	str	r2, [r3, #0]
					break;
 8007a18:	e03f      	b.n	8007a9a <xTaskIncrementTick+0x112>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
 8007a1a:	4b31      	ldr	r3, [pc, #196]	; (8007ae0 <xTaskIncrementTick+0x158>)
 8007a1c:	681b      	ldr	r3, [r3, #0]
 8007a1e:	68db      	ldr	r3, [r3, #12]
 8007a20:	68db      	ldr	r3, [r3, #12]
 8007a22:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 8007a24:	68bb      	ldr	r3, [r7, #8]
 8007a26:	685b      	ldr	r3, [r3, #4]
 8007a28:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 8007a2a:	693a      	ldr	r2, [r7, #16]
 8007a2c:	687b      	ldr	r3, [r7, #4]
 8007a2e:	429a      	cmp	r2, r3
 8007a30:	d203      	bcs.n	8007a3a <xTaskIncrementTick+0xb2>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 8007a32:	4a2e      	ldr	r2, [pc, #184]	; (8007aec <xTaskIncrementTick+0x164>)
 8007a34:	687b      	ldr	r3, [r7, #4]
 8007a36:	6013      	str	r3, [r2, #0]
						break;
 8007a38:	e02f      	b.n	8007a9a <xTaskIncrementTick+0x112>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8007a3a:	68bb      	ldr	r3, [r7, #8]
 8007a3c:	3304      	adds	r3, #4
 8007a3e:	4618      	mov	r0, r3
 8007a40:	f7fe fd7e 	bl	8006540 <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 8007a44:	68bb      	ldr	r3, [r7, #8]
 8007a46:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007a48:	2b00      	cmp	r3, #0
 8007a4a:	d004      	beq.n	8007a56 <xTaskIncrementTick+0xce>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8007a4c:	68bb      	ldr	r3, [r7, #8]
 8007a4e:	3318      	adds	r3, #24
 8007a50:	4618      	mov	r0, r3
 8007a52:	f7fe fd75 	bl	8006540 <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 8007a56:	68bb      	ldr	r3, [r7, #8]
 8007a58:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007a5a:	4b25      	ldr	r3, [pc, #148]	; (8007af0 <xTaskIncrementTick+0x168>)
 8007a5c:	681b      	ldr	r3, [r3, #0]
 8007a5e:	429a      	cmp	r2, r3
 8007a60:	d903      	bls.n	8007a6a <xTaskIncrementTick+0xe2>
 8007a62:	68bb      	ldr	r3, [r7, #8]
 8007a64:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007a66:	4a22      	ldr	r2, [pc, #136]	; (8007af0 <xTaskIncrementTick+0x168>)
 8007a68:	6013      	str	r3, [r2, #0]
 8007a6a:	68bb      	ldr	r3, [r7, #8]
 8007a6c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007a6e:	4613      	mov	r3, r2
 8007a70:	009b      	lsls	r3, r3, #2
 8007a72:	4413      	add	r3, r2
 8007a74:	009b      	lsls	r3, r3, #2
 8007a76:	4a1f      	ldr	r2, [pc, #124]	; (8007af4 <xTaskIncrementTick+0x16c>)
 8007a78:	441a      	add	r2, r3
 8007a7a:	68bb      	ldr	r3, [r7, #8]
 8007a7c:	3304      	adds	r3, #4
 8007a7e:	4619      	mov	r1, r3
 8007a80:	4610      	mov	r0, r2
 8007a82:	f7fe fd02 	bl	800648a <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8007a86:	68bb      	ldr	r3, [r7, #8]
 8007a88:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007a8a:	4b1b      	ldr	r3, [pc, #108]	; (8007af8 <xTaskIncrementTick+0x170>)
 8007a8c:	681b      	ldr	r3, [r3, #0]
 8007a8e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007a90:	429a      	cmp	r2, r3
 8007a92:	d3b3      	bcc.n	80079fc <xTaskIncrementTick+0x74>
						{
							xSwitchRequired = pdTRUE;
 8007a94:	2301      	movs	r3, #1
 8007a96:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8007a98:	e7b0      	b.n	80079fc <xTaskIncrementTick+0x74>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 8007a9a:	4b17      	ldr	r3, [pc, #92]	; (8007af8 <xTaskIncrementTick+0x170>)
 8007a9c:	681b      	ldr	r3, [r3, #0]
 8007a9e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007aa0:	4914      	ldr	r1, [pc, #80]	; (8007af4 <xTaskIncrementTick+0x16c>)
 8007aa2:	4613      	mov	r3, r2
 8007aa4:	009b      	lsls	r3, r3, #2
 8007aa6:	4413      	add	r3, r2
 8007aa8:	009b      	lsls	r3, r3, #2
 8007aaa:	440b      	add	r3, r1
 8007aac:	681b      	ldr	r3, [r3, #0]
 8007aae:	2b01      	cmp	r3, #1
 8007ab0:	d907      	bls.n	8007ac2 <xTaskIncrementTick+0x13a>
			{
				xSwitchRequired = pdTRUE;
 8007ab2:	2301      	movs	r3, #1
 8007ab4:	617b      	str	r3, [r7, #20]
 8007ab6:	e004      	b.n	8007ac2 <xTaskIncrementTick+0x13a>
		}
		#endif /* configUSE_TICK_HOOK */
	}
	else
	{
		++uxPendedTicks;
 8007ab8:	4b10      	ldr	r3, [pc, #64]	; (8007afc <xTaskIncrementTick+0x174>)
 8007aba:	681b      	ldr	r3, [r3, #0]
 8007abc:	3301      	adds	r3, #1
 8007abe:	4a0f      	ldr	r2, [pc, #60]	; (8007afc <xTaskIncrementTick+0x174>)
 8007ac0:	6013      	str	r3, [r2, #0]
		#endif
	}

	#if ( configUSE_PREEMPTION == 1 )
	{
		if( xYieldPending != pdFALSE )
 8007ac2:	4b0f      	ldr	r3, [pc, #60]	; (8007b00 <xTaskIncrementTick+0x178>)
 8007ac4:	681b      	ldr	r3, [r3, #0]
 8007ac6:	2b00      	cmp	r3, #0
 8007ac8:	d001      	beq.n	8007ace <xTaskIncrementTick+0x146>
		{
			xSwitchRequired = pdTRUE;
 8007aca:	2301      	movs	r3, #1
 8007acc:	617b      	str	r3, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_PREEMPTION */

	return xSwitchRequired;
 8007ace:	697b      	ldr	r3, [r7, #20]
}
 8007ad0:	4618      	mov	r0, r3
 8007ad2:	3718      	adds	r7, #24
 8007ad4:	46bd      	mov	sp, r7
 8007ad6:	bd80      	pop	{r7, pc}
 8007ad8:	20000ec4 	.word	0x20000ec4
 8007adc:	20000ea0 	.word	0x20000ea0
 8007ae0:	20000e54 	.word	0x20000e54
 8007ae4:	20000e58 	.word	0x20000e58
 8007ae8:	20000eb4 	.word	0x20000eb4
 8007aec:	20000ebc 	.word	0x20000ebc
 8007af0:	20000ea4 	.word	0x20000ea4
 8007af4:	200009cc 	.word	0x200009cc
 8007af8:	200009c8 	.word	0x200009c8
 8007afc:	20000eac 	.word	0x20000eac
 8007b00:	20000eb0 	.word	0x20000eb0

08007b04 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 8007b04:	b480      	push	{r7}
 8007b06:	b085      	sub	sp, #20
 8007b08:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 8007b0a:	4b27      	ldr	r3, [pc, #156]	; (8007ba8 <vTaskSwitchContext+0xa4>)
 8007b0c:	681b      	ldr	r3, [r3, #0]
 8007b0e:	2b00      	cmp	r3, #0
 8007b10:	d003      	beq.n	8007b1a <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 8007b12:	4b26      	ldr	r3, [pc, #152]	; (8007bac <vTaskSwitchContext+0xa8>)
 8007b14:	2201      	movs	r2, #1
 8007b16:	601a      	str	r2, [r3, #0]
			structure specific to this task. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 8007b18:	e041      	b.n	8007b9e <vTaskSwitchContext+0x9a>
		xYieldPending = pdFALSE;
 8007b1a:	4b24      	ldr	r3, [pc, #144]	; (8007bac <vTaskSwitchContext+0xa8>)
 8007b1c:	2200      	movs	r2, #0
 8007b1e:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK();
 8007b20:	4b23      	ldr	r3, [pc, #140]	; (8007bb0 <vTaskSwitchContext+0xac>)
 8007b22:	681b      	ldr	r3, [r3, #0]
 8007b24:	60fb      	str	r3, [r7, #12]
 8007b26:	e010      	b.n	8007b4a <vTaskSwitchContext+0x46>
 8007b28:	68fb      	ldr	r3, [r7, #12]
 8007b2a:	2b00      	cmp	r3, #0
 8007b2c:	d10a      	bne.n	8007b44 <vTaskSwitchContext+0x40>
	__asm volatile
 8007b2e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007b32:	f383 8811 	msr	BASEPRI, r3
 8007b36:	f3bf 8f6f 	isb	sy
 8007b3a:	f3bf 8f4f 	dsb	sy
 8007b3e:	607b      	str	r3, [r7, #4]
}
 8007b40:	bf00      	nop
 8007b42:	e7fe      	b.n	8007b42 <vTaskSwitchContext+0x3e>
 8007b44:	68fb      	ldr	r3, [r7, #12]
 8007b46:	3b01      	subs	r3, #1
 8007b48:	60fb      	str	r3, [r7, #12]
 8007b4a:	491a      	ldr	r1, [pc, #104]	; (8007bb4 <vTaskSwitchContext+0xb0>)
 8007b4c:	68fa      	ldr	r2, [r7, #12]
 8007b4e:	4613      	mov	r3, r2
 8007b50:	009b      	lsls	r3, r3, #2
 8007b52:	4413      	add	r3, r2
 8007b54:	009b      	lsls	r3, r3, #2
 8007b56:	440b      	add	r3, r1
 8007b58:	681b      	ldr	r3, [r3, #0]
 8007b5a:	2b00      	cmp	r3, #0
 8007b5c:	d0e4      	beq.n	8007b28 <vTaskSwitchContext+0x24>
 8007b5e:	68fa      	ldr	r2, [r7, #12]
 8007b60:	4613      	mov	r3, r2
 8007b62:	009b      	lsls	r3, r3, #2
 8007b64:	4413      	add	r3, r2
 8007b66:	009b      	lsls	r3, r3, #2
 8007b68:	4a12      	ldr	r2, [pc, #72]	; (8007bb4 <vTaskSwitchContext+0xb0>)
 8007b6a:	4413      	add	r3, r2
 8007b6c:	60bb      	str	r3, [r7, #8]
 8007b6e:	68bb      	ldr	r3, [r7, #8]
 8007b70:	685b      	ldr	r3, [r3, #4]
 8007b72:	685a      	ldr	r2, [r3, #4]
 8007b74:	68bb      	ldr	r3, [r7, #8]
 8007b76:	605a      	str	r2, [r3, #4]
 8007b78:	68bb      	ldr	r3, [r7, #8]
 8007b7a:	685a      	ldr	r2, [r3, #4]
 8007b7c:	68bb      	ldr	r3, [r7, #8]
 8007b7e:	3308      	adds	r3, #8
 8007b80:	429a      	cmp	r2, r3
 8007b82:	d104      	bne.n	8007b8e <vTaskSwitchContext+0x8a>
 8007b84:	68bb      	ldr	r3, [r7, #8]
 8007b86:	685b      	ldr	r3, [r3, #4]
 8007b88:	685a      	ldr	r2, [r3, #4]
 8007b8a:	68bb      	ldr	r3, [r7, #8]
 8007b8c:	605a      	str	r2, [r3, #4]
 8007b8e:	68bb      	ldr	r3, [r7, #8]
 8007b90:	685b      	ldr	r3, [r3, #4]
 8007b92:	68db      	ldr	r3, [r3, #12]
 8007b94:	4a08      	ldr	r2, [pc, #32]	; (8007bb8 <vTaskSwitchContext+0xb4>)
 8007b96:	6013      	str	r3, [r2, #0]
 8007b98:	4a05      	ldr	r2, [pc, #20]	; (8007bb0 <vTaskSwitchContext+0xac>)
 8007b9a:	68fb      	ldr	r3, [r7, #12]
 8007b9c:	6013      	str	r3, [r2, #0]
}
 8007b9e:	bf00      	nop
 8007ba0:	3714      	adds	r7, #20
 8007ba2:	46bd      	mov	sp, r7
 8007ba4:	bc80      	pop	{r7}
 8007ba6:	4770      	bx	lr
 8007ba8:	20000ec4 	.word	0x20000ec4
 8007bac:	20000eb0 	.word	0x20000eb0
 8007bb0:	20000ea4 	.word	0x20000ea4
 8007bb4:	200009cc 	.word	0x200009cc
 8007bb8:	200009c8 	.word	0x200009c8

08007bbc <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 8007bbc:	b580      	push	{r7, lr}
 8007bbe:	b084      	sub	sp, #16
 8007bc0:	af00      	add	r7, sp, #0
 8007bc2:	6078      	str	r0, [r7, #4]
 8007bc4:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 8007bc6:	687b      	ldr	r3, [r7, #4]
 8007bc8:	2b00      	cmp	r3, #0
 8007bca:	d10a      	bne.n	8007be2 <vTaskPlaceOnEventList+0x26>
	__asm volatile
 8007bcc:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007bd0:	f383 8811 	msr	BASEPRI, r3
 8007bd4:	f3bf 8f6f 	isb	sy
 8007bd8:	f3bf 8f4f 	dsb	sy
 8007bdc:	60fb      	str	r3, [r7, #12]
}
 8007bde:	bf00      	nop
 8007be0:	e7fe      	b.n	8007be0 <vTaskPlaceOnEventList+0x24>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8007be2:	4b07      	ldr	r3, [pc, #28]	; (8007c00 <vTaskPlaceOnEventList+0x44>)
 8007be4:	681b      	ldr	r3, [r3, #0]
 8007be6:	3318      	adds	r3, #24
 8007be8:	4619      	mov	r1, r3
 8007bea:	6878      	ldr	r0, [r7, #4]
 8007bec:	f7fe fc70 	bl	80064d0 <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 8007bf0:	2101      	movs	r1, #1
 8007bf2:	6838      	ldr	r0, [r7, #0]
 8007bf4:	f000 fd3e 	bl	8008674 <prvAddCurrentTaskToDelayedList>
}
 8007bf8:	bf00      	nop
 8007bfa:	3710      	adds	r7, #16
 8007bfc:	46bd      	mov	sp, r7
 8007bfe:	bd80      	pop	{r7, pc}
 8007c00:	200009c8 	.word	0x200009c8

08007c04 <vTaskPlaceOnEventListRestricted>:
/*-----------------------------------------------------------*/

#if( configUSE_TIMERS == 1 )

	void vTaskPlaceOnEventListRestricted( List_t * const pxEventList, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 8007c04:	b580      	push	{r7, lr}
 8007c06:	b086      	sub	sp, #24
 8007c08:	af00      	add	r7, sp, #0
 8007c0a:	60f8      	str	r0, [r7, #12]
 8007c0c:	60b9      	str	r1, [r7, #8]
 8007c0e:	607a      	str	r2, [r7, #4]
		configASSERT( pxEventList );
 8007c10:	68fb      	ldr	r3, [r7, #12]
 8007c12:	2b00      	cmp	r3, #0
 8007c14:	d10a      	bne.n	8007c2c <vTaskPlaceOnEventListRestricted+0x28>
	__asm volatile
 8007c16:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007c1a:	f383 8811 	msr	BASEPRI, r3
 8007c1e:	f3bf 8f6f 	isb	sy
 8007c22:	f3bf 8f4f 	dsb	sy
 8007c26:	617b      	str	r3, [r7, #20]
}
 8007c28:	bf00      	nop
 8007c2a:	e7fe      	b.n	8007c2a <vTaskPlaceOnEventListRestricted+0x26>

		/* Place the event list item of the TCB in the appropriate event list.
		In this case it is assume that this is the only task that is going to
		be waiting on this event list, so the faster vListInsertEnd() function
		can be used in place of vListInsert. */
		vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8007c2c:	4b0a      	ldr	r3, [pc, #40]	; (8007c58 <vTaskPlaceOnEventListRestricted+0x54>)
 8007c2e:	681b      	ldr	r3, [r3, #0]
 8007c30:	3318      	adds	r3, #24
 8007c32:	4619      	mov	r1, r3
 8007c34:	68f8      	ldr	r0, [r7, #12]
 8007c36:	f7fe fc28 	bl	800648a <vListInsertEnd>

		/* If the task should block indefinitely then set the block time to a
		value that will be recognised as an indefinite delay inside the
		prvAddCurrentTaskToDelayedList() function. */
		if( xWaitIndefinitely != pdFALSE )
 8007c3a:	687b      	ldr	r3, [r7, #4]
 8007c3c:	2b00      	cmp	r3, #0
 8007c3e:	d002      	beq.n	8007c46 <vTaskPlaceOnEventListRestricted+0x42>
		{
			xTicksToWait = portMAX_DELAY;
 8007c40:	f04f 33ff 	mov.w	r3, #4294967295
 8007c44:	60bb      	str	r3, [r7, #8]
		}

		traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
		prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 8007c46:	6879      	ldr	r1, [r7, #4]
 8007c48:	68b8      	ldr	r0, [r7, #8]
 8007c4a:	f000 fd13 	bl	8008674 <prvAddCurrentTaskToDelayedList>
	}
 8007c4e:	bf00      	nop
 8007c50:	3718      	adds	r7, #24
 8007c52:	46bd      	mov	sp, r7
 8007c54:	bd80      	pop	{r7, pc}
 8007c56:	bf00      	nop
 8007c58:	200009c8 	.word	0x200009c8

08007c5c <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 8007c5c:	b580      	push	{r7, lr}
 8007c5e:	b086      	sub	sp, #24
 8007c60:	af00      	add	r7, sp, #0
 8007c62:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxEventList );
 8007c64:	687b      	ldr	r3, [r7, #4]
 8007c66:	68db      	ldr	r3, [r3, #12]
 8007c68:	68db      	ldr	r3, [r3, #12]
 8007c6a:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 8007c6c:	693b      	ldr	r3, [r7, #16]
 8007c6e:	2b00      	cmp	r3, #0
 8007c70:	d10a      	bne.n	8007c88 <xTaskRemoveFromEventList+0x2c>
	__asm volatile
 8007c72:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007c76:	f383 8811 	msr	BASEPRI, r3
 8007c7a:	f3bf 8f6f 	isb	sy
 8007c7e:	f3bf 8f4f 	dsb	sy
 8007c82:	60fb      	str	r3, [r7, #12]
}
 8007c84:	bf00      	nop
 8007c86:	e7fe      	b.n	8007c86 <xTaskRemoveFromEventList+0x2a>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 8007c88:	693b      	ldr	r3, [r7, #16]
 8007c8a:	3318      	adds	r3, #24
 8007c8c:	4618      	mov	r0, r3
 8007c8e:	f7fe fc57 	bl	8006540 <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8007c92:	4b1e      	ldr	r3, [pc, #120]	; (8007d0c <xTaskRemoveFromEventList+0xb0>)
 8007c94:	681b      	ldr	r3, [r3, #0]
 8007c96:	2b00      	cmp	r3, #0
 8007c98:	d11d      	bne.n	8007cd6 <xTaskRemoveFromEventList+0x7a>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 8007c9a:	693b      	ldr	r3, [r7, #16]
 8007c9c:	3304      	adds	r3, #4
 8007c9e:	4618      	mov	r0, r3
 8007ca0:	f7fe fc4e 	bl	8006540 <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 8007ca4:	693b      	ldr	r3, [r7, #16]
 8007ca6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007ca8:	4b19      	ldr	r3, [pc, #100]	; (8007d10 <xTaskRemoveFromEventList+0xb4>)
 8007caa:	681b      	ldr	r3, [r3, #0]
 8007cac:	429a      	cmp	r2, r3
 8007cae:	d903      	bls.n	8007cb8 <xTaskRemoveFromEventList+0x5c>
 8007cb0:	693b      	ldr	r3, [r7, #16]
 8007cb2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007cb4:	4a16      	ldr	r2, [pc, #88]	; (8007d10 <xTaskRemoveFromEventList+0xb4>)
 8007cb6:	6013      	str	r3, [r2, #0]
 8007cb8:	693b      	ldr	r3, [r7, #16]
 8007cba:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007cbc:	4613      	mov	r3, r2
 8007cbe:	009b      	lsls	r3, r3, #2
 8007cc0:	4413      	add	r3, r2
 8007cc2:	009b      	lsls	r3, r3, #2
 8007cc4:	4a13      	ldr	r2, [pc, #76]	; (8007d14 <xTaskRemoveFromEventList+0xb8>)
 8007cc6:	441a      	add	r2, r3
 8007cc8:	693b      	ldr	r3, [r7, #16]
 8007cca:	3304      	adds	r3, #4
 8007ccc:	4619      	mov	r1, r3
 8007cce:	4610      	mov	r0, r2
 8007cd0:	f7fe fbdb 	bl	800648a <vListInsertEnd>
 8007cd4:	e005      	b.n	8007ce2 <xTaskRemoveFromEventList+0x86>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 8007cd6:	693b      	ldr	r3, [r7, #16]
 8007cd8:	3318      	adds	r3, #24
 8007cda:	4619      	mov	r1, r3
 8007cdc:	480e      	ldr	r0, [pc, #56]	; (8007d18 <xTaskRemoveFromEventList+0xbc>)
 8007cde:	f7fe fbd4 	bl	800648a <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 8007ce2:	693b      	ldr	r3, [r7, #16]
 8007ce4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007ce6:	4b0d      	ldr	r3, [pc, #52]	; (8007d1c <xTaskRemoveFromEventList+0xc0>)
 8007ce8:	681b      	ldr	r3, [r3, #0]
 8007cea:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007cec:	429a      	cmp	r2, r3
 8007cee:	d905      	bls.n	8007cfc <xTaskRemoveFromEventList+0xa0>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 8007cf0:	2301      	movs	r3, #1
 8007cf2:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 8007cf4:	4b0a      	ldr	r3, [pc, #40]	; (8007d20 <xTaskRemoveFromEventList+0xc4>)
 8007cf6:	2201      	movs	r2, #1
 8007cf8:	601a      	str	r2, [r3, #0]
 8007cfa:	e001      	b.n	8007d00 <xTaskRemoveFromEventList+0xa4>
	}
	else
	{
		xReturn = pdFALSE;
 8007cfc:	2300      	movs	r3, #0
 8007cfe:	617b      	str	r3, [r7, #20]
		ensure it is updated at the earliest possible time. */
		prvResetNextTaskUnblockTime();
	}
	#endif

	return xReturn;
 8007d00:	697b      	ldr	r3, [r7, #20]
}
 8007d02:	4618      	mov	r0, r3
 8007d04:	3718      	adds	r7, #24
 8007d06:	46bd      	mov	sp, r7
 8007d08:	bd80      	pop	{r7, pc}
 8007d0a:	bf00      	nop
 8007d0c:	20000ec4 	.word	0x20000ec4
 8007d10:	20000ea4 	.word	0x20000ea4
 8007d14:	200009cc 	.word	0x200009cc
 8007d18:	20000e5c 	.word	0x20000e5c
 8007d1c:	200009c8 	.word	0x200009c8
 8007d20:	20000eb0 	.word	0x20000eb0

08007d24 <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 8007d24:	b480      	push	{r7}
 8007d26:	b083      	sub	sp, #12
 8007d28:	af00      	add	r7, sp, #0
 8007d2a:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 8007d2c:	4b06      	ldr	r3, [pc, #24]	; (8007d48 <vTaskInternalSetTimeOutState+0x24>)
 8007d2e:	681a      	ldr	r2, [r3, #0]
 8007d30:	687b      	ldr	r3, [r7, #4]
 8007d32:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 8007d34:	4b05      	ldr	r3, [pc, #20]	; (8007d4c <vTaskInternalSetTimeOutState+0x28>)
 8007d36:	681a      	ldr	r2, [r3, #0]
 8007d38:	687b      	ldr	r3, [r7, #4]
 8007d3a:	605a      	str	r2, [r3, #4]
}
 8007d3c:	bf00      	nop
 8007d3e:	370c      	adds	r7, #12
 8007d40:	46bd      	mov	sp, r7
 8007d42:	bc80      	pop	{r7}
 8007d44:	4770      	bx	lr
 8007d46:	bf00      	nop
 8007d48:	20000eb4 	.word	0x20000eb4
 8007d4c:	20000ea0 	.word	0x20000ea0

08007d50 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 8007d50:	b580      	push	{r7, lr}
 8007d52:	b088      	sub	sp, #32
 8007d54:	af00      	add	r7, sp, #0
 8007d56:	6078      	str	r0, [r7, #4]
 8007d58:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 8007d5a:	687b      	ldr	r3, [r7, #4]
 8007d5c:	2b00      	cmp	r3, #0
 8007d5e:	d10a      	bne.n	8007d76 <xTaskCheckForTimeOut+0x26>
	__asm volatile
 8007d60:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007d64:	f383 8811 	msr	BASEPRI, r3
 8007d68:	f3bf 8f6f 	isb	sy
 8007d6c:	f3bf 8f4f 	dsb	sy
 8007d70:	613b      	str	r3, [r7, #16]
}
 8007d72:	bf00      	nop
 8007d74:	e7fe      	b.n	8007d74 <xTaskCheckForTimeOut+0x24>
	configASSERT( pxTicksToWait );
 8007d76:	683b      	ldr	r3, [r7, #0]
 8007d78:	2b00      	cmp	r3, #0
 8007d7a:	d10a      	bne.n	8007d92 <xTaskCheckForTimeOut+0x42>
	__asm volatile
 8007d7c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007d80:	f383 8811 	msr	BASEPRI, r3
 8007d84:	f3bf 8f6f 	isb	sy
 8007d88:	f3bf 8f4f 	dsb	sy
 8007d8c:	60fb      	str	r3, [r7, #12]
}
 8007d8e:	bf00      	nop
 8007d90:	e7fe      	b.n	8007d90 <xTaskCheckForTimeOut+0x40>

	taskENTER_CRITICAL();
 8007d92:	f001 f91b 	bl	8008fcc <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 8007d96:	4b1d      	ldr	r3, [pc, #116]	; (8007e0c <xTaskCheckForTimeOut+0xbc>)
 8007d98:	681b      	ldr	r3, [r3, #0]
 8007d9a:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 8007d9c:	687b      	ldr	r3, [r7, #4]
 8007d9e:	685b      	ldr	r3, [r3, #4]
 8007da0:	69ba      	ldr	r2, [r7, #24]
 8007da2:	1ad3      	subs	r3, r2, r3
 8007da4:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 8007da6:	683b      	ldr	r3, [r7, #0]
 8007da8:	681b      	ldr	r3, [r3, #0]
 8007daa:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007dae:	d102      	bne.n	8007db6 <xTaskCheckForTimeOut+0x66>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 8007db0:	2300      	movs	r3, #0
 8007db2:	61fb      	str	r3, [r7, #28]
 8007db4:	e023      	b.n	8007dfe <xTaskCheckForTimeOut+0xae>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 8007db6:	687b      	ldr	r3, [r7, #4]
 8007db8:	681a      	ldr	r2, [r3, #0]
 8007dba:	4b15      	ldr	r3, [pc, #84]	; (8007e10 <xTaskCheckForTimeOut+0xc0>)
 8007dbc:	681b      	ldr	r3, [r3, #0]
 8007dbe:	429a      	cmp	r2, r3
 8007dc0:	d007      	beq.n	8007dd2 <xTaskCheckForTimeOut+0x82>
 8007dc2:	687b      	ldr	r3, [r7, #4]
 8007dc4:	685b      	ldr	r3, [r3, #4]
 8007dc6:	69ba      	ldr	r2, [r7, #24]
 8007dc8:	429a      	cmp	r2, r3
 8007dca:	d302      	bcc.n	8007dd2 <xTaskCheckForTimeOut+0x82>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 8007dcc:	2301      	movs	r3, #1
 8007dce:	61fb      	str	r3, [r7, #28]
 8007dd0:	e015      	b.n	8007dfe <xTaskCheckForTimeOut+0xae>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 8007dd2:	683b      	ldr	r3, [r7, #0]
 8007dd4:	681b      	ldr	r3, [r3, #0]
 8007dd6:	697a      	ldr	r2, [r7, #20]
 8007dd8:	429a      	cmp	r2, r3
 8007dda:	d20b      	bcs.n	8007df4 <xTaskCheckForTimeOut+0xa4>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 8007ddc:	683b      	ldr	r3, [r7, #0]
 8007dde:	681a      	ldr	r2, [r3, #0]
 8007de0:	697b      	ldr	r3, [r7, #20]
 8007de2:	1ad2      	subs	r2, r2, r3
 8007de4:	683b      	ldr	r3, [r7, #0]
 8007de6:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 8007de8:	6878      	ldr	r0, [r7, #4]
 8007dea:	f7ff ff9b 	bl	8007d24 <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 8007dee:	2300      	movs	r3, #0
 8007df0:	61fb      	str	r3, [r7, #28]
 8007df2:	e004      	b.n	8007dfe <xTaskCheckForTimeOut+0xae>
		}
		else
		{
			*pxTicksToWait = 0;
 8007df4:	683b      	ldr	r3, [r7, #0]
 8007df6:	2200      	movs	r2, #0
 8007df8:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 8007dfa:	2301      	movs	r3, #1
 8007dfc:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 8007dfe:	f001 f915 	bl	800902c <vPortExitCritical>

	return xReturn;
 8007e02:	69fb      	ldr	r3, [r7, #28]
}
 8007e04:	4618      	mov	r0, r3
 8007e06:	3720      	adds	r7, #32
 8007e08:	46bd      	mov	sp, r7
 8007e0a:	bd80      	pop	{r7, pc}
 8007e0c:	20000ea0 	.word	0x20000ea0
 8007e10:	20000eb4 	.word	0x20000eb4

08007e14 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 8007e14:	b480      	push	{r7}
 8007e16:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 8007e18:	4b03      	ldr	r3, [pc, #12]	; (8007e28 <vTaskMissedYield+0x14>)
 8007e1a:	2201      	movs	r2, #1
 8007e1c:	601a      	str	r2, [r3, #0]
}
 8007e1e:	bf00      	nop
 8007e20:	46bd      	mov	sp, r7
 8007e22:	bc80      	pop	{r7}
 8007e24:	4770      	bx	lr
 8007e26:	bf00      	nop
 8007e28:	20000eb0 	.word	0x20000eb0

08007e2c <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 8007e2c:	b580      	push	{r7, lr}
 8007e2e:	b082      	sub	sp, #8
 8007e30:	af00      	add	r7, sp, #0
 8007e32:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 8007e34:	f000 f852 	bl	8007edc <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 8007e38:	4b06      	ldr	r3, [pc, #24]	; (8007e54 <prvIdleTask+0x28>)
 8007e3a:	681b      	ldr	r3, [r3, #0]
 8007e3c:	2b01      	cmp	r3, #1
 8007e3e:	d9f9      	bls.n	8007e34 <prvIdleTask+0x8>
			{
				taskYIELD();
 8007e40:	4b05      	ldr	r3, [pc, #20]	; (8007e58 <prvIdleTask+0x2c>)
 8007e42:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8007e46:	601a      	str	r2, [r3, #0]
 8007e48:	f3bf 8f4f 	dsb	sy
 8007e4c:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 8007e50:	e7f0      	b.n	8007e34 <prvIdleTask+0x8>
 8007e52:	bf00      	nop
 8007e54:	200009cc 	.word	0x200009cc
 8007e58:	e000ed04 	.word	0xe000ed04

08007e5c <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 8007e5c:	b580      	push	{r7, lr}
 8007e5e:	b082      	sub	sp, #8
 8007e60:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8007e62:	2300      	movs	r3, #0
 8007e64:	607b      	str	r3, [r7, #4]
 8007e66:	e00c      	b.n	8007e82 <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 8007e68:	687a      	ldr	r2, [r7, #4]
 8007e6a:	4613      	mov	r3, r2
 8007e6c:	009b      	lsls	r3, r3, #2
 8007e6e:	4413      	add	r3, r2
 8007e70:	009b      	lsls	r3, r3, #2
 8007e72:	4a12      	ldr	r2, [pc, #72]	; (8007ebc <prvInitialiseTaskLists+0x60>)
 8007e74:	4413      	add	r3, r2
 8007e76:	4618      	mov	r0, r3
 8007e78:	f7fe fadc 	bl	8006434 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8007e7c:	687b      	ldr	r3, [r7, #4]
 8007e7e:	3301      	adds	r3, #1
 8007e80:	607b      	str	r3, [r7, #4]
 8007e82:	687b      	ldr	r3, [r7, #4]
 8007e84:	2b37      	cmp	r3, #55	; 0x37
 8007e86:	d9ef      	bls.n	8007e68 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 8007e88:	480d      	ldr	r0, [pc, #52]	; (8007ec0 <prvInitialiseTaskLists+0x64>)
 8007e8a:	f7fe fad3 	bl	8006434 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 8007e8e:	480d      	ldr	r0, [pc, #52]	; (8007ec4 <prvInitialiseTaskLists+0x68>)
 8007e90:	f7fe fad0 	bl	8006434 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 8007e94:	480c      	ldr	r0, [pc, #48]	; (8007ec8 <prvInitialiseTaskLists+0x6c>)
 8007e96:	f7fe facd 	bl	8006434 <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 8007e9a:	480c      	ldr	r0, [pc, #48]	; (8007ecc <prvInitialiseTaskLists+0x70>)
 8007e9c:	f7fe faca 	bl	8006434 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 8007ea0:	480b      	ldr	r0, [pc, #44]	; (8007ed0 <prvInitialiseTaskLists+0x74>)
 8007ea2:	f7fe fac7 	bl	8006434 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 8007ea6:	4b0b      	ldr	r3, [pc, #44]	; (8007ed4 <prvInitialiseTaskLists+0x78>)
 8007ea8:	4a05      	ldr	r2, [pc, #20]	; (8007ec0 <prvInitialiseTaskLists+0x64>)
 8007eaa:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 8007eac:	4b0a      	ldr	r3, [pc, #40]	; (8007ed8 <prvInitialiseTaskLists+0x7c>)
 8007eae:	4a05      	ldr	r2, [pc, #20]	; (8007ec4 <prvInitialiseTaskLists+0x68>)
 8007eb0:	601a      	str	r2, [r3, #0]
}
 8007eb2:	bf00      	nop
 8007eb4:	3708      	adds	r7, #8
 8007eb6:	46bd      	mov	sp, r7
 8007eb8:	bd80      	pop	{r7, pc}
 8007eba:	bf00      	nop
 8007ebc:	200009cc 	.word	0x200009cc
 8007ec0:	20000e2c 	.word	0x20000e2c
 8007ec4:	20000e40 	.word	0x20000e40
 8007ec8:	20000e5c 	.word	0x20000e5c
 8007ecc:	20000e70 	.word	0x20000e70
 8007ed0:	20000e88 	.word	0x20000e88
 8007ed4:	20000e54 	.word	0x20000e54
 8007ed8:	20000e58 	.word	0x20000e58

08007edc <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 8007edc:	b580      	push	{r7, lr}
 8007ede:	b082      	sub	sp, #8
 8007ee0:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent vTaskSuspendAll()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8007ee2:	e019      	b.n	8007f18 <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 8007ee4:	f001 f872 	bl	8008fcc <vPortEnterCritical>
			{
				pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) );
 8007ee8:	4b10      	ldr	r3, [pc, #64]	; (8007f2c <prvCheckTasksWaitingTermination+0x50>)
 8007eea:	68db      	ldr	r3, [r3, #12]
 8007eec:	68db      	ldr	r3, [r3, #12]
 8007eee:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8007ef0:	687b      	ldr	r3, [r7, #4]
 8007ef2:	3304      	adds	r3, #4
 8007ef4:	4618      	mov	r0, r3
 8007ef6:	f7fe fb23 	bl	8006540 <uxListRemove>
				--uxCurrentNumberOfTasks;
 8007efa:	4b0d      	ldr	r3, [pc, #52]	; (8007f30 <prvCheckTasksWaitingTermination+0x54>)
 8007efc:	681b      	ldr	r3, [r3, #0]
 8007efe:	3b01      	subs	r3, #1
 8007f00:	4a0b      	ldr	r2, [pc, #44]	; (8007f30 <prvCheckTasksWaitingTermination+0x54>)
 8007f02:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 8007f04:	4b0b      	ldr	r3, [pc, #44]	; (8007f34 <prvCheckTasksWaitingTermination+0x58>)
 8007f06:	681b      	ldr	r3, [r3, #0]
 8007f08:	3b01      	subs	r3, #1
 8007f0a:	4a0a      	ldr	r2, [pc, #40]	; (8007f34 <prvCheckTasksWaitingTermination+0x58>)
 8007f0c:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 8007f0e:	f001 f88d 	bl	800902c <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 8007f12:	6878      	ldr	r0, [r7, #4]
 8007f14:	f000 f810 	bl	8007f38 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8007f18:	4b06      	ldr	r3, [pc, #24]	; (8007f34 <prvCheckTasksWaitingTermination+0x58>)
 8007f1a:	681b      	ldr	r3, [r3, #0]
 8007f1c:	2b00      	cmp	r3, #0
 8007f1e:	d1e1      	bne.n	8007ee4 <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 8007f20:	bf00      	nop
 8007f22:	bf00      	nop
 8007f24:	3708      	adds	r7, #8
 8007f26:	46bd      	mov	sp, r7
 8007f28:	bd80      	pop	{r7, pc}
 8007f2a:	bf00      	nop
 8007f2c:	20000e70 	.word	0x20000e70
 8007f30:	20000e9c 	.word	0x20000e9c
 8007f34:	20000e84 	.word	0x20000e84

08007f38 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 8007f38:	b580      	push	{r7, lr}
 8007f3a:	b084      	sub	sp, #16
 8007f3c:	af00      	add	r7, sp, #0
 8007f3e:	6078      	str	r0, [r7, #4]
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 8007f40:	687b      	ldr	r3, [r7, #4]
 8007f42:	f893 3059 	ldrb.w	r3, [r3, #89]	; 0x59
 8007f46:	2b00      	cmp	r3, #0
 8007f48:	d108      	bne.n	8007f5c <prvDeleteTCB+0x24>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 8007f4a:	687b      	ldr	r3, [r7, #4]
 8007f4c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007f4e:	4618      	mov	r0, r3
 8007f50:	f001 fa00 	bl	8009354 <vPortFree>
				vPortFree( pxTCB );
 8007f54:	6878      	ldr	r0, [r7, #4]
 8007f56:	f001 f9fd 	bl	8009354 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 8007f5a:	e018      	b.n	8007f8e <prvDeleteTCB+0x56>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 8007f5c:	687b      	ldr	r3, [r7, #4]
 8007f5e:	f893 3059 	ldrb.w	r3, [r3, #89]	; 0x59
 8007f62:	2b01      	cmp	r3, #1
 8007f64:	d103      	bne.n	8007f6e <prvDeleteTCB+0x36>
				vPortFree( pxTCB );
 8007f66:	6878      	ldr	r0, [r7, #4]
 8007f68:	f001 f9f4 	bl	8009354 <vPortFree>
	}
 8007f6c:	e00f      	b.n	8007f8e <prvDeleteTCB+0x56>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 8007f6e:	687b      	ldr	r3, [r7, #4]
 8007f70:	f893 3059 	ldrb.w	r3, [r3, #89]	; 0x59
 8007f74:	2b02      	cmp	r3, #2
 8007f76:	d00a      	beq.n	8007f8e <prvDeleteTCB+0x56>
	__asm volatile
 8007f78:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007f7c:	f383 8811 	msr	BASEPRI, r3
 8007f80:	f3bf 8f6f 	isb	sy
 8007f84:	f3bf 8f4f 	dsb	sy
 8007f88:	60fb      	str	r3, [r7, #12]
}
 8007f8a:	bf00      	nop
 8007f8c:	e7fe      	b.n	8007f8c <prvDeleteTCB+0x54>
	}
 8007f8e:	bf00      	nop
 8007f90:	3710      	adds	r7, #16
 8007f92:	46bd      	mov	sp, r7
 8007f94:	bd80      	pop	{r7, pc}
	...

08007f98 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 8007f98:	b480      	push	{r7}
 8007f9a:	b083      	sub	sp, #12
 8007f9c:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8007f9e:	4b0e      	ldr	r3, [pc, #56]	; (8007fd8 <prvResetNextTaskUnblockTime+0x40>)
 8007fa0:	681b      	ldr	r3, [r3, #0]
 8007fa2:	681b      	ldr	r3, [r3, #0]
 8007fa4:	2b00      	cmp	r3, #0
 8007fa6:	d101      	bne.n	8007fac <prvResetNextTaskUnblockTime+0x14>
 8007fa8:	2301      	movs	r3, #1
 8007faa:	e000      	b.n	8007fae <prvResetNextTaskUnblockTime+0x16>
 8007fac:	2300      	movs	r3, #0
 8007fae:	2b00      	cmp	r3, #0
 8007fb0:	d004      	beq.n	8007fbc <prvResetNextTaskUnblockTime+0x24>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 8007fb2:	4b0a      	ldr	r3, [pc, #40]	; (8007fdc <prvResetNextTaskUnblockTime+0x44>)
 8007fb4:	f04f 32ff 	mov.w	r2, #4294967295
 8007fb8:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 8007fba:	e008      	b.n	8007fce <prvResetNextTaskUnblockTime+0x36>
		( pxTCB ) = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
 8007fbc:	4b06      	ldr	r3, [pc, #24]	; (8007fd8 <prvResetNextTaskUnblockTime+0x40>)
 8007fbe:	681b      	ldr	r3, [r3, #0]
 8007fc0:	68db      	ldr	r3, [r3, #12]
 8007fc2:	68db      	ldr	r3, [r3, #12]
 8007fc4:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 8007fc6:	687b      	ldr	r3, [r7, #4]
 8007fc8:	685b      	ldr	r3, [r3, #4]
 8007fca:	4a04      	ldr	r2, [pc, #16]	; (8007fdc <prvResetNextTaskUnblockTime+0x44>)
 8007fcc:	6013      	str	r3, [r2, #0]
}
 8007fce:	bf00      	nop
 8007fd0:	370c      	adds	r7, #12
 8007fd2:	46bd      	mov	sp, r7
 8007fd4:	bc80      	pop	{r7}
 8007fd6:	4770      	bx	lr
 8007fd8:	20000e54 	.word	0x20000e54
 8007fdc:	20000ebc 	.word	0x20000ebc

08007fe0 <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 8007fe0:	b480      	push	{r7}
 8007fe2:	b083      	sub	sp, #12
 8007fe4:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 8007fe6:	4b0b      	ldr	r3, [pc, #44]	; (8008014 <xTaskGetSchedulerState+0x34>)
 8007fe8:	681b      	ldr	r3, [r3, #0]
 8007fea:	2b00      	cmp	r3, #0
 8007fec:	d102      	bne.n	8007ff4 <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 8007fee:	2301      	movs	r3, #1
 8007ff0:	607b      	str	r3, [r7, #4]
 8007ff2:	e008      	b.n	8008006 <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8007ff4:	4b08      	ldr	r3, [pc, #32]	; (8008018 <xTaskGetSchedulerState+0x38>)
 8007ff6:	681b      	ldr	r3, [r3, #0]
 8007ff8:	2b00      	cmp	r3, #0
 8007ffa:	d102      	bne.n	8008002 <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 8007ffc:	2302      	movs	r3, #2
 8007ffe:	607b      	str	r3, [r7, #4]
 8008000:	e001      	b.n	8008006 <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 8008002:	2300      	movs	r3, #0
 8008004:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 8008006:	687b      	ldr	r3, [r7, #4]
	}
 8008008:	4618      	mov	r0, r3
 800800a:	370c      	adds	r7, #12
 800800c:	46bd      	mov	sp, r7
 800800e:	bc80      	pop	{r7}
 8008010:	4770      	bx	lr
 8008012:	bf00      	nop
 8008014:	20000ea8 	.word	0x20000ea8
 8008018:	20000ec4 	.word	0x20000ec4

0800801c <xTaskPriorityInherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityInherit( TaskHandle_t const pxMutexHolder )
	{
 800801c:	b580      	push	{r7, lr}
 800801e:	b084      	sub	sp, #16
 8008020:	af00      	add	r7, sp, #0
 8008022:	6078      	str	r0, [r7, #4]
	TCB_t * const pxMutexHolderTCB = ( TCB_t * ) pxMutexHolder;
 8008024:	687b      	ldr	r3, [r7, #4]
 8008026:	60bb      	str	r3, [r7, #8]
	BaseType_t xReturn = pdFALSE;
 8008028:	2300      	movs	r3, #0
 800802a:	60fb      	str	r3, [r7, #12]

		/* If the mutex was given back by an interrupt while the queue was
		locked then the mutex holder might now be NULL.  _RB_ Is this still
		needed as interrupts can no longer use mutexes? */
		if( pxMutexHolder != NULL )
 800802c:	687b      	ldr	r3, [r7, #4]
 800802e:	2b00      	cmp	r3, #0
 8008030:	d056      	beq.n	80080e0 <xTaskPriorityInherit+0xc4>
		{
			/* If the holder of the mutex has a priority below the priority of
			the task attempting to obtain the mutex then it will temporarily
			inherit the priority of the task attempting to obtain the mutex. */
			if( pxMutexHolderTCB->uxPriority < pxCurrentTCB->uxPriority )
 8008032:	68bb      	ldr	r3, [r7, #8]
 8008034:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008036:	4b2d      	ldr	r3, [pc, #180]	; (80080ec <xTaskPriorityInherit+0xd0>)
 8008038:	681b      	ldr	r3, [r3, #0]
 800803a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800803c:	429a      	cmp	r2, r3
 800803e:	d246      	bcs.n	80080ce <xTaskPriorityInherit+0xb2>
			{
				/* Adjust the mutex holder state to account for its new
				priority.  Only reset the event list item value if the value is
				not being used for anything else. */
				if( ( listGET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 8008040:	68bb      	ldr	r3, [r7, #8]
 8008042:	699b      	ldr	r3, [r3, #24]
 8008044:	2b00      	cmp	r3, #0
 8008046:	db06      	blt.n	8008056 <xTaskPriorityInherit+0x3a>
				{
					listSET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxCurrentTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8008048:	4b28      	ldr	r3, [pc, #160]	; (80080ec <xTaskPriorityInherit+0xd0>)
 800804a:	681b      	ldr	r3, [r3, #0]
 800804c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800804e:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 8008052:	68bb      	ldr	r3, [r7, #8]
 8008054:	619a      	str	r2, [r3, #24]
					mtCOVERAGE_TEST_MARKER();
				}

				/* If the task being modified is in the ready state it will need
				to be moved into a new list. */
				if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ pxMutexHolderTCB->uxPriority ] ), &( pxMutexHolderTCB->xStateListItem ) ) != pdFALSE )
 8008056:	68bb      	ldr	r3, [r7, #8]
 8008058:	6959      	ldr	r1, [r3, #20]
 800805a:	68bb      	ldr	r3, [r7, #8]
 800805c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800805e:	4613      	mov	r3, r2
 8008060:	009b      	lsls	r3, r3, #2
 8008062:	4413      	add	r3, r2
 8008064:	009b      	lsls	r3, r3, #2
 8008066:	4a22      	ldr	r2, [pc, #136]	; (80080f0 <xTaskPriorityInherit+0xd4>)
 8008068:	4413      	add	r3, r2
 800806a:	4299      	cmp	r1, r3
 800806c:	d101      	bne.n	8008072 <xTaskPriorityInherit+0x56>
 800806e:	2301      	movs	r3, #1
 8008070:	e000      	b.n	8008074 <xTaskPriorityInherit+0x58>
 8008072:	2300      	movs	r3, #0
 8008074:	2b00      	cmp	r3, #0
 8008076:	d022      	beq.n	80080be <xTaskPriorityInherit+0xa2>
				{
					if( uxListRemove( &( pxMutexHolderTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8008078:	68bb      	ldr	r3, [r7, #8]
 800807a:	3304      	adds	r3, #4
 800807c:	4618      	mov	r0, r3
 800807e:	f7fe fa5f 	bl	8006540 <uxListRemove>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* Inherit the priority before being moved into the new list. */
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 8008082:	4b1a      	ldr	r3, [pc, #104]	; (80080ec <xTaskPriorityInherit+0xd0>)
 8008084:	681b      	ldr	r3, [r3, #0]
 8008086:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008088:	68bb      	ldr	r3, [r7, #8]
 800808a:	62da      	str	r2, [r3, #44]	; 0x2c
					prvAddTaskToReadyList( pxMutexHolderTCB );
 800808c:	68bb      	ldr	r3, [r7, #8]
 800808e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008090:	4b18      	ldr	r3, [pc, #96]	; (80080f4 <xTaskPriorityInherit+0xd8>)
 8008092:	681b      	ldr	r3, [r3, #0]
 8008094:	429a      	cmp	r2, r3
 8008096:	d903      	bls.n	80080a0 <xTaskPriorityInherit+0x84>
 8008098:	68bb      	ldr	r3, [r7, #8]
 800809a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800809c:	4a15      	ldr	r2, [pc, #84]	; (80080f4 <xTaskPriorityInherit+0xd8>)
 800809e:	6013      	str	r3, [r2, #0]
 80080a0:	68bb      	ldr	r3, [r7, #8]
 80080a2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80080a4:	4613      	mov	r3, r2
 80080a6:	009b      	lsls	r3, r3, #2
 80080a8:	4413      	add	r3, r2
 80080aa:	009b      	lsls	r3, r3, #2
 80080ac:	4a10      	ldr	r2, [pc, #64]	; (80080f0 <xTaskPriorityInherit+0xd4>)
 80080ae:	441a      	add	r2, r3
 80080b0:	68bb      	ldr	r3, [r7, #8]
 80080b2:	3304      	adds	r3, #4
 80080b4:	4619      	mov	r1, r3
 80080b6:	4610      	mov	r0, r2
 80080b8:	f7fe f9e7 	bl	800648a <vListInsertEnd>
 80080bc:	e004      	b.n	80080c8 <xTaskPriorityInherit+0xac>
				}
				else
				{
					/* Just inherit the priority. */
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 80080be:	4b0b      	ldr	r3, [pc, #44]	; (80080ec <xTaskPriorityInherit+0xd0>)
 80080c0:	681b      	ldr	r3, [r3, #0]
 80080c2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80080c4:	68bb      	ldr	r3, [r7, #8]
 80080c6:	62da      	str	r2, [r3, #44]	; 0x2c
				}

				traceTASK_PRIORITY_INHERIT( pxMutexHolderTCB, pxCurrentTCB->uxPriority );

				/* Inheritance occurred. */
				xReturn = pdTRUE;
 80080c8:	2301      	movs	r3, #1
 80080ca:	60fb      	str	r3, [r7, #12]
 80080cc:	e008      	b.n	80080e0 <xTaskPriorityInherit+0xc4>
			}
			else
			{
				if( pxMutexHolderTCB->uxBasePriority < pxCurrentTCB->uxPriority )
 80080ce:	68bb      	ldr	r3, [r7, #8]
 80080d0:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 80080d2:	4b06      	ldr	r3, [pc, #24]	; (80080ec <xTaskPriorityInherit+0xd0>)
 80080d4:	681b      	ldr	r3, [r3, #0]
 80080d6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80080d8:	429a      	cmp	r2, r3
 80080da:	d201      	bcs.n	80080e0 <xTaskPriorityInherit+0xc4>
					current priority of the mutex holder is not lower than the
					priority of the task attempting to take the mutex.
					Therefore the mutex holder must have already inherited a
					priority, but inheritance would have occurred if that had
					not been the case. */
					xReturn = pdTRUE;
 80080dc:	2301      	movs	r3, #1
 80080de:	60fb      	str	r3, [r7, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 80080e0:	68fb      	ldr	r3, [r7, #12]
	}
 80080e2:	4618      	mov	r0, r3
 80080e4:	3710      	adds	r7, #16
 80080e6:	46bd      	mov	sp, r7
 80080e8:	bd80      	pop	{r7, pc}
 80080ea:	bf00      	nop
 80080ec:	200009c8 	.word	0x200009c8
 80080f0:	200009cc 	.word	0x200009cc
 80080f4:	20000ea4 	.word	0x20000ea4

080080f8 <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 80080f8:	b580      	push	{r7, lr}
 80080fa:	b086      	sub	sp, #24
 80080fc:	af00      	add	r7, sp, #0
 80080fe:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = ( TCB_t * ) pxMutexHolder;
 8008100:	687b      	ldr	r3, [r7, #4]
 8008102:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 8008104:	2300      	movs	r3, #0
 8008106:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 8008108:	687b      	ldr	r3, [r7, #4]
 800810a:	2b00      	cmp	r3, #0
 800810c:	d056      	beq.n	80081bc <xTaskPriorityDisinherit+0xc4>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 800810e:	4b2e      	ldr	r3, [pc, #184]	; (80081c8 <xTaskPriorityDisinherit+0xd0>)
 8008110:	681b      	ldr	r3, [r3, #0]
 8008112:	693a      	ldr	r2, [r7, #16]
 8008114:	429a      	cmp	r2, r3
 8008116:	d00a      	beq.n	800812e <xTaskPriorityDisinherit+0x36>
	__asm volatile
 8008118:	f04f 0350 	mov.w	r3, #80	; 0x50
 800811c:	f383 8811 	msr	BASEPRI, r3
 8008120:	f3bf 8f6f 	isb	sy
 8008124:	f3bf 8f4f 	dsb	sy
 8008128:	60fb      	str	r3, [r7, #12]
}
 800812a:	bf00      	nop
 800812c:	e7fe      	b.n	800812c <xTaskPriorityDisinherit+0x34>
			configASSERT( pxTCB->uxMutexesHeld );
 800812e:	693b      	ldr	r3, [r7, #16]
 8008130:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8008132:	2b00      	cmp	r3, #0
 8008134:	d10a      	bne.n	800814c <xTaskPriorityDisinherit+0x54>
	__asm volatile
 8008136:	f04f 0350 	mov.w	r3, #80	; 0x50
 800813a:	f383 8811 	msr	BASEPRI, r3
 800813e:	f3bf 8f6f 	isb	sy
 8008142:	f3bf 8f4f 	dsb	sy
 8008146:	60bb      	str	r3, [r7, #8]
}
 8008148:	bf00      	nop
 800814a:	e7fe      	b.n	800814a <xTaskPriorityDisinherit+0x52>
			( pxTCB->uxMutexesHeld )--;
 800814c:	693b      	ldr	r3, [r7, #16]
 800814e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8008150:	1e5a      	subs	r2, r3, #1
 8008152:	693b      	ldr	r3, [r7, #16]
 8008154:	651a      	str	r2, [r3, #80]	; 0x50

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 8008156:	693b      	ldr	r3, [r7, #16]
 8008158:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800815a:	693b      	ldr	r3, [r7, #16]
 800815c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800815e:	429a      	cmp	r2, r3
 8008160:	d02c      	beq.n	80081bc <xTaskPriorityDisinherit+0xc4>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 8008162:	693b      	ldr	r3, [r7, #16]
 8008164:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8008166:	2b00      	cmp	r3, #0
 8008168:	d128      	bne.n	80081bc <xTaskPriorityDisinherit+0xc4>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800816a:	693b      	ldr	r3, [r7, #16]
 800816c:	3304      	adds	r3, #4
 800816e:	4618      	mov	r0, r3
 8008170:	f7fe f9e6 	bl	8006540 <uxListRemove>
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 8008174:	693b      	ldr	r3, [r7, #16]
 8008176:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8008178:	693b      	ldr	r3, [r7, #16]
 800817a:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800817c:	693b      	ldr	r3, [r7, #16]
 800817e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008180:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 8008184:	693b      	ldr	r3, [r7, #16]
 8008186:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 8008188:	693b      	ldr	r3, [r7, #16]
 800818a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800818c:	4b0f      	ldr	r3, [pc, #60]	; (80081cc <xTaskPriorityDisinherit+0xd4>)
 800818e:	681b      	ldr	r3, [r3, #0]
 8008190:	429a      	cmp	r2, r3
 8008192:	d903      	bls.n	800819c <xTaskPriorityDisinherit+0xa4>
 8008194:	693b      	ldr	r3, [r7, #16]
 8008196:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008198:	4a0c      	ldr	r2, [pc, #48]	; (80081cc <xTaskPriorityDisinherit+0xd4>)
 800819a:	6013      	str	r3, [r2, #0]
 800819c:	693b      	ldr	r3, [r7, #16]
 800819e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80081a0:	4613      	mov	r3, r2
 80081a2:	009b      	lsls	r3, r3, #2
 80081a4:	4413      	add	r3, r2
 80081a6:	009b      	lsls	r3, r3, #2
 80081a8:	4a09      	ldr	r2, [pc, #36]	; (80081d0 <xTaskPriorityDisinherit+0xd8>)
 80081aa:	441a      	add	r2, r3
 80081ac:	693b      	ldr	r3, [r7, #16]
 80081ae:	3304      	adds	r3, #4
 80081b0:	4619      	mov	r1, r3
 80081b2:	4610      	mov	r0, r2
 80081b4:	f7fe f969 	bl	800648a <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 80081b8:	2301      	movs	r3, #1
 80081ba:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 80081bc:	697b      	ldr	r3, [r7, #20]
	}
 80081be:	4618      	mov	r0, r3
 80081c0:	3718      	adds	r7, #24
 80081c2:	46bd      	mov	sp, r7
 80081c4:	bd80      	pop	{r7, pc}
 80081c6:	bf00      	nop
 80081c8:	200009c8 	.word	0x200009c8
 80081cc:	20000ea4 	.word	0x20000ea4
 80081d0:	200009cc 	.word	0x200009cc

080081d4 <vTaskPriorityDisinheritAfterTimeout>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	void vTaskPriorityDisinheritAfterTimeout( TaskHandle_t const pxMutexHolder, UBaseType_t uxHighestPriorityWaitingTask )
	{
 80081d4:	b580      	push	{r7, lr}
 80081d6:	b088      	sub	sp, #32
 80081d8:	af00      	add	r7, sp, #0
 80081da:	6078      	str	r0, [r7, #4]
 80081dc:	6039      	str	r1, [r7, #0]
	TCB_t * const pxTCB = ( TCB_t * ) pxMutexHolder;
 80081de:	687b      	ldr	r3, [r7, #4]
 80081e0:	61bb      	str	r3, [r7, #24]
	UBaseType_t uxPriorityUsedOnEntry, uxPriorityToUse;
	const UBaseType_t uxOnlyOneMutexHeld = ( UBaseType_t ) 1;
 80081e2:	2301      	movs	r3, #1
 80081e4:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 80081e6:	687b      	ldr	r3, [r7, #4]
 80081e8:	2b00      	cmp	r3, #0
 80081ea:	d06f      	beq.n	80082cc <vTaskPriorityDisinheritAfterTimeout+0xf8>
		{
			/* If pxMutexHolder is not NULL then the holder must hold at least
			one mutex. */
			configASSERT( pxTCB->uxMutexesHeld );
 80081ec:	69bb      	ldr	r3, [r7, #24]
 80081ee:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80081f0:	2b00      	cmp	r3, #0
 80081f2:	d10a      	bne.n	800820a <vTaskPriorityDisinheritAfterTimeout+0x36>
	__asm volatile
 80081f4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80081f8:	f383 8811 	msr	BASEPRI, r3
 80081fc:	f3bf 8f6f 	isb	sy
 8008200:	f3bf 8f4f 	dsb	sy
 8008204:	60fb      	str	r3, [r7, #12]
}
 8008206:	bf00      	nop
 8008208:	e7fe      	b.n	8008208 <vTaskPriorityDisinheritAfterTimeout+0x34>

			/* Determine the priority to which the priority of the task that
			holds the mutex should be set.  This will be the greater of the
			holding task's base priority and the priority of the highest
			priority task that is waiting to obtain the mutex. */
			if( pxTCB->uxBasePriority < uxHighestPriorityWaitingTask )
 800820a:	69bb      	ldr	r3, [r7, #24]
 800820c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800820e:	683a      	ldr	r2, [r7, #0]
 8008210:	429a      	cmp	r2, r3
 8008212:	d902      	bls.n	800821a <vTaskPriorityDisinheritAfterTimeout+0x46>
			{
				uxPriorityToUse = uxHighestPriorityWaitingTask;
 8008214:	683b      	ldr	r3, [r7, #0]
 8008216:	61fb      	str	r3, [r7, #28]
 8008218:	e002      	b.n	8008220 <vTaskPriorityDisinheritAfterTimeout+0x4c>
			}
			else
			{
				uxPriorityToUse = pxTCB->uxBasePriority;
 800821a:	69bb      	ldr	r3, [r7, #24]
 800821c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800821e:	61fb      	str	r3, [r7, #28]
			}

			/* Does the priority need to change? */
			if( pxTCB->uxPriority != uxPriorityToUse )
 8008220:	69bb      	ldr	r3, [r7, #24]
 8008222:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008224:	69fa      	ldr	r2, [r7, #28]
 8008226:	429a      	cmp	r2, r3
 8008228:	d050      	beq.n	80082cc <vTaskPriorityDisinheritAfterTimeout+0xf8>
			{
				/* Only disinherit if no other mutexes are held.  This is a
				simplification in the priority inheritance implementation.  If
				the task that holds the mutex is also holding other mutexes then
				the other mutexes may have caused the priority inheritance. */
				if( pxTCB->uxMutexesHeld == uxOnlyOneMutexHeld )
 800822a:	69bb      	ldr	r3, [r7, #24]
 800822c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800822e:	697a      	ldr	r2, [r7, #20]
 8008230:	429a      	cmp	r2, r3
 8008232:	d14b      	bne.n	80082cc <vTaskPriorityDisinheritAfterTimeout+0xf8>
				{
					/* If a task has timed out because it already holds the
					mutex it was trying to obtain then it cannot of inherited
					its own priority. */
					configASSERT( pxTCB != pxCurrentTCB );
 8008234:	4b27      	ldr	r3, [pc, #156]	; (80082d4 <vTaskPriorityDisinheritAfterTimeout+0x100>)
 8008236:	681b      	ldr	r3, [r3, #0]
 8008238:	69ba      	ldr	r2, [r7, #24]
 800823a:	429a      	cmp	r2, r3
 800823c:	d10a      	bne.n	8008254 <vTaskPriorityDisinheritAfterTimeout+0x80>
	__asm volatile
 800823e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008242:	f383 8811 	msr	BASEPRI, r3
 8008246:	f3bf 8f6f 	isb	sy
 800824a:	f3bf 8f4f 	dsb	sy
 800824e:	60bb      	str	r3, [r7, #8]
}
 8008250:	bf00      	nop
 8008252:	e7fe      	b.n	8008252 <vTaskPriorityDisinheritAfterTimeout+0x7e>

					/* Disinherit the priority, remembering the previous
					priority to facilitate determining the subject task's
					state. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					uxPriorityUsedOnEntry = pxTCB->uxPriority;
 8008254:	69bb      	ldr	r3, [r7, #24]
 8008256:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008258:	613b      	str	r3, [r7, #16]
					pxTCB->uxPriority = uxPriorityToUse;
 800825a:	69bb      	ldr	r3, [r7, #24]
 800825c:	69fa      	ldr	r2, [r7, #28]
 800825e:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Only reset the event list item value if the value is not
					being used for anything else. */
					if( ( listGET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 8008260:	69bb      	ldr	r3, [r7, #24]
 8008262:	699b      	ldr	r3, [r3, #24]
 8008264:	2b00      	cmp	r3, #0
 8008266:	db04      	blt.n	8008272 <vTaskPriorityDisinheritAfterTimeout+0x9e>
					{
						listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriorityToUse ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8008268:	69fb      	ldr	r3, [r7, #28]
 800826a:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 800826e:	69bb      	ldr	r3, [r7, #24]
 8008270:	619a      	str	r2, [r3, #24]
					then the task that holds the mutex could be in either the
					Ready, Blocked or Suspended states.  Only remove the task
					from its current state list if it is in the Ready state as
					the task's priority is going to change and there is one
					Ready list per priority. */
					if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ uxPriorityUsedOnEntry ] ), &( pxTCB->xStateListItem ) ) != pdFALSE )
 8008272:	69bb      	ldr	r3, [r7, #24]
 8008274:	6959      	ldr	r1, [r3, #20]
 8008276:	693a      	ldr	r2, [r7, #16]
 8008278:	4613      	mov	r3, r2
 800827a:	009b      	lsls	r3, r3, #2
 800827c:	4413      	add	r3, r2
 800827e:	009b      	lsls	r3, r3, #2
 8008280:	4a15      	ldr	r2, [pc, #84]	; (80082d8 <vTaskPriorityDisinheritAfterTimeout+0x104>)
 8008282:	4413      	add	r3, r2
 8008284:	4299      	cmp	r1, r3
 8008286:	d101      	bne.n	800828c <vTaskPriorityDisinheritAfterTimeout+0xb8>
 8008288:	2301      	movs	r3, #1
 800828a:	e000      	b.n	800828e <vTaskPriorityDisinheritAfterTimeout+0xba>
 800828c:	2300      	movs	r3, #0
 800828e:	2b00      	cmp	r3, #0
 8008290:	d01c      	beq.n	80082cc <vTaskPriorityDisinheritAfterTimeout+0xf8>
					{
						if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8008292:	69bb      	ldr	r3, [r7, #24]
 8008294:	3304      	adds	r3, #4
 8008296:	4618      	mov	r0, r3
 8008298:	f7fe f952 	bl	8006540 <uxListRemove>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}

						prvAddTaskToReadyList( pxTCB );
 800829c:	69bb      	ldr	r3, [r7, #24]
 800829e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80082a0:	4b0e      	ldr	r3, [pc, #56]	; (80082dc <vTaskPriorityDisinheritAfterTimeout+0x108>)
 80082a2:	681b      	ldr	r3, [r3, #0]
 80082a4:	429a      	cmp	r2, r3
 80082a6:	d903      	bls.n	80082b0 <vTaskPriorityDisinheritAfterTimeout+0xdc>
 80082a8:	69bb      	ldr	r3, [r7, #24]
 80082aa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80082ac:	4a0b      	ldr	r2, [pc, #44]	; (80082dc <vTaskPriorityDisinheritAfterTimeout+0x108>)
 80082ae:	6013      	str	r3, [r2, #0]
 80082b0:	69bb      	ldr	r3, [r7, #24]
 80082b2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80082b4:	4613      	mov	r3, r2
 80082b6:	009b      	lsls	r3, r3, #2
 80082b8:	4413      	add	r3, r2
 80082ba:	009b      	lsls	r3, r3, #2
 80082bc:	4a06      	ldr	r2, [pc, #24]	; (80082d8 <vTaskPriorityDisinheritAfterTimeout+0x104>)
 80082be:	441a      	add	r2, r3
 80082c0:	69bb      	ldr	r3, [r7, #24]
 80082c2:	3304      	adds	r3, #4
 80082c4:	4619      	mov	r1, r3
 80082c6:	4610      	mov	r0, r2
 80082c8:	f7fe f8df 	bl	800648a <vListInsertEnd>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 80082cc:	bf00      	nop
 80082ce:	3720      	adds	r7, #32
 80082d0:	46bd      	mov	sp, r7
 80082d2:	bd80      	pop	{r7, pc}
 80082d4:	200009c8 	.word	0x200009c8
 80082d8:	200009cc 	.word	0x200009cc
 80082dc:	20000ea4 	.word	0x20000ea4

080082e0 <pvTaskIncrementMutexHeldCount>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	void *pvTaskIncrementMutexHeldCount( void )
	{
 80082e0:	b480      	push	{r7}
 80082e2:	af00      	add	r7, sp, #0
		/* If xSemaphoreCreateMutex() is called before any tasks have been created
		then pxCurrentTCB will be NULL. */
		if( pxCurrentTCB != NULL )
 80082e4:	4b07      	ldr	r3, [pc, #28]	; (8008304 <pvTaskIncrementMutexHeldCount+0x24>)
 80082e6:	681b      	ldr	r3, [r3, #0]
 80082e8:	2b00      	cmp	r3, #0
 80082ea:	d004      	beq.n	80082f6 <pvTaskIncrementMutexHeldCount+0x16>
		{
			( pxCurrentTCB->uxMutexesHeld )++;
 80082ec:	4b05      	ldr	r3, [pc, #20]	; (8008304 <pvTaskIncrementMutexHeldCount+0x24>)
 80082ee:	681b      	ldr	r3, [r3, #0]
 80082f0:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 80082f2:	3201      	adds	r2, #1
 80082f4:	651a      	str	r2, [r3, #80]	; 0x50
		}

		return pxCurrentTCB;
 80082f6:	4b03      	ldr	r3, [pc, #12]	; (8008304 <pvTaskIncrementMutexHeldCount+0x24>)
 80082f8:	681b      	ldr	r3, [r3, #0]
	}
 80082fa:	4618      	mov	r0, r3
 80082fc:	46bd      	mov	sp, r7
 80082fe:	bc80      	pop	{r7}
 8008300:	4770      	bx	lr
 8008302:	bf00      	nop
 8008304:	200009c8 	.word	0x200009c8

08008308 <ulTaskNotifyTake>:
/*-----------------------------------------------------------*/

#if( configUSE_TASK_NOTIFICATIONS == 1 )

	uint32_t ulTaskNotifyTake( BaseType_t xClearCountOnExit, TickType_t xTicksToWait )
	{
 8008308:	b580      	push	{r7, lr}
 800830a:	b084      	sub	sp, #16
 800830c:	af00      	add	r7, sp, #0
 800830e:	6078      	str	r0, [r7, #4]
 8008310:	6039      	str	r1, [r7, #0]
	uint32_t ulReturn;

		taskENTER_CRITICAL();
 8008312:	f000 fe5b 	bl	8008fcc <vPortEnterCritical>
		{
			/* Only block if the notification count is not already non-zero. */
			if( pxCurrentTCB->ulNotifiedValue == 0UL )
 8008316:	4b1e      	ldr	r3, [pc, #120]	; (8008390 <ulTaskNotifyTake+0x88>)
 8008318:	681b      	ldr	r3, [r3, #0]
 800831a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800831c:	2b00      	cmp	r3, #0
 800831e:	d113      	bne.n	8008348 <ulTaskNotifyTake+0x40>
			{
				/* Mark this task as waiting for a notification. */
				pxCurrentTCB->ucNotifyState = taskWAITING_NOTIFICATION;
 8008320:	4b1b      	ldr	r3, [pc, #108]	; (8008390 <ulTaskNotifyTake+0x88>)
 8008322:	681b      	ldr	r3, [r3, #0]
 8008324:	2201      	movs	r2, #1
 8008326:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58

				if( xTicksToWait > ( TickType_t ) 0 )
 800832a:	683b      	ldr	r3, [r7, #0]
 800832c:	2b00      	cmp	r3, #0
 800832e:	d00b      	beq.n	8008348 <ulTaskNotifyTake+0x40>
				{
					prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 8008330:	2101      	movs	r1, #1
 8008332:	6838      	ldr	r0, [r7, #0]
 8008334:	f000 f99e 	bl	8008674 <prvAddCurrentTaskToDelayedList>

					/* All ports are written to allow a yield in a critical
					section (some will yield immediately, others wait until the
					critical section exits) - but it is not something that
					application code should ever do. */
					portYIELD_WITHIN_API();
 8008338:	4b16      	ldr	r3, [pc, #88]	; (8008394 <ulTaskNotifyTake+0x8c>)
 800833a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800833e:	601a      	str	r2, [r3, #0]
 8008340:	f3bf 8f4f 	dsb	sy
 8008344:	f3bf 8f6f 	isb	sy
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
		taskEXIT_CRITICAL();
 8008348:	f000 fe70 	bl	800902c <vPortExitCritical>

		taskENTER_CRITICAL();
 800834c:	f000 fe3e 	bl	8008fcc <vPortEnterCritical>
		{
			traceTASK_NOTIFY_TAKE();
			ulReturn = pxCurrentTCB->ulNotifiedValue;
 8008350:	4b0f      	ldr	r3, [pc, #60]	; (8008390 <ulTaskNotifyTake+0x88>)
 8008352:	681b      	ldr	r3, [r3, #0]
 8008354:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8008356:	60fb      	str	r3, [r7, #12]

			if( ulReturn != 0UL )
 8008358:	68fb      	ldr	r3, [r7, #12]
 800835a:	2b00      	cmp	r3, #0
 800835c:	d00c      	beq.n	8008378 <ulTaskNotifyTake+0x70>
			{
				if( xClearCountOnExit != pdFALSE )
 800835e:	687b      	ldr	r3, [r7, #4]
 8008360:	2b00      	cmp	r3, #0
 8008362:	d004      	beq.n	800836e <ulTaskNotifyTake+0x66>
				{
					pxCurrentTCB->ulNotifiedValue = 0UL;
 8008364:	4b0a      	ldr	r3, [pc, #40]	; (8008390 <ulTaskNotifyTake+0x88>)
 8008366:	681b      	ldr	r3, [r3, #0]
 8008368:	2200      	movs	r2, #0
 800836a:	655a      	str	r2, [r3, #84]	; 0x54
 800836c:	e004      	b.n	8008378 <ulTaskNotifyTake+0x70>
				}
				else
				{
					pxCurrentTCB->ulNotifiedValue = ulReturn - ( uint32_t ) 1;
 800836e:	4b08      	ldr	r3, [pc, #32]	; (8008390 <ulTaskNotifyTake+0x88>)
 8008370:	681b      	ldr	r3, [r3, #0]
 8008372:	68fa      	ldr	r2, [r7, #12]
 8008374:	3a01      	subs	r2, #1
 8008376:	655a      	str	r2, [r3, #84]	; 0x54
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			pxCurrentTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 8008378:	4b05      	ldr	r3, [pc, #20]	; (8008390 <ulTaskNotifyTake+0x88>)
 800837a:	681b      	ldr	r3, [r3, #0]
 800837c:	2200      	movs	r2, #0
 800837e:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58
		}
		taskEXIT_CRITICAL();
 8008382:	f000 fe53 	bl	800902c <vPortExitCritical>

		return ulReturn;
 8008386:	68fb      	ldr	r3, [r7, #12]
	}
 8008388:	4618      	mov	r0, r3
 800838a:	3710      	adds	r7, #16
 800838c:	46bd      	mov	sp, r7
 800838e:	bd80      	pop	{r7, pc}
 8008390:	200009c8 	.word	0x200009c8
 8008394:	e000ed04 	.word	0xe000ed04

08008398 <xTaskGenericNotify>:
/*-----------------------------------------------------------*/

#if( configUSE_TASK_NOTIFICATIONS == 1 )

	BaseType_t xTaskGenericNotify( TaskHandle_t xTaskToNotify, uint32_t ulValue, eNotifyAction eAction, uint32_t *pulPreviousNotificationValue )
	{
 8008398:	b580      	push	{r7, lr}
 800839a:	b08a      	sub	sp, #40	; 0x28
 800839c:	af00      	add	r7, sp, #0
 800839e:	60f8      	str	r0, [r7, #12]
 80083a0:	60b9      	str	r1, [r7, #8]
 80083a2:	603b      	str	r3, [r7, #0]
 80083a4:	4613      	mov	r3, r2
 80083a6:	71fb      	strb	r3, [r7, #7]
	TCB_t * pxTCB;
	BaseType_t xReturn = pdPASS;
 80083a8:	2301      	movs	r3, #1
 80083aa:	627b      	str	r3, [r7, #36]	; 0x24
	uint8_t ucOriginalNotifyState;

		configASSERT( xTaskToNotify );
 80083ac:	68fb      	ldr	r3, [r7, #12]
 80083ae:	2b00      	cmp	r3, #0
 80083b0:	d10a      	bne.n	80083c8 <xTaskGenericNotify+0x30>
	__asm volatile
 80083b2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80083b6:	f383 8811 	msr	BASEPRI, r3
 80083ba:	f3bf 8f6f 	isb	sy
 80083be:	f3bf 8f4f 	dsb	sy
 80083c2:	61bb      	str	r3, [r7, #24]
}
 80083c4:	bf00      	nop
 80083c6:	e7fe      	b.n	80083c6 <xTaskGenericNotify+0x2e>
		pxTCB = ( TCB_t * ) xTaskToNotify;
 80083c8:	68fb      	ldr	r3, [r7, #12]
 80083ca:	623b      	str	r3, [r7, #32]

		taskENTER_CRITICAL();
 80083cc:	f000 fdfe 	bl	8008fcc <vPortEnterCritical>
		{
			if( pulPreviousNotificationValue != NULL )
 80083d0:	683b      	ldr	r3, [r7, #0]
 80083d2:	2b00      	cmp	r3, #0
 80083d4:	d003      	beq.n	80083de <xTaskGenericNotify+0x46>
			{
				*pulPreviousNotificationValue = pxTCB->ulNotifiedValue;
 80083d6:	6a3b      	ldr	r3, [r7, #32]
 80083d8:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 80083da:	683b      	ldr	r3, [r7, #0]
 80083dc:	601a      	str	r2, [r3, #0]
			}

			ucOriginalNotifyState = pxTCB->ucNotifyState;
 80083de:	6a3b      	ldr	r3, [r7, #32]
 80083e0:	f893 3058 	ldrb.w	r3, [r3, #88]	; 0x58
 80083e4:	77fb      	strb	r3, [r7, #31]

			pxTCB->ucNotifyState = taskNOTIFICATION_RECEIVED;
 80083e6:	6a3b      	ldr	r3, [r7, #32]
 80083e8:	2202      	movs	r2, #2
 80083ea:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58

			switch( eAction )
 80083ee:	79fb      	ldrb	r3, [r7, #7]
 80083f0:	2b04      	cmp	r3, #4
 80083f2:	d828      	bhi.n	8008446 <xTaskGenericNotify+0xae>
 80083f4:	a201      	add	r2, pc, #4	; (adr r2, 80083fc <xTaskGenericNotify+0x64>)
 80083f6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80083fa:	bf00      	nop
 80083fc:	08008447 	.word	0x08008447
 8008400:	08008411 	.word	0x08008411
 8008404:	0800841f 	.word	0x0800841f
 8008408:	0800842b 	.word	0x0800842b
 800840c:	08008433 	.word	0x08008433
			{
				case eSetBits	:
					pxTCB->ulNotifiedValue |= ulValue;
 8008410:	6a3b      	ldr	r3, [r7, #32]
 8008412:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8008414:	68bb      	ldr	r3, [r7, #8]
 8008416:	431a      	orrs	r2, r3
 8008418:	6a3b      	ldr	r3, [r7, #32]
 800841a:	655a      	str	r2, [r3, #84]	; 0x54
					break;
 800841c:	e013      	b.n	8008446 <xTaskGenericNotify+0xae>

				case eIncrement	:
					( pxTCB->ulNotifiedValue )++;
 800841e:	6a3b      	ldr	r3, [r7, #32]
 8008420:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8008422:	1c5a      	adds	r2, r3, #1
 8008424:	6a3b      	ldr	r3, [r7, #32]
 8008426:	655a      	str	r2, [r3, #84]	; 0x54
					break;
 8008428:	e00d      	b.n	8008446 <xTaskGenericNotify+0xae>

				case eSetValueWithOverwrite	:
					pxTCB->ulNotifiedValue = ulValue;
 800842a:	6a3b      	ldr	r3, [r7, #32]
 800842c:	68ba      	ldr	r2, [r7, #8]
 800842e:	655a      	str	r2, [r3, #84]	; 0x54
					break;
 8008430:	e009      	b.n	8008446 <xTaskGenericNotify+0xae>

				case eSetValueWithoutOverwrite :
					if( ucOriginalNotifyState != taskNOTIFICATION_RECEIVED )
 8008432:	7ffb      	ldrb	r3, [r7, #31]
 8008434:	2b02      	cmp	r3, #2
 8008436:	d003      	beq.n	8008440 <xTaskGenericNotify+0xa8>
					{
						pxTCB->ulNotifiedValue = ulValue;
 8008438:	6a3b      	ldr	r3, [r7, #32]
 800843a:	68ba      	ldr	r2, [r7, #8]
 800843c:	655a      	str	r2, [r3, #84]	; 0x54
					else
					{
						/* The value could not be written to the task. */
						xReturn = pdFAIL;
					}
					break;
 800843e:	e001      	b.n	8008444 <xTaskGenericNotify+0xac>
						xReturn = pdFAIL;
 8008440:	2300      	movs	r3, #0
 8008442:	627b      	str	r3, [r7, #36]	; 0x24
					break;
 8008444:	bf00      	nop

			traceTASK_NOTIFY();

			/* If the task is in the blocked state specifically to wait for a
			notification then unblock it now. */
			if( ucOriginalNotifyState == taskWAITING_NOTIFICATION )
 8008446:	7ffb      	ldrb	r3, [r7, #31]
 8008448:	2b01      	cmp	r3, #1
 800844a:	d13a      	bne.n	80084c2 <xTaskGenericNotify+0x12a>
			{
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800844c:	6a3b      	ldr	r3, [r7, #32]
 800844e:	3304      	adds	r3, #4
 8008450:	4618      	mov	r0, r3
 8008452:	f7fe f875 	bl	8006540 <uxListRemove>
				prvAddTaskToReadyList( pxTCB );
 8008456:	6a3b      	ldr	r3, [r7, #32]
 8008458:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800845a:	4b1d      	ldr	r3, [pc, #116]	; (80084d0 <xTaskGenericNotify+0x138>)
 800845c:	681b      	ldr	r3, [r3, #0]
 800845e:	429a      	cmp	r2, r3
 8008460:	d903      	bls.n	800846a <xTaskGenericNotify+0xd2>
 8008462:	6a3b      	ldr	r3, [r7, #32]
 8008464:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008466:	4a1a      	ldr	r2, [pc, #104]	; (80084d0 <xTaskGenericNotify+0x138>)
 8008468:	6013      	str	r3, [r2, #0]
 800846a:	6a3b      	ldr	r3, [r7, #32]
 800846c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800846e:	4613      	mov	r3, r2
 8008470:	009b      	lsls	r3, r3, #2
 8008472:	4413      	add	r3, r2
 8008474:	009b      	lsls	r3, r3, #2
 8008476:	4a17      	ldr	r2, [pc, #92]	; (80084d4 <xTaskGenericNotify+0x13c>)
 8008478:	441a      	add	r2, r3
 800847a:	6a3b      	ldr	r3, [r7, #32]
 800847c:	3304      	adds	r3, #4
 800847e:	4619      	mov	r1, r3
 8008480:	4610      	mov	r0, r2
 8008482:	f7fe f802 	bl	800648a <vListInsertEnd>

				/* The task should not have been on an event list. */
				configASSERT( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) == NULL );
 8008486:	6a3b      	ldr	r3, [r7, #32]
 8008488:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800848a:	2b00      	cmp	r3, #0
 800848c:	d00a      	beq.n	80084a4 <xTaskGenericNotify+0x10c>
	__asm volatile
 800848e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008492:	f383 8811 	msr	BASEPRI, r3
 8008496:	f3bf 8f6f 	isb	sy
 800849a:	f3bf 8f4f 	dsb	sy
 800849e:	617b      	str	r3, [r7, #20]
}
 80084a0:	bf00      	nop
 80084a2:	e7fe      	b.n	80084a2 <xTaskGenericNotify+0x10a>
					earliest possible time. */
					prvResetNextTaskUnblockTime();
				}
				#endif

				if( pxTCB->uxPriority > pxCurrentTCB->uxPriority )
 80084a4:	6a3b      	ldr	r3, [r7, #32]
 80084a6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80084a8:	4b0b      	ldr	r3, [pc, #44]	; (80084d8 <xTaskGenericNotify+0x140>)
 80084aa:	681b      	ldr	r3, [r3, #0]
 80084ac:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80084ae:	429a      	cmp	r2, r3
 80084b0:	d907      	bls.n	80084c2 <xTaskGenericNotify+0x12a>
				{
					/* The notified task has a priority above the currently
					executing task so a yield is required. */
					taskYIELD_IF_USING_PREEMPTION();
 80084b2:	4b0a      	ldr	r3, [pc, #40]	; (80084dc <xTaskGenericNotify+0x144>)
 80084b4:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80084b8:	601a      	str	r2, [r3, #0]
 80084ba:	f3bf 8f4f 	dsb	sy
 80084be:	f3bf 8f6f 	isb	sy
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
		taskEXIT_CRITICAL();
 80084c2:	f000 fdb3 	bl	800902c <vPortExitCritical>

		return xReturn;
 80084c6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
	}
 80084c8:	4618      	mov	r0, r3
 80084ca:	3728      	adds	r7, #40	; 0x28
 80084cc:	46bd      	mov	sp, r7
 80084ce:	bd80      	pop	{r7, pc}
 80084d0:	20000ea4 	.word	0x20000ea4
 80084d4:	200009cc 	.word	0x200009cc
 80084d8:	200009c8 	.word	0x200009c8
 80084dc:	e000ed04 	.word	0xe000ed04

080084e0 <xTaskGenericNotifyFromISR>:
/*-----------------------------------------------------------*/

#if( configUSE_TASK_NOTIFICATIONS == 1 )

	BaseType_t xTaskGenericNotifyFromISR( TaskHandle_t xTaskToNotify, uint32_t ulValue, eNotifyAction eAction, uint32_t *pulPreviousNotificationValue, BaseType_t *pxHigherPriorityTaskWoken )
	{
 80084e0:	b580      	push	{r7, lr}
 80084e2:	b08e      	sub	sp, #56	; 0x38
 80084e4:	af00      	add	r7, sp, #0
 80084e6:	60f8      	str	r0, [r7, #12]
 80084e8:	60b9      	str	r1, [r7, #8]
 80084ea:	603b      	str	r3, [r7, #0]
 80084ec:	4613      	mov	r3, r2
 80084ee:	71fb      	strb	r3, [r7, #7]
	TCB_t * pxTCB;
	uint8_t ucOriginalNotifyState;
	BaseType_t xReturn = pdPASS;
 80084f0:	2301      	movs	r3, #1
 80084f2:	637b      	str	r3, [r7, #52]	; 0x34
	UBaseType_t uxSavedInterruptStatus;

		configASSERT( xTaskToNotify );
 80084f4:	68fb      	ldr	r3, [r7, #12]
 80084f6:	2b00      	cmp	r3, #0
 80084f8:	d10a      	bne.n	8008510 <xTaskGenericNotifyFromISR+0x30>
	__asm volatile
 80084fa:	f04f 0350 	mov.w	r3, #80	; 0x50
 80084fe:	f383 8811 	msr	BASEPRI, r3
 8008502:	f3bf 8f6f 	isb	sy
 8008506:	f3bf 8f4f 	dsb	sy
 800850a:	627b      	str	r3, [r7, #36]	; 0x24
}
 800850c:	bf00      	nop
 800850e:	e7fe      	b.n	800850e <xTaskGenericNotifyFromISR+0x2e>
		below the maximum system call interrupt priority.  FreeRTOS maintains a
		separate interrupt safe API to ensure interrupt entry is as fast and as
		simple as possible.  More information (albeit Cortex-M specific) is
		provided on the following link:
		http://www.freertos.org/RTOS-Cortex-M3-M4.html */
		portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8008510:	f000 fe1e 	bl	8009150 <vPortValidateInterruptPriority>

		pxTCB = ( TCB_t * ) xTaskToNotify;
 8008514:	68fb      	ldr	r3, [r7, #12]
 8008516:	633b      	str	r3, [r7, #48]	; 0x30
	__asm volatile
 8008518:	f3ef 8211 	mrs	r2, BASEPRI
 800851c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008520:	f383 8811 	msr	BASEPRI, r3
 8008524:	f3bf 8f6f 	isb	sy
 8008528:	f3bf 8f4f 	dsb	sy
 800852c:	623a      	str	r2, [r7, #32]
 800852e:	61fb      	str	r3, [r7, #28]
	return ulOriginalBASEPRI;
 8008530:	6a3b      	ldr	r3, [r7, #32]

		uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8008532:	62fb      	str	r3, [r7, #44]	; 0x2c
		{
			if( pulPreviousNotificationValue != NULL )
 8008534:	683b      	ldr	r3, [r7, #0]
 8008536:	2b00      	cmp	r3, #0
 8008538:	d003      	beq.n	8008542 <xTaskGenericNotifyFromISR+0x62>
			{
				*pulPreviousNotificationValue = pxTCB->ulNotifiedValue;
 800853a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800853c:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800853e:	683b      	ldr	r3, [r7, #0]
 8008540:	601a      	str	r2, [r3, #0]
			}

			ucOriginalNotifyState = pxTCB->ucNotifyState;
 8008542:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008544:	f893 3058 	ldrb.w	r3, [r3, #88]	; 0x58
 8008548:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
			pxTCB->ucNotifyState = taskNOTIFICATION_RECEIVED;
 800854c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800854e:	2202      	movs	r2, #2
 8008550:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58

			switch( eAction )
 8008554:	79fb      	ldrb	r3, [r7, #7]
 8008556:	2b04      	cmp	r3, #4
 8008558:	d828      	bhi.n	80085ac <xTaskGenericNotifyFromISR+0xcc>
 800855a:	a201      	add	r2, pc, #4	; (adr r2, 8008560 <xTaskGenericNotifyFromISR+0x80>)
 800855c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008560:	080085ad 	.word	0x080085ad
 8008564:	08008575 	.word	0x08008575
 8008568:	08008583 	.word	0x08008583
 800856c:	0800858f 	.word	0x0800858f
 8008570:	08008597 	.word	0x08008597
			{
				case eSetBits	:
					pxTCB->ulNotifiedValue |= ulValue;
 8008574:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008576:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8008578:	68bb      	ldr	r3, [r7, #8]
 800857a:	431a      	orrs	r2, r3
 800857c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800857e:	655a      	str	r2, [r3, #84]	; 0x54
					break;
 8008580:	e014      	b.n	80085ac <xTaskGenericNotifyFromISR+0xcc>

				case eIncrement	:
					( pxTCB->ulNotifiedValue )++;
 8008582:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008584:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8008586:	1c5a      	adds	r2, r3, #1
 8008588:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800858a:	655a      	str	r2, [r3, #84]	; 0x54
					break;
 800858c:	e00e      	b.n	80085ac <xTaskGenericNotifyFromISR+0xcc>

				case eSetValueWithOverwrite	:
					pxTCB->ulNotifiedValue = ulValue;
 800858e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008590:	68ba      	ldr	r2, [r7, #8]
 8008592:	655a      	str	r2, [r3, #84]	; 0x54
					break;
 8008594:	e00a      	b.n	80085ac <xTaskGenericNotifyFromISR+0xcc>

				case eSetValueWithoutOverwrite :
					if( ucOriginalNotifyState != taskNOTIFICATION_RECEIVED )
 8008596:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 800859a:	2b02      	cmp	r3, #2
 800859c:	d003      	beq.n	80085a6 <xTaskGenericNotifyFromISR+0xc6>
					{
						pxTCB->ulNotifiedValue = ulValue;
 800859e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80085a0:	68ba      	ldr	r2, [r7, #8]
 80085a2:	655a      	str	r2, [r3, #84]	; 0x54
					else
					{
						/* The value could not be written to the task. */
						xReturn = pdFAIL;
					}
					break;
 80085a4:	e001      	b.n	80085aa <xTaskGenericNotifyFromISR+0xca>
						xReturn = pdFAIL;
 80085a6:	2300      	movs	r3, #0
 80085a8:	637b      	str	r3, [r7, #52]	; 0x34
					break;
 80085aa:	bf00      	nop

			traceTASK_NOTIFY_FROM_ISR();

			/* If the task is in the blocked state specifically to wait for a
			notification then unblock it now. */
			if( ucOriginalNotifyState == taskWAITING_NOTIFICATION )
 80085ac:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 80085b0:	2b01      	cmp	r3, #1
 80085b2:	d147      	bne.n	8008644 <xTaskGenericNotifyFromISR+0x164>
			{
				/* The task should not have been on an event list. */
				configASSERT( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) == NULL );
 80085b4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80085b6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80085b8:	2b00      	cmp	r3, #0
 80085ba:	d00a      	beq.n	80085d2 <xTaskGenericNotifyFromISR+0xf2>
	__asm volatile
 80085bc:	f04f 0350 	mov.w	r3, #80	; 0x50
 80085c0:	f383 8811 	msr	BASEPRI, r3
 80085c4:	f3bf 8f6f 	isb	sy
 80085c8:	f3bf 8f4f 	dsb	sy
 80085cc:	61bb      	str	r3, [r7, #24]
}
 80085ce:	bf00      	nop
 80085d0:	e7fe      	b.n	80085d0 <xTaskGenericNotifyFromISR+0xf0>

				if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80085d2:	4b22      	ldr	r3, [pc, #136]	; (800865c <xTaskGenericNotifyFromISR+0x17c>)
 80085d4:	681b      	ldr	r3, [r3, #0]
 80085d6:	2b00      	cmp	r3, #0
 80085d8:	d11d      	bne.n	8008616 <xTaskGenericNotifyFromISR+0x136>
				{
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 80085da:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80085dc:	3304      	adds	r3, #4
 80085de:	4618      	mov	r0, r3
 80085e0:	f7fd ffae 	bl	8006540 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 80085e4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80085e6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80085e8:	4b1d      	ldr	r3, [pc, #116]	; (8008660 <xTaskGenericNotifyFromISR+0x180>)
 80085ea:	681b      	ldr	r3, [r3, #0]
 80085ec:	429a      	cmp	r2, r3
 80085ee:	d903      	bls.n	80085f8 <xTaskGenericNotifyFromISR+0x118>
 80085f0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80085f2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80085f4:	4a1a      	ldr	r2, [pc, #104]	; (8008660 <xTaskGenericNotifyFromISR+0x180>)
 80085f6:	6013      	str	r3, [r2, #0]
 80085f8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80085fa:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80085fc:	4613      	mov	r3, r2
 80085fe:	009b      	lsls	r3, r3, #2
 8008600:	4413      	add	r3, r2
 8008602:	009b      	lsls	r3, r3, #2
 8008604:	4a17      	ldr	r2, [pc, #92]	; (8008664 <xTaskGenericNotifyFromISR+0x184>)
 8008606:	441a      	add	r2, r3
 8008608:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800860a:	3304      	adds	r3, #4
 800860c:	4619      	mov	r1, r3
 800860e:	4610      	mov	r0, r2
 8008610:	f7fd ff3b 	bl	800648a <vListInsertEnd>
 8008614:	e005      	b.n	8008622 <xTaskGenericNotifyFromISR+0x142>
				}
				else
				{
					/* The delayed and ready lists cannot be accessed, so hold
					this task pending until the scheduler is resumed. */
					vListInsertEnd( &( xPendingReadyList ), &( pxTCB->xEventListItem ) );
 8008616:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008618:	3318      	adds	r3, #24
 800861a:	4619      	mov	r1, r3
 800861c:	4812      	ldr	r0, [pc, #72]	; (8008668 <xTaskGenericNotifyFromISR+0x188>)
 800861e:	f7fd ff34 	bl	800648a <vListInsertEnd>
				}

				if( pxTCB->uxPriority > pxCurrentTCB->uxPriority )
 8008622:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008624:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008626:	4b11      	ldr	r3, [pc, #68]	; (800866c <xTaskGenericNotifyFromISR+0x18c>)
 8008628:	681b      	ldr	r3, [r3, #0]
 800862a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800862c:	429a      	cmp	r2, r3
 800862e:	d909      	bls.n	8008644 <xTaskGenericNotifyFromISR+0x164>
				{
					/* The notified task has a priority above the currently
					executing task so a yield is required. */
					if( pxHigherPriorityTaskWoken != NULL )
 8008630:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8008632:	2b00      	cmp	r3, #0
 8008634:	d003      	beq.n	800863e <xTaskGenericNotifyFromISR+0x15e>
					{
						*pxHigherPriorityTaskWoken = pdTRUE;
 8008636:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8008638:	2201      	movs	r2, #1
 800863a:	601a      	str	r2, [r3, #0]
 800863c:	e002      	b.n	8008644 <xTaskGenericNotifyFromISR+0x164>
					else
					{
						/* Mark that a yield is pending in case the user is not
						using the "xHigherPriorityTaskWoken" parameter to an ISR
						safe FreeRTOS function. */
						xYieldPending = pdTRUE;
 800863e:	4b0c      	ldr	r3, [pc, #48]	; (8008670 <xTaskGenericNotifyFromISR+0x190>)
 8008640:	2201      	movs	r2, #1
 8008642:	601a      	str	r2, [r3, #0]
 8008644:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008646:	617b      	str	r3, [r7, #20]
	__asm volatile
 8008648:	697b      	ldr	r3, [r7, #20]
 800864a:	f383 8811 	msr	BASEPRI, r3
}
 800864e:	bf00      	nop
				}
			}
		}
		portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

		return xReturn;
 8008650:	6b7b      	ldr	r3, [r7, #52]	; 0x34
	}
 8008652:	4618      	mov	r0, r3
 8008654:	3738      	adds	r7, #56	; 0x38
 8008656:	46bd      	mov	sp, r7
 8008658:	bd80      	pop	{r7, pc}
 800865a:	bf00      	nop
 800865c:	20000ec4 	.word	0x20000ec4
 8008660:	20000ea4 	.word	0x20000ea4
 8008664:	200009cc 	.word	0x200009cc
 8008668:	20000e5c 	.word	0x20000e5c
 800866c:	200009c8 	.word	0x200009c8
 8008670:	20000eb0 	.word	0x20000eb0

08008674 <prvAddCurrentTaskToDelayedList>:
#endif /* configUSE_TASK_NOTIFICATIONS */
/*-----------------------------------------------------------*/


static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 8008674:	b580      	push	{r7, lr}
 8008676:	b084      	sub	sp, #16
 8008678:	af00      	add	r7, sp, #0
 800867a:	6078      	str	r0, [r7, #4]
 800867c:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 800867e:	4b21      	ldr	r3, [pc, #132]	; (8008704 <prvAddCurrentTaskToDelayedList+0x90>)
 8008680:	681b      	ldr	r3, [r3, #0]
 8008682:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8008684:	4b20      	ldr	r3, [pc, #128]	; (8008708 <prvAddCurrentTaskToDelayedList+0x94>)
 8008686:	681b      	ldr	r3, [r3, #0]
 8008688:	3304      	adds	r3, #4
 800868a:	4618      	mov	r0, r3
 800868c:	f7fd ff58 	bl	8006540 <uxListRemove>
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 8008690:	687b      	ldr	r3, [r7, #4]
 8008692:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008696:	d10a      	bne.n	80086ae <prvAddCurrentTaskToDelayedList+0x3a>
 8008698:	683b      	ldr	r3, [r7, #0]
 800869a:	2b00      	cmp	r3, #0
 800869c:	d007      	beq.n	80086ae <prvAddCurrentTaskToDelayedList+0x3a>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800869e:	4b1a      	ldr	r3, [pc, #104]	; (8008708 <prvAddCurrentTaskToDelayedList+0x94>)
 80086a0:	681b      	ldr	r3, [r3, #0]
 80086a2:	3304      	adds	r3, #4
 80086a4:	4619      	mov	r1, r3
 80086a6:	4819      	ldr	r0, [pc, #100]	; (800870c <prvAddCurrentTaskToDelayedList+0x98>)
 80086a8:	f7fd feef 	bl	800648a <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 80086ac:	e026      	b.n	80086fc <prvAddCurrentTaskToDelayedList+0x88>
			xTimeToWake = xConstTickCount + xTicksToWait;
 80086ae:	68fa      	ldr	r2, [r7, #12]
 80086b0:	687b      	ldr	r3, [r7, #4]
 80086b2:	4413      	add	r3, r2
 80086b4:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 80086b6:	4b14      	ldr	r3, [pc, #80]	; (8008708 <prvAddCurrentTaskToDelayedList+0x94>)
 80086b8:	681b      	ldr	r3, [r3, #0]
 80086ba:	68ba      	ldr	r2, [r7, #8]
 80086bc:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 80086be:	68ba      	ldr	r2, [r7, #8]
 80086c0:	68fb      	ldr	r3, [r7, #12]
 80086c2:	429a      	cmp	r2, r3
 80086c4:	d209      	bcs.n	80086da <prvAddCurrentTaskToDelayedList+0x66>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 80086c6:	4b12      	ldr	r3, [pc, #72]	; (8008710 <prvAddCurrentTaskToDelayedList+0x9c>)
 80086c8:	681a      	ldr	r2, [r3, #0]
 80086ca:	4b0f      	ldr	r3, [pc, #60]	; (8008708 <prvAddCurrentTaskToDelayedList+0x94>)
 80086cc:	681b      	ldr	r3, [r3, #0]
 80086ce:	3304      	adds	r3, #4
 80086d0:	4619      	mov	r1, r3
 80086d2:	4610      	mov	r0, r2
 80086d4:	f7fd fefc 	bl	80064d0 <vListInsert>
}
 80086d8:	e010      	b.n	80086fc <prvAddCurrentTaskToDelayedList+0x88>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 80086da:	4b0e      	ldr	r3, [pc, #56]	; (8008714 <prvAddCurrentTaskToDelayedList+0xa0>)
 80086dc:	681a      	ldr	r2, [r3, #0]
 80086de:	4b0a      	ldr	r3, [pc, #40]	; (8008708 <prvAddCurrentTaskToDelayedList+0x94>)
 80086e0:	681b      	ldr	r3, [r3, #0]
 80086e2:	3304      	adds	r3, #4
 80086e4:	4619      	mov	r1, r3
 80086e6:	4610      	mov	r0, r2
 80086e8:	f7fd fef2 	bl	80064d0 <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 80086ec:	4b0a      	ldr	r3, [pc, #40]	; (8008718 <prvAddCurrentTaskToDelayedList+0xa4>)
 80086ee:	681b      	ldr	r3, [r3, #0]
 80086f0:	68ba      	ldr	r2, [r7, #8]
 80086f2:	429a      	cmp	r2, r3
 80086f4:	d202      	bcs.n	80086fc <prvAddCurrentTaskToDelayedList+0x88>
					xNextTaskUnblockTime = xTimeToWake;
 80086f6:	4a08      	ldr	r2, [pc, #32]	; (8008718 <prvAddCurrentTaskToDelayedList+0xa4>)
 80086f8:	68bb      	ldr	r3, [r7, #8]
 80086fa:	6013      	str	r3, [r2, #0]
}
 80086fc:	bf00      	nop
 80086fe:	3710      	adds	r7, #16
 8008700:	46bd      	mov	sp, r7
 8008702:	bd80      	pop	{r7, pc}
 8008704:	20000ea0 	.word	0x20000ea0
 8008708:	200009c8 	.word	0x200009c8
 800870c:	20000e88 	.word	0x20000e88
 8008710:	20000e58 	.word	0x20000e58
 8008714:	20000e54 	.word	0x20000e54
 8008718:	20000ebc 	.word	0x20000ebc

0800871c <xTimerCreateTimerTask>:
									TimerCallbackFunction_t pxCallbackFunction,
									Timer_t *pxNewTimer ) PRIVILEGED_FUNCTION;
/*-----------------------------------------------------------*/

BaseType_t xTimerCreateTimerTask( void )
{
 800871c:	b580      	push	{r7, lr}
 800871e:	b08a      	sub	sp, #40	; 0x28
 8008720:	af04      	add	r7, sp, #16
BaseType_t xReturn = pdFAIL;
 8008722:	2300      	movs	r3, #0
 8008724:	617b      	str	r3, [r7, #20]

	/* This function is called when the scheduler is started if
	configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
	timer service task has been created/initialised.  If timers have already
	been created then the initialisation will already have been performed. */
	prvCheckForValidListAndQueue();
 8008726:	f000 fb1f 	bl	8008d68 <prvCheckForValidListAndQueue>

	if( xTimerQueue != NULL )
 800872a:	4b1c      	ldr	r3, [pc, #112]	; (800879c <xTimerCreateTimerTask+0x80>)
 800872c:	681b      	ldr	r3, [r3, #0]
 800872e:	2b00      	cmp	r3, #0
 8008730:	d021      	beq.n	8008776 <xTimerCreateTimerTask+0x5a>
	{
		#if( configSUPPORT_STATIC_ALLOCATION == 1 )
		{
			StaticTask_t *pxTimerTaskTCBBuffer = NULL;
 8008732:	2300      	movs	r3, #0
 8008734:	60fb      	str	r3, [r7, #12]
			StackType_t *pxTimerTaskStackBuffer = NULL;
 8008736:	2300      	movs	r3, #0
 8008738:	60bb      	str	r3, [r7, #8]
			uint32_t ulTimerTaskStackSize;

			vApplicationGetTimerTaskMemory( &pxTimerTaskTCBBuffer, &pxTimerTaskStackBuffer, &ulTimerTaskStackSize );
 800873a:	1d3a      	adds	r2, r7, #4
 800873c:	f107 0108 	add.w	r1, r7, #8
 8008740:	f107 030c 	add.w	r3, r7, #12
 8008744:	4618      	mov	r0, r3
 8008746:	f7fd fe5b 	bl	8006400 <vApplicationGetTimerTaskMemory>
			xTimerTaskHandle = xTaskCreateStatic(	prvTimerTask,
 800874a:	6879      	ldr	r1, [r7, #4]
 800874c:	68bb      	ldr	r3, [r7, #8]
 800874e:	68fa      	ldr	r2, [r7, #12]
 8008750:	9202      	str	r2, [sp, #8]
 8008752:	9301      	str	r3, [sp, #4]
 8008754:	2302      	movs	r3, #2
 8008756:	9300      	str	r3, [sp, #0]
 8008758:	2300      	movs	r3, #0
 800875a:	460a      	mov	r2, r1
 800875c:	4910      	ldr	r1, [pc, #64]	; (80087a0 <xTimerCreateTimerTask+0x84>)
 800875e:	4811      	ldr	r0, [pc, #68]	; (80087a4 <xTimerCreateTimerTask+0x88>)
 8008760:	f7fe fe14 	bl	800738c <xTaskCreateStatic>
 8008764:	4603      	mov	r3, r0
 8008766:	4a10      	ldr	r2, [pc, #64]	; (80087a8 <xTimerCreateTimerTask+0x8c>)
 8008768:	6013      	str	r3, [r2, #0]
													NULL,
													( ( UBaseType_t ) configTIMER_TASK_PRIORITY ) | portPRIVILEGE_BIT,
													pxTimerTaskStackBuffer,
													pxTimerTaskTCBBuffer );

			if( xTimerTaskHandle != NULL )
 800876a:	4b0f      	ldr	r3, [pc, #60]	; (80087a8 <xTimerCreateTimerTask+0x8c>)
 800876c:	681b      	ldr	r3, [r3, #0]
 800876e:	2b00      	cmp	r3, #0
 8008770:	d001      	beq.n	8008776 <xTimerCreateTimerTask+0x5a>
			{
				xReturn = pdPASS;
 8008772:	2301      	movs	r3, #1
 8008774:	617b      	str	r3, [r7, #20]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	configASSERT( xReturn );
 8008776:	697b      	ldr	r3, [r7, #20]
 8008778:	2b00      	cmp	r3, #0
 800877a:	d10a      	bne.n	8008792 <xTimerCreateTimerTask+0x76>
	__asm volatile
 800877c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008780:	f383 8811 	msr	BASEPRI, r3
 8008784:	f3bf 8f6f 	isb	sy
 8008788:	f3bf 8f4f 	dsb	sy
 800878c:	613b      	str	r3, [r7, #16]
}
 800878e:	bf00      	nop
 8008790:	e7fe      	b.n	8008790 <xTimerCreateTimerTask+0x74>
	return xReturn;
 8008792:	697b      	ldr	r3, [r7, #20]
}
 8008794:	4618      	mov	r0, r3
 8008796:	3718      	adds	r7, #24
 8008798:	46bd      	mov	sp, r7
 800879a:	bd80      	pop	{r7, pc}
 800879c:	20000ef8 	.word	0x20000ef8
 80087a0:	0800968c 	.word	0x0800968c
 80087a4:	08008971 	.word	0x08008971
 80087a8:	20000efc 	.word	0x20000efc

080087ac <xTimerCreate>:
	TimerHandle_t xTimerCreate(	const char * const pcTimerName,			/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
								const TickType_t xTimerPeriodInTicks,
								const UBaseType_t uxAutoReload,
								void * const pvTimerID,
								TimerCallbackFunction_t pxCallbackFunction )
	{
 80087ac:	b580      	push	{r7, lr}
 80087ae:	b088      	sub	sp, #32
 80087b0:	af02      	add	r7, sp, #8
 80087b2:	60f8      	str	r0, [r7, #12]
 80087b4:	60b9      	str	r1, [r7, #8]
 80087b6:	607a      	str	r2, [r7, #4]
 80087b8:	603b      	str	r3, [r7, #0]
	Timer_t *pxNewTimer;

		pxNewTimer = ( Timer_t * ) pvPortMalloc( sizeof( Timer_t ) );
 80087ba:	2030      	movs	r0, #48	; 0x30
 80087bc:	f000 fd06 	bl	80091cc <pvPortMalloc>
 80087c0:	6178      	str	r0, [r7, #20]

		if( pxNewTimer != NULL )
 80087c2:	697b      	ldr	r3, [r7, #20]
 80087c4:	2b00      	cmp	r3, #0
 80087c6:	d00d      	beq.n	80087e4 <xTimerCreate+0x38>
		{
			prvInitialiseNewTimer( pcTimerName, xTimerPeriodInTicks, uxAutoReload, pvTimerID, pxCallbackFunction, pxNewTimer );
 80087c8:	697b      	ldr	r3, [r7, #20]
 80087ca:	9301      	str	r3, [sp, #4]
 80087cc:	6a3b      	ldr	r3, [r7, #32]
 80087ce:	9300      	str	r3, [sp, #0]
 80087d0:	683b      	ldr	r3, [r7, #0]
 80087d2:	687a      	ldr	r2, [r7, #4]
 80087d4:	68b9      	ldr	r1, [r7, #8]
 80087d6:	68f8      	ldr	r0, [r7, #12]
 80087d8:	f000 f809 	bl	80087ee <prvInitialiseNewTimer>
			#if( configSUPPORT_STATIC_ALLOCATION == 1 )
			{
				/* Timers can be created statically or dynamically, so note this
				timer was created dynamically in case the timer is later
				deleted. */
				pxNewTimer->ucStaticallyAllocated = pdFALSE;
 80087dc:	697b      	ldr	r3, [r7, #20]
 80087de:	2200      	movs	r2, #0
 80087e0:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */
		}

		return pxNewTimer;
 80087e4:	697b      	ldr	r3, [r7, #20]
	}
 80087e6:	4618      	mov	r0, r3
 80087e8:	3718      	adds	r7, #24
 80087ea:	46bd      	mov	sp, r7
 80087ec:	bd80      	pop	{r7, pc}

080087ee <prvInitialiseNewTimer>:
									const TickType_t xTimerPeriodInTicks,
									const UBaseType_t uxAutoReload,
									void * const pvTimerID,
									TimerCallbackFunction_t pxCallbackFunction,
									Timer_t *pxNewTimer )
{
 80087ee:	b580      	push	{r7, lr}
 80087f0:	b086      	sub	sp, #24
 80087f2:	af00      	add	r7, sp, #0
 80087f4:	60f8      	str	r0, [r7, #12]
 80087f6:	60b9      	str	r1, [r7, #8]
 80087f8:	607a      	str	r2, [r7, #4]
 80087fa:	603b      	str	r3, [r7, #0]
	/* 0 is not a valid value for xTimerPeriodInTicks. */
	configASSERT( ( xTimerPeriodInTicks > 0 ) );
 80087fc:	68bb      	ldr	r3, [r7, #8]
 80087fe:	2b00      	cmp	r3, #0
 8008800:	d10a      	bne.n	8008818 <prvInitialiseNewTimer+0x2a>
	__asm volatile
 8008802:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008806:	f383 8811 	msr	BASEPRI, r3
 800880a:	f3bf 8f6f 	isb	sy
 800880e:	f3bf 8f4f 	dsb	sy
 8008812:	617b      	str	r3, [r7, #20]
}
 8008814:	bf00      	nop
 8008816:	e7fe      	b.n	8008816 <prvInitialiseNewTimer+0x28>

	if( pxNewTimer != NULL )
 8008818:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800881a:	2b00      	cmp	r3, #0
 800881c:	d015      	beq.n	800884a <prvInitialiseNewTimer+0x5c>
	{
		/* Ensure the infrastructure used by the timer service task has been
		created/initialised. */
		prvCheckForValidListAndQueue();
 800881e:	f000 faa3 	bl	8008d68 <prvCheckForValidListAndQueue>

		/* Initialise the timer structure members using the function
		parameters. */
		pxNewTimer->pcTimerName = pcTimerName;
 8008822:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008824:	68fa      	ldr	r2, [r7, #12]
 8008826:	601a      	str	r2, [r3, #0]
		pxNewTimer->xTimerPeriodInTicks = xTimerPeriodInTicks;
 8008828:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800882a:	68ba      	ldr	r2, [r7, #8]
 800882c:	619a      	str	r2, [r3, #24]
		pxNewTimer->uxAutoReload = uxAutoReload;
 800882e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008830:	687a      	ldr	r2, [r7, #4]
 8008832:	61da      	str	r2, [r3, #28]
		pxNewTimer->pvTimerID = pvTimerID;
 8008834:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008836:	683a      	ldr	r2, [r7, #0]
 8008838:	621a      	str	r2, [r3, #32]
		pxNewTimer->pxCallbackFunction = pxCallbackFunction;
 800883a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800883c:	6a3a      	ldr	r2, [r7, #32]
 800883e:	625a      	str	r2, [r3, #36]	; 0x24
		vListInitialiseItem( &( pxNewTimer->xTimerListItem ) );
 8008840:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008842:	3304      	adds	r3, #4
 8008844:	4618      	mov	r0, r3
 8008846:	f7fd fe14 	bl	8006472 <vListInitialiseItem>
		traceTIMER_CREATE( pxNewTimer );
	}
}
 800884a:	bf00      	nop
 800884c:	3718      	adds	r7, #24
 800884e:	46bd      	mov	sp, r7
 8008850:	bd80      	pop	{r7, pc}
	...

08008854 <xTimerGenericCommand>:
/*-----------------------------------------------------------*/

BaseType_t xTimerGenericCommand( TimerHandle_t xTimer, const BaseType_t xCommandID, const TickType_t xOptionalValue, BaseType_t * const pxHigherPriorityTaskWoken, const TickType_t xTicksToWait )
{
 8008854:	b580      	push	{r7, lr}
 8008856:	b08a      	sub	sp, #40	; 0x28
 8008858:	af00      	add	r7, sp, #0
 800885a:	60f8      	str	r0, [r7, #12]
 800885c:	60b9      	str	r1, [r7, #8]
 800885e:	607a      	str	r2, [r7, #4]
 8008860:	603b      	str	r3, [r7, #0]
BaseType_t xReturn = pdFAIL;
 8008862:	2300      	movs	r3, #0
 8008864:	627b      	str	r3, [r7, #36]	; 0x24
DaemonTaskMessage_t xMessage;

	configASSERT( xTimer );
 8008866:	68fb      	ldr	r3, [r7, #12]
 8008868:	2b00      	cmp	r3, #0
 800886a:	d10a      	bne.n	8008882 <xTimerGenericCommand+0x2e>
	__asm volatile
 800886c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008870:	f383 8811 	msr	BASEPRI, r3
 8008874:	f3bf 8f6f 	isb	sy
 8008878:	f3bf 8f4f 	dsb	sy
 800887c:	623b      	str	r3, [r7, #32]
}
 800887e:	bf00      	nop
 8008880:	e7fe      	b.n	8008880 <xTimerGenericCommand+0x2c>

	/* Send a message to the timer service task to perform a particular action
	on a particular timer definition. */
	if( xTimerQueue != NULL )
 8008882:	4b1a      	ldr	r3, [pc, #104]	; (80088ec <xTimerGenericCommand+0x98>)
 8008884:	681b      	ldr	r3, [r3, #0]
 8008886:	2b00      	cmp	r3, #0
 8008888:	d02a      	beq.n	80088e0 <xTimerGenericCommand+0x8c>
	{
		/* Send a command to the timer service task to start the xTimer timer. */
		xMessage.xMessageID = xCommandID;
 800888a:	68bb      	ldr	r3, [r7, #8]
 800888c:	613b      	str	r3, [r7, #16]
		xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
 800888e:	687b      	ldr	r3, [r7, #4]
 8008890:	617b      	str	r3, [r7, #20]
		xMessage.u.xTimerParameters.pxTimer = ( Timer_t * ) xTimer;
 8008892:	68fb      	ldr	r3, [r7, #12]
 8008894:	61bb      	str	r3, [r7, #24]

		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 8008896:	68bb      	ldr	r3, [r7, #8]
 8008898:	2b05      	cmp	r3, #5
 800889a:	dc18      	bgt.n	80088ce <xTimerGenericCommand+0x7a>
		{
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 800889c:	f7ff fba0 	bl	8007fe0 <xTaskGetSchedulerState>
 80088a0:	4603      	mov	r3, r0
 80088a2:	2b02      	cmp	r3, #2
 80088a4:	d109      	bne.n	80088ba <xTimerGenericCommand+0x66>
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 80088a6:	4b11      	ldr	r3, [pc, #68]	; (80088ec <xTimerGenericCommand+0x98>)
 80088a8:	6818      	ldr	r0, [r3, #0]
 80088aa:	f107 0110 	add.w	r1, r7, #16
 80088ae:	2300      	movs	r3, #0
 80088b0:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80088b2:	f7fe f819 	bl	80068e8 <xQueueGenericSend>
 80088b6:	6278      	str	r0, [r7, #36]	; 0x24
 80088b8:	e012      	b.n	80088e0 <xTimerGenericCommand+0x8c>
			}
			else
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
 80088ba:	4b0c      	ldr	r3, [pc, #48]	; (80088ec <xTimerGenericCommand+0x98>)
 80088bc:	6818      	ldr	r0, [r3, #0]
 80088be:	f107 0110 	add.w	r1, r7, #16
 80088c2:	2300      	movs	r3, #0
 80088c4:	2200      	movs	r2, #0
 80088c6:	f7fe f80f 	bl	80068e8 <xQueueGenericSend>
 80088ca:	6278      	str	r0, [r7, #36]	; 0x24
 80088cc:	e008      	b.n	80088e0 <xTimerGenericCommand+0x8c>
			}
		}
		else
		{
			xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 80088ce:	4b07      	ldr	r3, [pc, #28]	; (80088ec <xTimerGenericCommand+0x98>)
 80088d0:	6818      	ldr	r0, [r3, #0]
 80088d2:	f107 0110 	add.w	r1, r7, #16
 80088d6:	2300      	movs	r3, #0
 80088d8:	683a      	ldr	r2, [r7, #0]
 80088da:	f7fe f903 	bl	8006ae4 <xQueueGenericSendFromISR>
 80088de:	6278      	str	r0, [r7, #36]	; 0x24
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	return xReturn;
 80088e0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 80088e2:	4618      	mov	r0, r3
 80088e4:	3728      	adds	r7, #40	; 0x28
 80088e6:	46bd      	mov	sp, r7
 80088e8:	bd80      	pop	{r7, pc}
 80088ea:	bf00      	nop
 80088ec:	20000ef8 	.word	0x20000ef8

080088f0 <prvProcessExpiredTimer>:
	return pxTimer->pcTimerName;
}
/*-----------------------------------------------------------*/

static void prvProcessExpiredTimer( const TickType_t xNextExpireTime, const TickType_t xTimeNow )
{
 80088f0:	b580      	push	{r7, lr}
 80088f2:	b088      	sub	sp, #32
 80088f4:	af02      	add	r7, sp, #8
 80088f6:	6078      	str	r0, [r7, #4]
 80088f8:	6039      	str	r1, [r7, #0]
BaseType_t xResult;
Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList );
 80088fa:	4b1c      	ldr	r3, [pc, #112]	; (800896c <prvProcessExpiredTimer+0x7c>)
 80088fc:	681b      	ldr	r3, [r3, #0]
 80088fe:	68db      	ldr	r3, [r3, #12]
 8008900:	68db      	ldr	r3, [r3, #12]
 8008902:	617b      	str	r3, [r7, #20]

	/* Remove the timer from the list of active timers.  A check has already
	been performed to ensure the list is not empty. */
	( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8008904:	697b      	ldr	r3, [r7, #20]
 8008906:	3304      	adds	r3, #4
 8008908:	4618      	mov	r0, r3
 800890a:	f7fd fe19 	bl	8006540 <uxListRemove>
	traceTIMER_EXPIRED( pxTimer );

	/* If the timer is an auto reload timer then calculate the next
	expiry time and re-insert the timer in the list of active timers. */
	if( pxTimer->uxAutoReload == ( UBaseType_t ) pdTRUE )
 800890e:	697b      	ldr	r3, [r7, #20]
 8008910:	69db      	ldr	r3, [r3, #28]
 8008912:	2b01      	cmp	r3, #1
 8008914:	d122      	bne.n	800895c <prvProcessExpiredTimer+0x6c>
	{
		/* The timer is inserted into a list using a time relative to anything
		other than the current time.  It will therefore be inserted into the
		correct list relative to the time this task thinks it is now. */
		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
 8008916:	697b      	ldr	r3, [r7, #20]
 8008918:	699a      	ldr	r2, [r3, #24]
 800891a:	687b      	ldr	r3, [r7, #4]
 800891c:	18d1      	adds	r1, r2, r3
 800891e:	687b      	ldr	r3, [r7, #4]
 8008920:	683a      	ldr	r2, [r7, #0]
 8008922:	6978      	ldr	r0, [r7, #20]
 8008924:	f000 f8c8 	bl	8008ab8 <prvInsertTimerInActiveList>
 8008928:	4603      	mov	r3, r0
 800892a:	2b00      	cmp	r3, #0
 800892c:	d016      	beq.n	800895c <prvProcessExpiredTimer+0x6c>
		{
			/* The timer expired before it was added to the active timer
			list.  Reload it now.  */
			xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 800892e:	2300      	movs	r3, #0
 8008930:	9300      	str	r3, [sp, #0]
 8008932:	2300      	movs	r3, #0
 8008934:	687a      	ldr	r2, [r7, #4]
 8008936:	2100      	movs	r1, #0
 8008938:	6978      	ldr	r0, [r7, #20]
 800893a:	f7ff ff8b 	bl	8008854 <xTimerGenericCommand>
 800893e:	6138      	str	r0, [r7, #16]
			configASSERT( xResult );
 8008940:	693b      	ldr	r3, [r7, #16]
 8008942:	2b00      	cmp	r3, #0
 8008944:	d10a      	bne.n	800895c <prvProcessExpiredTimer+0x6c>
	__asm volatile
 8008946:	f04f 0350 	mov.w	r3, #80	; 0x50
 800894a:	f383 8811 	msr	BASEPRI, r3
 800894e:	f3bf 8f6f 	isb	sy
 8008952:	f3bf 8f4f 	dsb	sy
 8008956:	60fb      	str	r3, [r7, #12]
}
 8008958:	bf00      	nop
 800895a:	e7fe      	b.n	800895a <prvProcessExpiredTimer+0x6a>
	{
		mtCOVERAGE_TEST_MARKER();
	}

	/* Call the timer callback. */
	pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800895c:	697b      	ldr	r3, [r7, #20]
 800895e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008960:	6978      	ldr	r0, [r7, #20]
 8008962:	4798      	blx	r3
}
 8008964:	bf00      	nop
 8008966:	3718      	adds	r7, #24
 8008968:	46bd      	mov	sp, r7
 800896a:	bd80      	pop	{r7, pc}
 800896c:	20000ef0 	.word	0x20000ef0

08008970 <prvTimerTask>:
/*-----------------------------------------------------------*/

static void prvTimerTask( void *pvParameters )
{
 8008970:	b580      	push	{r7, lr}
 8008972:	b084      	sub	sp, #16
 8008974:	af00      	add	r7, sp, #0
 8008976:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* Query the timers list to see if it contains any timers, and if so,
		obtain the time at which the next timer will expire. */
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 8008978:	f107 0308 	add.w	r3, r7, #8
 800897c:	4618      	mov	r0, r3
 800897e:	f000 f857 	bl	8008a30 <prvGetNextExpireTime>
 8008982:	60f8      	str	r0, [r7, #12]

		/* If a timer has expired, process it.  Otherwise, block this task
		until either a timer does expire, or a command is received. */
		prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
 8008984:	68bb      	ldr	r3, [r7, #8]
 8008986:	4619      	mov	r1, r3
 8008988:	68f8      	ldr	r0, [r7, #12]
 800898a:	f000 f803 	bl	8008994 <prvProcessTimerOrBlockTask>

		/* Empty the command queue. */
		prvProcessReceivedCommands();
 800898e:	f000 f8d5 	bl	8008b3c <prvProcessReceivedCommands>
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 8008992:	e7f1      	b.n	8008978 <prvTimerTask+0x8>

08008994 <prvProcessTimerOrBlockTask>:
	}
}
/*-----------------------------------------------------------*/

static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime, BaseType_t xListWasEmpty )
{
 8008994:	b580      	push	{r7, lr}
 8008996:	b084      	sub	sp, #16
 8008998:	af00      	add	r7, sp, #0
 800899a:	6078      	str	r0, [r7, #4]
 800899c:	6039      	str	r1, [r7, #0]
TickType_t xTimeNow;
BaseType_t xTimerListsWereSwitched;

	vTaskSuspendAll();
 800899e:	f7fe ff27 	bl	80077f0 <vTaskSuspendAll>
		/* Obtain the time now to make an assessment as to whether the timer
		has expired or not.  If obtaining the time causes the lists to switch
		then don't process this timer as any timers that remained in the list
		when the lists were switched will have been processed within the
		prvSampleTimeNow() function. */
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 80089a2:	f107 0308 	add.w	r3, r7, #8
 80089a6:	4618      	mov	r0, r3
 80089a8:	f000 f866 	bl	8008a78 <prvSampleTimeNow>
 80089ac:	60f8      	str	r0, [r7, #12]
		if( xTimerListsWereSwitched == pdFALSE )
 80089ae:	68bb      	ldr	r3, [r7, #8]
 80089b0:	2b00      	cmp	r3, #0
 80089b2:	d130      	bne.n	8008a16 <prvProcessTimerOrBlockTask+0x82>
		{
			/* The tick count has not overflowed, has the timer expired? */
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 80089b4:	683b      	ldr	r3, [r7, #0]
 80089b6:	2b00      	cmp	r3, #0
 80089b8:	d10a      	bne.n	80089d0 <prvProcessTimerOrBlockTask+0x3c>
 80089ba:	687a      	ldr	r2, [r7, #4]
 80089bc:	68fb      	ldr	r3, [r7, #12]
 80089be:	429a      	cmp	r2, r3
 80089c0:	d806      	bhi.n	80089d0 <prvProcessTimerOrBlockTask+0x3c>
			{
				( void ) xTaskResumeAll();
 80089c2:	f7fe ff23 	bl	800780c <xTaskResumeAll>
				prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 80089c6:	68f9      	ldr	r1, [r7, #12]
 80089c8:	6878      	ldr	r0, [r7, #4]
 80089ca:	f7ff ff91 	bl	80088f0 <prvProcessExpiredTimer>
		else
		{
			( void ) xTaskResumeAll();
		}
	}
}
 80089ce:	e024      	b.n	8008a1a <prvProcessTimerOrBlockTask+0x86>
				if( xListWasEmpty != pdFALSE )
 80089d0:	683b      	ldr	r3, [r7, #0]
 80089d2:	2b00      	cmp	r3, #0
 80089d4:	d008      	beq.n	80089e8 <prvProcessTimerOrBlockTask+0x54>
					xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 80089d6:	4b13      	ldr	r3, [pc, #76]	; (8008a24 <prvProcessTimerOrBlockTask+0x90>)
 80089d8:	681b      	ldr	r3, [r3, #0]
 80089da:	681b      	ldr	r3, [r3, #0]
 80089dc:	2b00      	cmp	r3, #0
 80089de:	bf0c      	ite	eq
 80089e0:	2301      	moveq	r3, #1
 80089e2:	2300      	movne	r3, #0
 80089e4:	b2db      	uxtb	r3, r3
 80089e6:	603b      	str	r3, [r7, #0]
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 80089e8:	4b0f      	ldr	r3, [pc, #60]	; (8008a28 <prvProcessTimerOrBlockTask+0x94>)
 80089ea:	6818      	ldr	r0, [r3, #0]
 80089ec:	687a      	ldr	r2, [r7, #4]
 80089ee:	68fb      	ldr	r3, [r7, #12]
 80089f0:	1ad3      	subs	r3, r2, r3
 80089f2:	683a      	ldr	r2, [r7, #0]
 80089f4:	4619      	mov	r1, r3
 80089f6:	f7fe fc95 	bl	8007324 <vQueueWaitForMessageRestricted>
				if( xTaskResumeAll() == pdFALSE )
 80089fa:	f7fe ff07 	bl	800780c <xTaskResumeAll>
 80089fe:	4603      	mov	r3, r0
 8008a00:	2b00      	cmp	r3, #0
 8008a02:	d10a      	bne.n	8008a1a <prvProcessTimerOrBlockTask+0x86>
					portYIELD_WITHIN_API();
 8008a04:	4b09      	ldr	r3, [pc, #36]	; (8008a2c <prvProcessTimerOrBlockTask+0x98>)
 8008a06:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8008a0a:	601a      	str	r2, [r3, #0]
 8008a0c:	f3bf 8f4f 	dsb	sy
 8008a10:	f3bf 8f6f 	isb	sy
}
 8008a14:	e001      	b.n	8008a1a <prvProcessTimerOrBlockTask+0x86>
			( void ) xTaskResumeAll();
 8008a16:	f7fe fef9 	bl	800780c <xTaskResumeAll>
}
 8008a1a:	bf00      	nop
 8008a1c:	3710      	adds	r7, #16
 8008a1e:	46bd      	mov	sp, r7
 8008a20:	bd80      	pop	{r7, pc}
 8008a22:	bf00      	nop
 8008a24:	20000ef4 	.word	0x20000ef4
 8008a28:	20000ef8 	.word	0x20000ef8
 8008a2c:	e000ed04 	.word	0xe000ed04

08008a30 <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty )
{
 8008a30:	b480      	push	{r7}
 8008a32:	b085      	sub	sp, #20
 8008a34:	af00      	add	r7, sp, #0
 8008a36:	6078      	str	r0, [r7, #4]
	the timer with the nearest expiry time will expire.  If there are no
	active timers then just set the next expire time to 0.  That will cause
	this task to unblock when the tick count overflows, at which point the
	timer lists will be switched and the next expiry time can be
	re-assessed.  */
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 8008a38:	4b0e      	ldr	r3, [pc, #56]	; (8008a74 <prvGetNextExpireTime+0x44>)
 8008a3a:	681b      	ldr	r3, [r3, #0]
 8008a3c:	681b      	ldr	r3, [r3, #0]
 8008a3e:	2b00      	cmp	r3, #0
 8008a40:	bf0c      	ite	eq
 8008a42:	2301      	moveq	r3, #1
 8008a44:	2300      	movne	r3, #0
 8008a46:	b2db      	uxtb	r3, r3
 8008a48:	461a      	mov	r2, r3
 8008a4a:	687b      	ldr	r3, [r7, #4]
 8008a4c:	601a      	str	r2, [r3, #0]
	if( *pxListWasEmpty == pdFALSE )
 8008a4e:	687b      	ldr	r3, [r7, #4]
 8008a50:	681b      	ldr	r3, [r3, #0]
 8008a52:	2b00      	cmp	r3, #0
 8008a54:	d105      	bne.n	8008a62 <prvGetNextExpireTime+0x32>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8008a56:	4b07      	ldr	r3, [pc, #28]	; (8008a74 <prvGetNextExpireTime+0x44>)
 8008a58:	681b      	ldr	r3, [r3, #0]
 8008a5a:	68db      	ldr	r3, [r3, #12]
 8008a5c:	681b      	ldr	r3, [r3, #0]
 8008a5e:	60fb      	str	r3, [r7, #12]
 8008a60:	e001      	b.n	8008a66 <prvGetNextExpireTime+0x36>
	}
	else
	{
		/* Ensure the task unblocks when the tick count rolls over. */
		xNextExpireTime = ( TickType_t ) 0U;
 8008a62:	2300      	movs	r3, #0
 8008a64:	60fb      	str	r3, [r7, #12]
	}

	return xNextExpireTime;
 8008a66:	68fb      	ldr	r3, [r7, #12]
}
 8008a68:	4618      	mov	r0, r3
 8008a6a:	3714      	adds	r7, #20
 8008a6c:	46bd      	mov	sp, r7
 8008a6e:	bc80      	pop	{r7}
 8008a70:	4770      	bx	lr
 8008a72:	bf00      	nop
 8008a74:	20000ef0 	.word	0x20000ef0

08008a78 <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
{
 8008a78:	b580      	push	{r7, lr}
 8008a7a:	b084      	sub	sp, #16
 8008a7c:	af00      	add	r7, sp, #0
 8008a7e:	6078      	str	r0, [r7, #4]
TickType_t xTimeNow;
PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

	xTimeNow = xTaskGetTickCount();
 8008a80:	f7fe ff62 	bl	8007948 <xTaskGetTickCount>
 8008a84:	60f8      	str	r0, [r7, #12]

	if( xTimeNow < xLastTime )
 8008a86:	4b0b      	ldr	r3, [pc, #44]	; (8008ab4 <prvSampleTimeNow+0x3c>)
 8008a88:	681b      	ldr	r3, [r3, #0]
 8008a8a:	68fa      	ldr	r2, [r7, #12]
 8008a8c:	429a      	cmp	r2, r3
 8008a8e:	d205      	bcs.n	8008a9c <prvSampleTimeNow+0x24>
	{
		prvSwitchTimerLists();
 8008a90:	f000 f908 	bl	8008ca4 <prvSwitchTimerLists>
		*pxTimerListsWereSwitched = pdTRUE;
 8008a94:	687b      	ldr	r3, [r7, #4]
 8008a96:	2201      	movs	r2, #1
 8008a98:	601a      	str	r2, [r3, #0]
 8008a9a:	e002      	b.n	8008aa2 <prvSampleTimeNow+0x2a>
	}
	else
	{
		*pxTimerListsWereSwitched = pdFALSE;
 8008a9c:	687b      	ldr	r3, [r7, #4]
 8008a9e:	2200      	movs	r2, #0
 8008aa0:	601a      	str	r2, [r3, #0]
	}

	xLastTime = xTimeNow;
 8008aa2:	4a04      	ldr	r2, [pc, #16]	; (8008ab4 <prvSampleTimeNow+0x3c>)
 8008aa4:	68fb      	ldr	r3, [r7, #12]
 8008aa6:	6013      	str	r3, [r2, #0]

	return xTimeNow;
 8008aa8:	68fb      	ldr	r3, [r7, #12]
}
 8008aaa:	4618      	mov	r0, r3
 8008aac:	3710      	adds	r7, #16
 8008aae:	46bd      	mov	sp, r7
 8008ab0:	bd80      	pop	{r7, pc}
 8008ab2:	bf00      	nop
 8008ab4:	20000f00 	.word	0x20000f00

08008ab8 <prvInsertTimerInActiveList>:
/*-----------------------------------------------------------*/

static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer, const TickType_t xNextExpiryTime, const TickType_t xTimeNow, const TickType_t xCommandTime )
{
 8008ab8:	b580      	push	{r7, lr}
 8008aba:	b086      	sub	sp, #24
 8008abc:	af00      	add	r7, sp, #0
 8008abe:	60f8      	str	r0, [r7, #12]
 8008ac0:	60b9      	str	r1, [r7, #8]
 8008ac2:	607a      	str	r2, [r7, #4]
 8008ac4:	603b      	str	r3, [r7, #0]
BaseType_t xProcessTimerNow = pdFALSE;
 8008ac6:	2300      	movs	r3, #0
 8008ac8:	617b      	str	r3, [r7, #20]

	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 8008aca:	68fb      	ldr	r3, [r7, #12]
 8008acc:	68ba      	ldr	r2, [r7, #8]
 8008ace:	605a      	str	r2, [r3, #4]
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 8008ad0:	68fb      	ldr	r3, [r7, #12]
 8008ad2:	68fa      	ldr	r2, [r7, #12]
 8008ad4:	611a      	str	r2, [r3, #16]

	if( xNextExpiryTime <= xTimeNow )
 8008ad6:	68ba      	ldr	r2, [r7, #8]
 8008ad8:	687b      	ldr	r3, [r7, #4]
 8008ada:	429a      	cmp	r2, r3
 8008adc:	d812      	bhi.n	8008b04 <prvInsertTimerInActiveList+0x4c>
	{
		/* Has the expiry time elapsed between the command to start/reset a
		timer was issued, and the time the command was processed? */
		if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8008ade:	687a      	ldr	r2, [r7, #4]
 8008ae0:	683b      	ldr	r3, [r7, #0]
 8008ae2:	1ad2      	subs	r2, r2, r3
 8008ae4:	68fb      	ldr	r3, [r7, #12]
 8008ae6:	699b      	ldr	r3, [r3, #24]
 8008ae8:	429a      	cmp	r2, r3
 8008aea:	d302      	bcc.n	8008af2 <prvInsertTimerInActiveList+0x3a>
		{
			/* The time between a command being issued and the command being
			processed actually exceeds the timers period.  */
			xProcessTimerNow = pdTRUE;
 8008aec:	2301      	movs	r3, #1
 8008aee:	617b      	str	r3, [r7, #20]
 8008af0:	e01b      	b.n	8008b2a <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 8008af2:	4b10      	ldr	r3, [pc, #64]	; (8008b34 <prvInsertTimerInActiveList+0x7c>)
 8008af4:	681a      	ldr	r2, [r3, #0]
 8008af6:	68fb      	ldr	r3, [r7, #12]
 8008af8:	3304      	adds	r3, #4
 8008afa:	4619      	mov	r1, r3
 8008afc:	4610      	mov	r0, r2
 8008afe:	f7fd fce7 	bl	80064d0 <vListInsert>
 8008b02:	e012      	b.n	8008b2a <prvInsertTimerInActiveList+0x72>
		}
	}
	else
	{
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 8008b04:	687a      	ldr	r2, [r7, #4]
 8008b06:	683b      	ldr	r3, [r7, #0]
 8008b08:	429a      	cmp	r2, r3
 8008b0a:	d206      	bcs.n	8008b1a <prvInsertTimerInActiveList+0x62>
 8008b0c:	68ba      	ldr	r2, [r7, #8]
 8008b0e:	683b      	ldr	r3, [r7, #0]
 8008b10:	429a      	cmp	r2, r3
 8008b12:	d302      	bcc.n	8008b1a <prvInsertTimerInActiveList+0x62>
		{
			/* If, since the command was issued, the tick count has overflowed
			but the expiry time has not, then the timer must have already passed
			its expiry time and should be processed immediately. */
			xProcessTimerNow = pdTRUE;
 8008b14:	2301      	movs	r3, #1
 8008b16:	617b      	str	r3, [r7, #20]
 8008b18:	e007      	b.n	8008b2a <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 8008b1a:	4b07      	ldr	r3, [pc, #28]	; (8008b38 <prvInsertTimerInActiveList+0x80>)
 8008b1c:	681a      	ldr	r2, [r3, #0]
 8008b1e:	68fb      	ldr	r3, [r7, #12]
 8008b20:	3304      	adds	r3, #4
 8008b22:	4619      	mov	r1, r3
 8008b24:	4610      	mov	r0, r2
 8008b26:	f7fd fcd3 	bl	80064d0 <vListInsert>
		}
	}

	return xProcessTimerNow;
 8008b2a:	697b      	ldr	r3, [r7, #20]
}
 8008b2c:	4618      	mov	r0, r3
 8008b2e:	3718      	adds	r7, #24
 8008b30:	46bd      	mov	sp, r7
 8008b32:	bd80      	pop	{r7, pc}
 8008b34:	20000ef4 	.word	0x20000ef4
 8008b38:	20000ef0 	.word	0x20000ef0

08008b3c <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

static void	prvProcessReceivedCommands( void )
{
 8008b3c:	b580      	push	{r7, lr}
 8008b3e:	b08e      	sub	sp, #56	; 0x38
 8008b40:	af02      	add	r7, sp, #8
DaemonTaskMessage_t xMessage;
Timer_t *pxTimer;
BaseType_t xTimerListsWereSwitched, xResult;
TickType_t xTimeNow;

	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 8008b42:	e09d      	b.n	8008c80 <prvProcessReceivedCommands+0x144>
	{
		#if ( INCLUDE_xTimerPendFunctionCall == 1 )
		{
			/* Negative commands are pended function calls rather than timer
			commands. */
			if( xMessage.xMessageID < ( BaseType_t ) 0 )
 8008b44:	687b      	ldr	r3, [r7, #4]
 8008b46:	2b00      	cmp	r3, #0
 8008b48:	da18      	bge.n	8008b7c <prvProcessReceivedCommands+0x40>
			{
				const CallbackParameters_t * const pxCallback = &( xMessage.u.xCallbackParameters );
 8008b4a:	1d3b      	adds	r3, r7, #4
 8008b4c:	3304      	adds	r3, #4
 8008b4e:	62fb      	str	r3, [r7, #44]	; 0x2c

				/* The timer uses the xCallbackParameters member to request a
				callback be executed.  Check the callback is not NULL. */
				configASSERT( pxCallback );
 8008b50:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008b52:	2b00      	cmp	r3, #0
 8008b54:	d10a      	bne.n	8008b6c <prvProcessReceivedCommands+0x30>
	__asm volatile
 8008b56:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008b5a:	f383 8811 	msr	BASEPRI, r3
 8008b5e:	f3bf 8f6f 	isb	sy
 8008b62:	f3bf 8f4f 	dsb	sy
 8008b66:	61fb      	str	r3, [r7, #28]
}
 8008b68:	bf00      	nop
 8008b6a:	e7fe      	b.n	8008b6a <prvProcessReceivedCommands+0x2e>

				/* Call the function. */
				pxCallback->pxCallbackFunction( pxCallback->pvParameter1, pxCallback->ulParameter2 );
 8008b6c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008b6e:	681b      	ldr	r3, [r3, #0]
 8008b70:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8008b72:	6850      	ldr	r0, [r2, #4]
 8008b74:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8008b76:	6892      	ldr	r2, [r2, #8]
 8008b78:	4611      	mov	r1, r2
 8008b7a:	4798      	blx	r3
		}
		#endif /* INCLUDE_xTimerPendFunctionCall */

		/* Commands that are positive are timer commands rather than pended
		function calls. */
		if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 8008b7c:	687b      	ldr	r3, [r7, #4]
 8008b7e:	2b00      	cmp	r3, #0
 8008b80:	db7d      	blt.n	8008c7e <prvProcessReceivedCommands+0x142>
		{
			/* The messages uses the xTimerParameters member to work on a
			software timer. */
			pxTimer = xMessage.u.xTimerParameters.pxTimer;
 8008b82:	68fb      	ldr	r3, [r7, #12]
 8008b84:	62bb      	str	r3, [r7, #40]	; 0x28

			if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 8008b86:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008b88:	695b      	ldr	r3, [r3, #20]
 8008b8a:	2b00      	cmp	r3, #0
 8008b8c:	d004      	beq.n	8008b98 <prvProcessReceivedCommands+0x5c>
			{
				/* The timer is in a list, remove it. */
				( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8008b8e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008b90:	3304      	adds	r3, #4
 8008b92:	4618      	mov	r0, r3
 8008b94:	f7fd fcd4 	bl	8006540 <uxListRemove>
			it must be present in the function call.  prvSampleTimeNow() must be
			called after the message is received from xTimerQueue so there is no
			possibility of a higher priority task adding a message to the message
			queue with a time that is ahead of the timer daemon task (because it
			pre-empted the timer daemon task after the xTimeNow value was set). */
			xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 8008b98:	463b      	mov	r3, r7
 8008b9a:	4618      	mov	r0, r3
 8008b9c:	f7ff ff6c 	bl	8008a78 <prvSampleTimeNow>
 8008ba0:	6278      	str	r0, [r7, #36]	; 0x24

			switch( xMessage.xMessageID )
 8008ba2:	687b      	ldr	r3, [r7, #4]
 8008ba4:	2b09      	cmp	r3, #9
 8008ba6:	d86b      	bhi.n	8008c80 <prvProcessReceivedCommands+0x144>
 8008ba8:	a201      	add	r2, pc, #4	; (adr r2, 8008bb0 <prvProcessReceivedCommands+0x74>)
 8008baa:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008bae:	bf00      	nop
 8008bb0:	08008bd9 	.word	0x08008bd9
 8008bb4:	08008bd9 	.word	0x08008bd9
 8008bb8:	08008bd9 	.word	0x08008bd9
 8008bbc:	08008c81 	.word	0x08008c81
 8008bc0:	08008c35 	.word	0x08008c35
 8008bc4:	08008c6d 	.word	0x08008c6d
 8008bc8:	08008bd9 	.word	0x08008bd9
 8008bcc:	08008bd9 	.word	0x08008bd9
 8008bd0:	08008c81 	.word	0x08008c81
 8008bd4:	08008c35 	.word	0x08008c35
			    case tmrCOMMAND_START_FROM_ISR :
			    case tmrCOMMAND_RESET :
			    case tmrCOMMAND_RESET_FROM_ISR :
				case tmrCOMMAND_START_DONT_TRACE :
					/* Start or restart a timer. */
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 8008bd8:	68ba      	ldr	r2, [r7, #8]
 8008bda:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008bdc:	699b      	ldr	r3, [r3, #24]
 8008bde:	18d1      	adds	r1, r2, r3
 8008be0:	68bb      	ldr	r3, [r7, #8]
 8008be2:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8008be4:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8008be6:	f7ff ff67 	bl	8008ab8 <prvInsertTimerInActiveList>
 8008bea:	4603      	mov	r3, r0
 8008bec:	2b00      	cmp	r3, #0
 8008bee:	d047      	beq.n	8008c80 <prvProcessReceivedCommands+0x144>
					{
						/* The timer expired before it was added to the active
						timer list.  Process it now. */
						pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8008bf0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008bf2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008bf4:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8008bf6:	4798      	blx	r3
						traceTIMER_EXPIRED( pxTimer );

						if( pxTimer->uxAutoReload == ( UBaseType_t ) pdTRUE )
 8008bf8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008bfa:	69db      	ldr	r3, [r3, #28]
 8008bfc:	2b01      	cmp	r3, #1
 8008bfe:	d13f      	bne.n	8008c80 <prvProcessReceivedCommands+0x144>
						{
							xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
 8008c00:	68ba      	ldr	r2, [r7, #8]
 8008c02:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008c04:	699b      	ldr	r3, [r3, #24]
 8008c06:	441a      	add	r2, r3
 8008c08:	2300      	movs	r3, #0
 8008c0a:	9300      	str	r3, [sp, #0]
 8008c0c:	2300      	movs	r3, #0
 8008c0e:	2100      	movs	r1, #0
 8008c10:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8008c12:	f7ff fe1f 	bl	8008854 <xTimerGenericCommand>
 8008c16:	6238      	str	r0, [r7, #32]
							configASSERT( xResult );
 8008c18:	6a3b      	ldr	r3, [r7, #32]
 8008c1a:	2b00      	cmp	r3, #0
 8008c1c:	d130      	bne.n	8008c80 <prvProcessReceivedCommands+0x144>
	__asm volatile
 8008c1e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008c22:	f383 8811 	msr	BASEPRI, r3
 8008c26:	f3bf 8f6f 	isb	sy
 8008c2a:	f3bf 8f4f 	dsb	sy
 8008c2e:	61bb      	str	r3, [r7, #24]
}
 8008c30:	bf00      	nop
 8008c32:	e7fe      	b.n	8008c32 <prvProcessReceivedCommands+0xf6>
					There is nothing to do here. */
					break;

				case tmrCOMMAND_CHANGE_PERIOD :
				case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR :
					pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 8008c34:	68ba      	ldr	r2, [r7, #8]
 8008c36:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008c38:	619a      	str	r2, [r3, #24]
					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 8008c3a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008c3c:	699b      	ldr	r3, [r3, #24]
 8008c3e:	2b00      	cmp	r3, #0
 8008c40:	d10a      	bne.n	8008c58 <prvProcessReceivedCommands+0x11c>
	__asm volatile
 8008c42:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008c46:	f383 8811 	msr	BASEPRI, r3
 8008c4a:	f3bf 8f6f 	isb	sy
 8008c4e:	f3bf 8f4f 	dsb	sy
 8008c52:	617b      	str	r3, [r7, #20]
}
 8008c54:	bf00      	nop
 8008c56:	e7fe      	b.n	8008c56 <prvProcessReceivedCommands+0x11a>
					be longer or shorter than the old one.  The command time is
					therefore set to the current time, and as the period cannot
					be zero the next expiry time can only be in the future,
					meaning (unlike for the xTimerStart() case above) there is
					no fail case that needs to be handled here. */
					( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 8008c58:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008c5a:	699a      	ldr	r2, [r3, #24]
 8008c5c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008c5e:	18d1      	adds	r1, r2, r3
 8008c60:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008c62:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8008c64:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8008c66:	f7ff ff27 	bl	8008ab8 <prvInsertTimerInActiveList>
					break;
 8008c6a:	e009      	b.n	8008c80 <prvProcessReceivedCommands+0x144>
					#elif( ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 1 ) )
					{
						/* The timer could have been allocated statically or
						dynamically, so check before attempting to free the
						memory. */
						if( pxTimer->ucStaticallyAllocated == ( uint8_t ) pdFALSE )
 8008c6c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008c6e:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 8008c72:	2b00      	cmp	r3, #0
 8008c74:	d104      	bne.n	8008c80 <prvProcessReceivedCommands+0x144>
						{
							vPortFree( pxTimer );
 8008c76:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8008c78:	f000 fb6c 	bl	8009354 <vPortFree>
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
					break;
 8008c7c:	e000      	b.n	8008c80 <prvProcessReceivedCommands+0x144>

				default	:
					/* Don't expect to get here. */
					break;
			}
		}
 8008c7e:	bf00      	nop
	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 8008c80:	4b07      	ldr	r3, [pc, #28]	; (8008ca0 <prvProcessReceivedCommands+0x164>)
 8008c82:	681b      	ldr	r3, [r3, #0]
 8008c84:	1d39      	adds	r1, r7, #4
 8008c86:	2200      	movs	r2, #0
 8008c88:	4618      	mov	r0, r3
 8008c8a:	f7fd ffc3 	bl	8006c14 <xQueueReceive>
 8008c8e:	4603      	mov	r3, r0
 8008c90:	2b00      	cmp	r3, #0
 8008c92:	f47f af57 	bne.w	8008b44 <prvProcessReceivedCommands+0x8>
	}
}
 8008c96:	bf00      	nop
 8008c98:	bf00      	nop
 8008c9a:	3730      	adds	r7, #48	; 0x30
 8008c9c:	46bd      	mov	sp, r7
 8008c9e:	bd80      	pop	{r7, pc}
 8008ca0:	20000ef8 	.word	0x20000ef8

08008ca4 <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

static void prvSwitchTimerLists( void )
{
 8008ca4:	b580      	push	{r7, lr}
 8008ca6:	b088      	sub	sp, #32
 8008ca8:	af02      	add	r7, sp, #8

	/* The tick count has overflowed.  The timer lists must be switched.
	If there are any timers still referenced from the current timer list
	then they must have expired and should be processed before the lists
	are switched. */
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 8008caa:	e045      	b.n	8008d38 <prvSwitchTimerLists+0x94>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8008cac:	4b2c      	ldr	r3, [pc, #176]	; (8008d60 <prvSwitchTimerLists+0xbc>)
 8008cae:	681b      	ldr	r3, [r3, #0]
 8008cb0:	68db      	ldr	r3, [r3, #12]
 8008cb2:	681b      	ldr	r3, [r3, #0]
 8008cb4:	613b      	str	r3, [r7, #16]

		/* Remove the timer from the list. */
		pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList );
 8008cb6:	4b2a      	ldr	r3, [pc, #168]	; (8008d60 <prvSwitchTimerLists+0xbc>)
 8008cb8:	681b      	ldr	r3, [r3, #0]
 8008cba:	68db      	ldr	r3, [r3, #12]
 8008cbc:	68db      	ldr	r3, [r3, #12]
 8008cbe:	60fb      	str	r3, [r7, #12]
		( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8008cc0:	68fb      	ldr	r3, [r7, #12]
 8008cc2:	3304      	adds	r3, #4
 8008cc4:	4618      	mov	r0, r3
 8008cc6:	f7fd fc3b 	bl	8006540 <uxListRemove>
		traceTIMER_EXPIRED( pxTimer );

		/* Execute its callback, then send a command to restart the timer if
		it is an auto-reload timer.  It cannot be restarted here as the lists
		have not yet been switched. */
		pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8008cca:	68fb      	ldr	r3, [r7, #12]
 8008ccc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008cce:	68f8      	ldr	r0, [r7, #12]
 8008cd0:	4798      	blx	r3

		if( pxTimer->uxAutoReload == ( UBaseType_t ) pdTRUE )
 8008cd2:	68fb      	ldr	r3, [r7, #12]
 8008cd4:	69db      	ldr	r3, [r3, #28]
 8008cd6:	2b01      	cmp	r3, #1
 8008cd8:	d12e      	bne.n	8008d38 <prvSwitchTimerLists+0x94>
			the timer going into the same timer list then it has already expired
			and the timer should be re-inserted into the current list so it is
			processed again within this loop.  Otherwise a command should be sent
			to restart the timer to ensure it is only inserted into a list after
			the lists have been swapped. */
			xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
 8008cda:	68fb      	ldr	r3, [r7, #12]
 8008cdc:	699b      	ldr	r3, [r3, #24]
 8008cde:	693a      	ldr	r2, [r7, #16]
 8008ce0:	4413      	add	r3, r2
 8008ce2:	60bb      	str	r3, [r7, #8]
			if( xReloadTime > xNextExpireTime )
 8008ce4:	68ba      	ldr	r2, [r7, #8]
 8008ce6:	693b      	ldr	r3, [r7, #16]
 8008ce8:	429a      	cmp	r2, r3
 8008cea:	d90e      	bls.n	8008d0a <prvSwitchTimerLists+0x66>
			{
				listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
 8008cec:	68fb      	ldr	r3, [r7, #12]
 8008cee:	68ba      	ldr	r2, [r7, #8]
 8008cf0:	605a      	str	r2, [r3, #4]
				listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 8008cf2:	68fb      	ldr	r3, [r7, #12]
 8008cf4:	68fa      	ldr	r2, [r7, #12]
 8008cf6:	611a      	str	r2, [r3, #16]
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 8008cf8:	4b19      	ldr	r3, [pc, #100]	; (8008d60 <prvSwitchTimerLists+0xbc>)
 8008cfa:	681a      	ldr	r2, [r3, #0]
 8008cfc:	68fb      	ldr	r3, [r7, #12]
 8008cfe:	3304      	adds	r3, #4
 8008d00:	4619      	mov	r1, r3
 8008d02:	4610      	mov	r0, r2
 8008d04:	f7fd fbe4 	bl	80064d0 <vListInsert>
 8008d08:	e016      	b.n	8008d38 <prvSwitchTimerLists+0x94>
			}
			else
			{
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 8008d0a:	2300      	movs	r3, #0
 8008d0c:	9300      	str	r3, [sp, #0]
 8008d0e:	2300      	movs	r3, #0
 8008d10:	693a      	ldr	r2, [r7, #16]
 8008d12:	2100      	movs	r1, #0
 8008d14:	68f8      	ldr	r0, [r7, #12]
 8008d16:	f7ff fd9d 	bl	8008854 <xTimerGenericCommand>
 8008d1a:	6078      	str	r0, [r7, #4]
				configASSERT( xResult );
 8008d1c:	687b      	ldr	r3, [r7, #4]
 8008d1e:	2b00      	cmp	r3, #0
 8008d20:	d10a      	bne.n	8008d38 <prvSwitchTimerLists+0x94>
	__asm volatile
 8008d22:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008d26:	f383 8811 	msr	BASEPRI, r3
 8008d2a:	f3bf 8f6f 	isb	sy
 8008d2e:	f3bf 8f4f 	dsb	sy
 8008d32:	603b      	str	r3, [r7, #0]
}
 8008d34:	bf00      	nop
 8008d36:	e7fe      	b.n	8008d36 <prvSwitchTimerLists+0x92>
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 8008d38:	4b09      	ldr	r3, [pc, #36]	; (8008d60 <prvSwitchTimerLists+0xbc>)
 8008d3a:	681b      	ldr	r3, [r3, #0]
 8008d3c:	681b      	ldr	r3, [r3, #0]
 8008d3e:	2b00      	cmp	r3, #0
 8008d40:	d1b4      	bne.n	8008cac <prvSwitchTimerLists+0x8>
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxTemp = pxCurrentTimerList;
 8008d42:	4b07      	ldr	r3, [pc, #28]	; (8008d60 <prvSwitchTimerLists+0xbc>)
 8008d44:	681b      	ldr	r3, [r3, #0]
 8008d46:	617b      	str	r3, [r7, #20]
	pxCurrentTimerList = pxOverflowTimerList;
 8008d48:	4b06      	ldr	r3, [pc, #24]	; (8008d64 <prvSwitchTimerLists+0xc0>)
 8008d4a:	681b      	ldr	r3, [r3, #0]
 8008d4c:	4a04      	ldr	r2, [pc, #16]	; (8008d60 <prvSwitchTimerLists+0xbc>)
 8008d4e:	6013      	str	r3, [r2, #0]
	pxOverflowTimerList = pxTemp;
 8008d50:	4a04      	ldr	r2, [pc, #16]	; (8008d64 <prvSwitchTimerLists+0xc0>)
 8008d52:	697b      	ldr	r3, [r7, #20]
 8008d54:	6013      	str	r3, [r2, #0]
}
 8008d56:	bf00      	nop
 8008d58:	3718      	adds	r7, #24
 8008d5a:	46bd      	mov	sp, r7
 8008d5c:	bd80      	pop	{r7, pc}
 8008d5e:	bf00      	nop
 8008d60:	20000ef0 	.word	0x20000ef0
 8008d64:	20000ef4 	.word	0x20000ef4

08008d68 <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

static void prvCheckForValidListAndQueue( void )
{
 8008d68:	b580      	push	{r7, lr}
 8008d6a:	b082      	sub	sp, #8
 8008d6c:	af02      	add	r7, sp, #8
	/* Check that the list from which active timers are referenced, and the
	queue used to communicate with the timer service, have been
	initialised. */
	taskENTER_CRITICAL();
 8008d6e:	f000 f92d 	bl	8008fcc <vPortEnterCritical>
	{
		if( xTimerQueue == NULL )
 8008d72:	4b15      	ldr	r3, [pc, #84]	; (8008dc8 <prvCheckForValidListAndQueue+0x60>)
 8008d74:	681b      	ldr	r3, [r3, #0]
 8008d76:	2b00      	cmp	r3, #0
 8008d78:	d120      	bne.n	8008dbc <prvCheckForValidListAndQueue+0x54>
		{
			vListInitialise( &xActiveTimerList1 );
 8008d7a:	4814      	ldr	r0, [pc, #80]	; (8008dcc <prvCheckForValidListAndQueue+0x64>)
 8008d7c:	f7fd fb5a 	bl	8006434 <vListInitialise>
			vListInitialise( &xActiveTimerList2 );
 8008d80:	4813      	ldr	r0, [pc, #76]	; (8008dd0 <prvCheckForValidListAndQueue+0x68>)
 8008d82:	f7fd fb57 	bl	8006434 <vListInitialise>
			pxCurrentTimerList = &xActiveTimerList1;
 8008d86:	4b13      	ldr	r3, [pc, #76]	; (8008dd4 <prvCheckForValidListAndQueue+0x6c>)
 8008d88:	4a10      	ldr	r2, [pc, #64]	; (8008dcc <prvCheckForValidListAndQueue+0x64>)
 8008d8a:	601a      	str	r2, [r3, #0]
			pxOverflowTimerList = &xActiveTimerList2;
 8008d8c:	4b12      	ldr	r3, [pc, #72]	; (8008dd8 <prvCheckForValidListAndQueue+0x70>)
 8008d8e:	4a10      	ldr	r2, [pc, #64]	; (8008dd0 <prvCheckForValidListAndQueue+0x68>)
 8008d90:	601a      	str	r2, [r3, #0]
				/* The timer queue is allocated statically in case
				configSUPPORT_DYNAMIC_ALLOCATION is 0. */
				static StaticQueue_t xStaticTimerQueue; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */
				static uint8_t ucStaticTimerQueueStorage[ ( size_t ) configTIMER_QUEUE_LENGTH * sizeof( DaemonTaskMessage_t ) ]; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */

				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
 8008d92:	2300      	movs	r3, #0
 8008d94:	9300      	str	r3, [sp, #0]
 8008d96:	4b11      	ldr	r3, [pc, #68]	; (8008ddc <prvCheckForValidListAndQueue+0x74>)
 8008d98:	4a11      	ldr	r2, [pc, #68]	; (8008de0 <prvCheckForValidListAndQueue+0x78>)
 8008d9a:	2110      	movs	r1, #16
 8008d9c:	200a      	movs	r0, #10
 8008d9e:	f7fd fc61 	bl	8006664 <xQueueGenericCreateStatic>
 8008da2:	4603      	mov	r3, r0
 8008da4:	4a08      	ldr	r2, [pc, #32]	; (8008dc8 <prvCheckForValidListAndQueue+0x60>)
 8008da6:	6013      	str	r3, [r2, #0]
			}
			#endif

			#if ( configQUEUE_REGISTRY_SIZE > 0 )
			{
				if( xTimerQueue != NULL )
 8008da8:	4b07      	ldr	r3, [pc, #28]	; (8008dc8 <prvCheckForValidListAndQueue+0x60>)
 8008daa:	681b      	ldr	r3, [r3, #0]
 8008dac:	2b00      	cmp	r3, #0
 8008dae:	d005      	beq.n	8008dbc <prvCheckForValidListAndQueue+0x54>
				{
					vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 8008db0:	4b05      	ldr	r3, [pc, #20]	; (8008dc8 <prvCheckForValidListAndQueue+0x60>)
 8008db2:	681b      	ldr	r3, [r3, #0]
 8008db4:	490b      	ldr	r1, [pc, #44]	; (8008de4 <prvCheckForValidListAndQueue+0x7c>)
 8008db6:	4618      	mov	r0, r3
 8008db8:	f7fe fa62 	bl	8007280 <vQueueAddToRegistry>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8008dbc:	f000 f936 	bl	800902c <vPortExitCritical>
}
 8008dc0:	bf00      	nop
 8008dc2:	46bd      	mov	sp, r7
 8008dc4:	bd80      	pop	{r7, pc}
 8008dc6:	bf00      	nop
 8008dc8:	20000ef8 	.word	0x20000ef8
 8008dcc:	20000ec8 	.word	0x20000ec8
 8008dd0:	20000edc 	.word	0x20000edc
 8008dd4:	20000ef0 	.word	0x20000ef0
 8008dd8:	20000ef4 	.word	0x20000ef4
 8008ddc:	20000fa4 	.word	0x20000fa4
 8008de0:	20000f04 	.word	0x20000f04
 8008de4:	08009694 	.word	0x08009694

08008de8 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 8008de8:	b480      	push	{r7}
 8008dea:	b085      	sub	sp, #20
 8008dec:	af00      	add	r7, sp, #0
 8008dee:	60f8      	str	r0, [r7, #12]
 8008df0:	60b9      	str	r1, [r7, #8]
 8008df2:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */
	pxTopOfStack--; /* Offset added to account for the way the MCU uses the stack on entry/exit of interrupts. */
 8008df4:	68fb      	ldr	r3, [r7, #12]
 8008df6:	3b04      	subs	r3, #4
 8008df8:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 8008dfa:	68fb      	ldr	r3, [r7, #12]
 8008dfc:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8008e00:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8008e02:	68fb      	ldr	r3, [r7, #12]
 8008e04:	3b04      	subs	r3, #4
 8008e06:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 8008e08:	68bb      	ldr	r3, [r7, #8]
 8008e0a:	f023 0201 	bic.w	r2, r3, #1
 8008e0e:	68fb      	ldr	r3, [r7, #12]
 8008e10:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8008e12:	68fb      	ldr	r3, [r7, #12]
 8008e14:	3b04      	subs	r3, #4
 8008e16:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 8008e18:	4a08      	ldr	r2, [pc, #32]	; (8008e3c <pxPortInitialiseStack+0x54>)
 8008e1a:	68fb      	ldr	r3, [r7, #12]
 8008e1c:	601a      	str	r2, [r3, #0]
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 8008e1e:	68fb      	ldr	r3, [r7, #12]
 8008e20:	3b14      	subs	r3, #20
 8008e22:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 8008e24:	687a      	ldr	r2, [r7, #4]
 8008e26:	68fb      	ldr	r3, [r7, #12]
 8008e28:	601a      	str	r2, [r3, #0]
	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 8008e2a:	68fb      	ldr	r3, [r7, #12]
 8008e2c:	3b20      	subs	r3, #32
 8008e2e:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 8008e30:	68fb      	ldr	r3, [r7, #12]
}
 8008e32:	4618      	mov	r0, r3
 8008e34:	3714      	adds	r7, #20
 8008e36:	46bd      	mov	sp, r7
 8008e38:	bc80      	pop	{r7}
 8008e3a:	4770      	bx	lr
 8008e3c:	08008e41 	.word	0x08008e41

08008e40 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 8008e40:	b480      	push	{r7}
 8008e42:	b085      	sub	sp, #20
 8008e44:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0UL;
 8008e46:	2300      	movs	r3, #0
 8008e48:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 8008e4a:	4b12      	ldr	r3, [pc, #72]	; (8008e94 <prvTaskExitError+0x54>)
 8008e4c:	681b      	ldr	r3, [r3, #0]
 8008e4e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008e52:	d00a      	beq.n	8008e6a <prvTaskExitError+0x2a>
	__asm volatile
 8008e54:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008e58:	f383 8811 	msr	BASEPRI, r3
 8008e5c:	f3bf 8f6f 	isb	sy
 8008e60:	f3bf 8f4f 	dsb	sy
 8008e64:	60fb      	str	r3, [r7, #12]
}
 8008e66:	bf00      	nop
 8008e68:	e7fe      	b.n	8008e68 <prvTaskExitError+0x28>
	__asm volatile
 8008e6a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008e6e:	f383 8811 	msr	BASEPRI, r3
 8008e72:	f3bf 8f6f 	isb	sy
 8008e76:	f3bf 8f4f 	dsb	sy
 8008e7a:	60bb      	str	r3, [r7, #8]
}
 8008e7c:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 8008e7e:	bf00      	nop
 8008e80:	687b      	ldr	r3, [r7, #4]
 8008e82:	2b00      	cmp	r3, #0
 8008e84:	d0fc      	beq.n	8008e80 <prvTaskExitError+0x40>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 8008e86:	bf00      	nop
 8008e88:	bf00      	nop
 8008e8a:	3714      	adds	r7, #20
 8008e8c:	46bd      	mov	sp, r7
 8008e8e:	bc80      	pop	{r7}
 8008e90:	4770      	bx	lr
 8008e92:	bf00      	nop
 8008e94:	2000000c 	.word	0x2000000c
	...

08008ea0 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 8008ea0:	4b07      	ldr	r3, [pc, #28]	; (8008ec0 <pxCurrentTCBConst2>)
 8008ea2:	6819      	ldr	r1, [r3, #0]
 8008ea4:	6808      	ldr	r0, [r1, #0]
 8008ea6:	e8b0 0ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp}
 8008eaa:	f380 8809 	msr	PSP, r0
 8008eae:	f3bf 8f6f 	isb	sy
 8008eb2:	f04f 0000 	mov.w	r0, #0
 8008eb6:	f380 8811 	msr	BASEPRI, r0
 8008eba:	f04e 0e0d 	orr.w	lr, lr, #13
 8008ebe:	4770      	bx	lr

08008ec0 <pxCurrentTCBConst2>:
 8008ec0:	200009c8 	.word	0x200009c8
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 8008ec4:	bf00      	nop
 8008ec6:	bf00      	nop

08008ec8 <prvPortStartFirstTask>:
/*-----------------------------------------------------------*/

static void prvPortStartFirstTask( void )
{
	__asm volatile(
 8008ec8:	4806      	ldr	r0, [pc, #24]	; (8008ee4 <prvPortStartFirstTask+0x1c>)
 8008eca:	6800      	ldr	r0, [r0, #0]
 8008ecc:	6800      	ldr	r0, [r0, #0]
 8008ece:	f380 8808 	msr	MSP, r0
 8008ed2:	b662      	cpsie	i
 8008ed4:	b661      	cpsie	f
 8008ed6:	f3bf 8f4f 	dsb	sy
 8008eda:	f3bf 8f6f 	isb	sy
 8008ede:	df00      	svc	0
 8008ee0:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 8008ee2:	bf00      	nop
 8008ee4:	e000ed08 	.word	0xe000ed08

08008ee8 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 8008ee8:	b580      	push	{r7, lr}
 8008eea:	b084      	sub	sp, #16
 8008eec:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 8008eee:	4b32      	ldr	r3, [pc, #200]	; (8008fb8 <xPortStartScheduler+0xd0>)
 8008ef0:	60fb      	str	r3, [r7, #12]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 8008ef2:	68fb      	ldr	r3, [r7, #12]
 8008ef4:	781b      	ldrb	r3, [r3, #0]
 8008ef6:	b2db      	uxtb	r3, r3
 8008ef8:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 8008efa:	68fb      	ldr	r3, [r7, #12]
 8008efc:	22ff      	movs	r2, #255	; 0xff
 8008efe:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 8008f00:	68fb      	ldr	r3, [r7, #12]
 8008f02:	781b      	ldrb	r3, [r3, #0]
 8008f04:	b2db      	uxtb	r3, r3
 8008f06:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 8008f08:	78fb      	ldrb	r3, [r7, #3]
 8008f0a:	b2db      	uxtb	r3, r3
 8008f0c:	f003 0350 	and.w	r3, r3, #80	; 0x50
 8008f10:	b2da      	uxtb	r2, r3
 8008f12:	4b2a      	ldr	r3, [pc, #168]	; (8008fbc <xPortStartScheduler+0xd4>)
 8008f14:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 8008f16:	4b2a      	ldr	r3, [pc, #168]	; (8008fc0 <xPortStartScheduler+0xd8>)
 8008f18:	2207      	movs	r2, #7
 8008f1a:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8008f1c:	e009      	b.n	8008f32 <xPortStartScheduler+0x4a>
		{
			ulMaxPRIGROUPValue--;
 8008f1e:	4b28      	ldr	r3, [pc, #160]	; (8008fc0 <xPortStartScheduler+0xd8>)
 8008f20:	681b      	ldr	r3, [r3, #0]
 8008f22:	3b01      	subs	r3, #1
 8008f24:	4a26      	ldr	r2, [pc, #152]	; (8008fc0 <xPortStartScheduler+0xd8>)
 8008f26:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 8008f28:	78fb      	ldrb	r3, [r7, #3]
 8008f2a:	b2db      	uxtb	r3, r3
 8008f2c:	005b      	lsls	r3, r3, #1
 8008f2e:	b2db      	uxtb	r3, r3
 8008f30:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8008f32:	78fb      	ldrb	r3, [r7, #3]
 8008f34:	b2db      	uxtb	r3, r3
 8008f36:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8008f3a:	2b80      	cmp	r3, #128	; 0x80
 8008f3c:	d0ef      	beq.n	8008f1e <xPortStartScheduler+0x36>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 8008f3e:	4b20      	ldr	r3, [pc, #128]	; (8008fc0 <xPortStartScheduler+0xd8>)
 8008f40:	681b      	ldr	r3, [r3, #0]
 8008f42:	f1c3 0307 	rsb	r3, r3, #7
 8008f46:	2b04      	cmp	r3, #4
 8008f48:	d00a      	beq.n	8008f60 <xPortStartScheduler+0x78>
	__asm volatile
 8008f4a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008f4e:	f383 8811 	msr	BASEPRI, r3
 8008f52:	f3bf 8f6f 	isb	sy
 8008f56:	f3bf 8f4f 	dsb	sy
 8008f5a:	60bb      	str	r3, [r7, #8]
}
 8008f5c:	bf00      	nop
 8008f5e:	e7fe      	b.n	8008f5e <xPortStartScheduler+0x76>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 8008f60:	4b17      	ldr	r3, [pc, #92]	; (8008fc0 <xPortStartScheduler+0xd8>)
 8008f62:	681b      	ldr	r3, [r3, #0]
 8008f64:	021b      	lsls	r3, r3, #8
 8008f66:	4a16      	ldr	r2, [pc, #88]	; (8008fc0 <xPortStartScheduler+0xd8>)
 8008f68:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 8008f6a:	4b15      	ldr	r3, [pc, #84]	; (8008fc0 <xPortStartScheduler+0xd8>)
 8008f6c:	681b      	ldr	r3, [r3, #0]
 8008f6e:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8008f72:	4a13      	ldr	r2, [pc, #76]	; (8008fc0 <xPortStartScheduler+0xd8>)
 8008f74:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 8008f76:	687b      	ldr	r3, [r7, #4]
 8008f78:	b2da      	uxtb	r2, r3
 8008f7a:	68fb      	ldr	r3, [r7, #12]
 8008f7c:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 8008f7e:	4b11      	ldr	r3, [pc, #68]	; (8008fc4 <xPortStartScheduler+0xdc>)
 8008f80:	681b      	ldr	r3, [r3, #0]
 8008f82:	4a10      	ldr	r2, [pc, #64]	; (8008fc4 <xPortStartScheduler+0xdc>)
 8008f84:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8008f88:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 8008f8a:	4b0e      	ldr	r3, [pc, #56]	; (8008fc4 <xPortStartScheduler+0xdc>)
 8008f8c:	681b      	ldr	r3, [r3, #0]
 8008f8e:	4a0d      	ldr	r2, [pc, #52]	; (8008fc4 <xPortStartScheduler+0xdc>)
 8008f90:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 8008f94:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 8008f96:	f000 f8b9 	bl	800910c <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 8008f9a:	4b0b      	ldr	r3, [pc, #44]	; (8008fc8 <xPortStartScheduler+0xe0>)
 8008f9c:	2200      	movs	r2, #0
 8008f9e:	601a      	str	r2, [r3, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 8008fa0:	f7ff ff92 	bl	8008ec8 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 8008fa4:	f7fe fdae 	bl	8007b04 <vTaskSwitchContext>
	prvTaskExitError();
 8008fa8:	f7ff ff4a 	bl	8008e40 <prvTaskExitError>

	/* Should not get here! */
	return 0;
 8008fac:	2300      	movs	r3, #0
}
 8008fae:	4618      	mov	r0, r3
 8008fb0:	3710      	adds	r7, #16
 8008fb2:	46bd      	mov	sp, r7
 8008fb4:	bd80      	pop	{r7, pc}
 8008fb6:	bf00      	nop
 8008fb8:	e000e400 	.word	0xe000e400
 8008fbc:	20000ff4 	.word	0x20000ff4
 8008fc0:	20000ff8 	.word	0x20000ff8
 8008fc4:	e000ed20 	.word	0xe000ed20
 8008fc8:	2000000c 	.word	0x2000000c

08008fcc <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 8008fcc:	b480      	push	{r7}
 8008fce:	b083      	sub	sp, #12
 8008fd0:	af00      	add	r7, sp, #0
	__asm volatile
 8008fd2:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008fd6:	f383 8811 	msr	BASEPRI, r3
 8008fda:	f3bf 8f6f 	isb	sy
 8008fde:	f3bf 8f4f 	dsb	sy
 8008fe2:	607b      	str	r3, [r7, #4]
}
 8008fe4:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 8008fe6:	4b0f      	ldr	r3, [pc, #60]	; (8009024 <vPortEnterCritical+0x58>)
 8008fe8:	681b      	ldr	r3, [r3, #0]
 8008fea:	3301      	adds	r3, #1
 8008fec:	4a0d      	ldr	r2, [pc, #52]	; (8009024 <vPortEnterCritical+0x58>)
 8008fee:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 8008ff0:	4b0c      	ldr	r3, [pc, #48]	; (8009024 <vPortEnterCritical+0x58>)
 8008ff2:	681b      	ldr	r3, [r3, #0]
 8008ff4:	2b01      	cmp	r3, #1
 8008ff6:	d10f      	bne.n	8009018 <vPortEnterCritical+0x4c>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 8008ff8:	4b0b      	ldr	r3, [pc, #44]	; (8009028 <vPortEnterCritical+0x5c>)
 8008ffa:	681b      	ldr	r3, [r3, #0]
 8008ffc:	b2db      	uxtb	r3, r3
 8008ffe:	2b00      	cmp	r3, #0
 8009000:	d00a      	beq.n	8009018 <vPortEnterCritical+0x4c>
	__asm volatile
 8009002:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009006:	f383 8811 	msr	BASEPRI, r3
 800900a:	f3bf 8f6f 	isb	sy
 800900e:	f3bf 8f4f 	dsb	sy
 8009012:	603b      	str	r3, [r7, #0]
}
 8009014:	bf00      	nop
 8009016:	e7fe      	b.n	8009016 <vPortEnterCritical+0x4a>
	}
}
 8009018:	bf00      	nop
 800901a:	370c      	adds	r7, #12
 800901c:	46bd      	mov	sp, r7
 800901e:	bc80      	pop	{r7}
 8009020:	4770      	bx	lr
 8009022:	bf00      	nop
 8009024:	2000000c 	.word	0x2000000c
 8009028:	e000ed04 	.word	0xe000ed04

0800902c <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 800902c:	b480      	push	{r7}
 800902e:	b083      	sub	sp, #12
 8009030:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 8009032:	4b11      	ldr	r3, [pc, #68]	; (8009078 <vPortExitCritical+0x4c>)
 8009034:	681b      	ldr	r3, [r3, #0]
 8009036:	2b00      	cmp	r3, #0
 8009038:	d10a      	bne.n	8009050 <vPortExitCritical+0x24>
	__asm volatile
 800903a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800903e:	f383 8811 	msr	BASEPRI, r3
 8009042:	f3bf 8f6f 	isb	sy
 8009046:	f3bf 8f4f 	dsb	sy
 800904a:	607b      	str	r3, [r7, #4]
}
 800904c:	bf00      	nop
 800904e:	e7fe      	b.n	800904e <vPortExitCritical+0x22>
	uxCriticalNesting--;
 8009050:	4b09      	ldr	r3, [pc, #36]	; (8009078 <vPortExitCritical+0x4c>)
 8009052:	681b      	ldr	r3, [r3, #0]
 8009054:	3b01      	subs	r3, #1
 8009056:	4a08      	ldr	r2, [pc, #32]	; (8009078 <vPortExitCritical+0x4c>)
 8009058:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 800905a:	4b07      	ldr	r3, [pc, #28]	; (8009078 <vPortExitCritical+0x4c>)
 800905c:	681b      	ldr	r3, [r3, #0]
 800905e:	2b00      	cmp	r3, #0
 8009060:	d105      	bne.n	800906e <vPortExitCritical+0x42>
 8009062:	2300      	movs	r3, #0
 8009064:	603b      	str	r3, [r7, #0]
	__asm volatile
 8009066:	683b      	ldr	r3, [r7, #0]
 8009068:	f383 8811 	msr	BASEPRI, r3
}
 800906c:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 800906e:	bf00      	nop
 8009070:	370c      	adds	r7, #12
 8009072:	46bd      	mov	sp, r7
 8009074:	bc80      	pop	{r7}
 8009076:	4770      	bx	lr
 8009078:	2000000c 	.word	0x2000000c
 800907c:	00000000 	.word	0x00000000

08009080 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 8009080:	f3ef 8009 	mrs	r0, PSP
 8009084:	f3bf 8f6f 	isb	sy
 8009088:	4b0d      	ldr	r3, [pc, #52]	; (80090c0 <pxCurrentTCBConst>)
 800908a:	681a      	ldr	r2, [r3, #0]
 800908c:	e920 0ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp}
 8009090:	6010      	str	r0, [r2, #0]
 8009092:	e92d 4008 	stmdb	sp!, {r3, lr}
 8009096:	f04f 0050 	mov.w	r0, #80	; 0x50
 800909a:	f380 8811 	msr	BASEPRI, r0
 800909e:	f7fe fd31 	bl	8007b04 <vTaskSwitchContext>
 80090a2:	f04f 0000 	mov.w	r0, #0
 80090a6:	f380 8811 	msr	BASEPRI, r0
 80090aa:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
 80090ae:	6819      	ldr	r1, [r3, #0]
 80090b0:	6808      	ldr	r0, [r1, #0]
 80090b2:	e8b0 0ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp}
 80090b6:	f380 8809 	msr	PSP, r0
 80090ba:	f3bf 8f6f 	isb	sy
 80090be:	4770      	bx	lr

080090c0 <pxCurrentTCBConst>:
 80090c0:	200009c8 	.word	0x200009c8
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 80090c4:	bf00      	nop
 80090c6:	bf00      	nop

080090c8 <xPortSysTickHandler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 80090c8:	b580      	push	{r7, lr}
 80090ca:	b082      	sub	sp, #8
 80090cc:	af00      	add	r7, sp, #0
	__asm volatile
 80090ce:	f04f 0350 	mov.w	r3, #80	; 0x50
 80090d2:	f383 8811 	msr	BASEPRI, r3
 80090d6:	f3bf 8f6f 	isb	sy
 80090da:	f3bf 8f4f 	dsb	sy
 80090de:	607b      	str	r3, [r7, #4]
}
 80090e0:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 80090e2:	f7fe fc51 	bl	8007988 <xTaskIncrementTick>
 80090e6:	4603      	mov	r3, r0
 80090e8:	2b00      	cmp	r3, #0
 80090ea:	d003      	beq.n	80090f4 <xPortSysTickHandler+0x2c>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 80090ec:	4b06      	ldr	r3, [pc, #24]	; (8009108 <xPortSysTickHandler+0x40>)
 80090ee:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80090f2:	601a      	str	r2, [r3, #0]
 80090f4:	2300      	movs	r3, #0
 80090f6:	603b      	str	r3, [r7, #0]
	__asm volatile
 80090f8:	683b      	ldr	r3, [r7, #0]
 80090fa:	f383 8811 	msr	BASEPRI, r3
}
 80090fe:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 8009100:	bf00      	nop
 8009102:	3708      	adds	r7, #8
 8009104:	46bd      	mov	sp, r7
 8009106:	bd80      	pop	{r7, pc}
 8009108:	e000ed04 	.word	0xe000ed04

0800910c <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 800910c:	b480      	push	{r7}
 800910e:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 8009110:	4b0a      	ldr	r3, [pc, #40]	; (800913c <vPortSetupTimerInterrupt+0x30>)
 8009112:	2200      	movs	r2, #0
 8009114:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 8009116:	4b0a      	ldr	r3, [pc, #40]	; (8009140 <vPortSetupTimerInterrupt+0x34>)
 8009118:	2200      	movs	r2, #0
 800911a:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 800911c:	4b09      	ldr	r3, [pc, #36]	; (8009144 <vPortSetupTimerInterrupt+0x38>)
 800911e:	681b      	ldr	r3, [r3, #0]
 8009120:	4a09      	ldr	r2, [pc, #36]	; (8009148 <vPortSetupTimerInterrupt+0x3c>)
 8009122:	fba2 2303 	umull	r2, r3, r2, r3
 8009126:	099b      	lsrs	r3, r3, #6
 8009128:	4a08      	ldr	r2, [pc, #32]	; (800914c <vPortSetupTimerInterrupt+0x40>)
 800912a:	3b01      	subs	r3, #1
 800912c:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 800912e:	4b03      	ldr	r3, [pc, #12]	; (800913c <vPortSetupTimerInterrupt+0x30>)
 8009130:	2207      	movs	r2, #7
 8009132:	601a      	str	r2, [r3, #0]
}
 8009134:	bf00      	nop
 8009136:	46bd      	mov	sp, r7
 8009138:	bc80      	pop	{r7}
 800913a:	4770      	bx	lr
 800913c:	e000e010 	.word	0xe000e010
 8009140:	e000e018 	.word	0xe000e018
 8009144:	20000000 	.word	0x20000000
 8009148:	10624dd3 	.word	0x10624dd3
 800914c:	e000e014 	.word	0xe000e014

08009150 <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 8009150:	b480      	push	{r7}
 8009152:	b085      	sub	sp, #20
 8009154:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 8009156:	f3ef 8305 	mrs	r3, IPSR
 800915a:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 800915c:	68fb      	ldr	r3, [r7, #12]
 800915e:	2b0f      	cmp	r3, #15
 8009160:	d914      	bls.n	800918c <vPortValidateInterruptPriority+0x3c>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 8009162:	4a16      	ldr	r2, [pc, #88]	; (80091bc <vPortValidateInterruptPriority+0x6c>)
 8009164:	68fb      	ldr	r3, [r7, #12]
 8009166:	4413      	add	r3, r2
 8009168:	781b      	ldrb	r3, [r3, #0]
 800916a:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 800916c:	4b14      	ldr	r3, [pc, #80]	; (80091c0 <vPortValidateInterruptPriority+0x70>)
 800916e:	781b      	ldrb	r3, [r3, #0]
 8009170:	7afa      	ldrb	r2, [r7, #11]
 8009172:	429a      	cmp	r2, r3
 8009174:	d20a      	bcs.n	800918c <vPortValidateInterruptPriority+0x3c>
	__asm volatile
 8009176:	f04f 0350 	mov.w	r3, #80	; 0x50
 800917a:	f383 8811 	msr	BASEPRI, r3
 800917e:	f3bf 8f6f 	isb	sy
 8009182:	f3bf 8f4f 	dsb	sy
 8009186:	607b      	str	r3, [r7, #4]
}
 8009188:	bf00      	nop
 800918a:	e7fe      	b.n	800918a <vPortValidateInterruptPriority+0x3a>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 800918c:	4b0d      	ldr	r3, [pc, #52]	; (80091c4 <vPortValidateInterruptPriority+0x74>)
 800918e:	681b      	ldr	r3, [r3, #0]
 8009190:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 8009194:	4b0c      	ldr	r3, [pc, #48]	; (80091c8 <vPortValidateInterruptPriority+0x78>)
 8009196:	681b      	ldr	r3, [r3, #0]
 8009198:	429a      	cmp	r2, r3
 800919a:	d90a      	bls.n	80091b2 <vPortValidateInterruptPriority+0x62>
	__asm volatile
 800919c:	f04f 0350 	mov.w	r3, #80	; 0x50
 80091a0:	f383 8811 	msr	BASEPRI, r3
 80091a4:	f3bf 8f6f 	isb	sy
 80091a8:	f3bf 8f4f 	dsb	sy
 80091ac:	603b      	str	r3, [r7, #0]
}
 80091ae:	bf00      	nop
 80091b0:	e7fe      	b.n	80091b0 <vPortValidateInterruptPriority+0x60>
	}
 80091b2:	bf00      	nop
 80091b4:	3714      	adds	r7, #20
 80091b6:	46bd      	mov	sp, r7
 80091b8:	bc80      	pop	{r7}
 80091ba:	4770      	bx	lr
 80091bc:	e000e3f0 	.word	0xe000e3f0
 80091c0:	20000ff4 	.word	0x20000ff4
 80091c4:	e000ed0c 	.word	0xe000ed0c
 80091c8:	20000ff8 	.word	0x20000ff8

080091cc <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 80091cc:	b580      	push	{r7, lr}
 80091ce:	b08a      	sub	sp, #40	; 0x28
 80091d0:	af00      	add	r7, sp, #0
 80091d2:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 80091d4:	2300      	movs	r3, #0
 80091d6:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 80091d8:	f7fe fb0a 	bl	80077f0 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 80091dc:	4b58      	ldr	r3, [pc, #352]	; (8009340 <pvPortMalloc+0x174>)
 80091de:	681b      	ldr	r3, [r3, #0]
 80091e0:	2b00      	cmp	r3, #0
 80091e2:	d101      	bne.n	80091e8 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 80091e4:	f000 f910 	bl	8009408 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 80091e8:	4b56      	ldr	r3, [pc, #344]	; (8009344 <pvPortMalloc+0x178>)
 80091ea:	681a      	ldr	r2, [r3, #0]
 80091ec:	687b      	ldr	r3, [r7, #4]
 80091ee:	4013      	ands	r3, r2
 80091f0:	2b00      	cmp	r3, #0
 80091f2:	f040 808e 	bne.w	8009312 <pvPortMalloc+0x146>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 80091f6:	687b      	ldr	r3, [r7, #4]
 80091f8:	2b00      	cmp	r3, #0
 80091fa:	d01d      	beq.n	8009238 <pvPortMalloc+0x6c>
			{
				xWantedSize += xHeapStructSize;
 80091fc:	2208      	movs	r2, #8
 80091fe:	687b      	ldr	r3, [r7, #4]
 8009200:	4413      	add	r3, r2
 8009202:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 8009204:	687b      	ldr	r3, [r7, #4]
 8009206:	f003 0307 	and.w	r3, r3, #7
 800920a:	2b00      	cmp	r3, #0
 800920c:	d014      	beq.n	8009238 <pvPortMalloc+0x6c>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 800920e:	687b      	ldr	r3, [r7, #4]
 8009210:	f023 0307 	bic.w	r3, r3, #7
 8009214:	3308      	adds	r3, #8
 8009216:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 8009218:	687b      	ldr	r3, [r7, #4]
 800921a:	f003 0307 	and.w	r3, r3, #7
 800921e:	2b00      	cmp	r3, #0
 8009220:	d00a      	beq.n	8009238 <pvPortMalloc+0x6c>
	__asm volatile
 8009222:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009226:	f383 8811 	msr	BASEPRI, r3
 800922a:	f3bf 8f6f 	isb	sy
 800922e:	f3bf 8f4f 	dsb	sy
 8009232:	617b      	str	r3, [r7, #20]
}
 8009234:	bf00      	nop
 8009236:	e7fe      	b.n	8009236 <pvPortMalloc+0x6a>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 8009238:	687b      	ldr	r3, [r7, #4]
 800923a:	2b00      	cmp	r3, #0
 800923c:	d069      	beq.n	8009312 <pvPortMalloc+0x146>
 800923e:	4b42      	ldr	r3, [pc, #264]	; (8009348 <pvPortMalloc+0x17c>)
 8009240:	681b      	ldr	r3, [r3, #0]
 8009242:	687a      	ldr	r2, [r7, #4]
 8009244:	429a      	cmp	r2, r3
 8009246:	d864      	bhi.n	8009312 <pvPortMalloc+0x146>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 8009248:	4b40      	ldr	r3, [pc, #256]	; (800934c <pvPortMalloc+0x180>)
 800924a:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 800924c:	4b3f      	ldr	r3, [pc, #252]	; (800934c <pvPortMalloc+0x180>)
 800924e:	681b      	ldr	r3, [r3, #0]
 8009250:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8009252:	e004      	b.n	800925e <pvPortMalloc+0x92>
				{
					pxPreviousBlock = pxBlock;
 8009254:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009256:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 8009258:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800925a:	681b      	ldr	r3, [r3, #0]
 800925c:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800925e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009260:	685b      	ldr	r3, [r3, #4]
 8009262:	687a      	ldr	r2, [r7, #4]
 8009264:	429a      	cmp	r2, r3
 8009266:	d903      	bls.n	8009270 <pvPortMalloc+0xa4>
 8009268:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800926a:	681b      	ldr	r3, [r3, #0]
 800926c:	2b00      	cmp	r3, #0
 800926e:	d1f1      	bne.n	8009254 <pvPortMalloc+0x88>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 8009270:	4b33      	ldr	r3, [pc, #204]	; (8009340 <pvPortMalloc+0x174>)
 8009272:	681b      	ldr	r3, [r3, #0]
 8009274:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8009276:	429a      	cmp	r2, r3
 8009278:	d04b      	beq.n	8009312 <pvPortMalloc+0x146>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 800927a:	6a3b      	ldr	r3, [r7, #32]
 800927c:	681b      	ldr	r3, [r3, #0]
 800927e:	2208      	movs	r2, #8
 8009280:	4413      	add	r3, r2
 8009282:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 8009284:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009286:	681a      	ldr	r2, [r3, #0]
 8009288:	6a3b      	ldr	r3, [r7, #32]
 800928a:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 800928c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800928e:	685a      	ldr	r2, [r3, #4]
 8009290:	687b      	ldr	r3, [r7, #4]
 8009292:	1ad2      	subs	r2, r2, r3
 8009294:	2308      	movs	r3, #8
 8009296:	005b      	lsls	r3, r3, #1
 8009298:	429a      	cmp	r2, r3
 800929a:	d91f      	bls.n	80092dc <pvPortMalloc+0x110>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 800929c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800929e:	687b      	ldr	r3, [r7, #4]
 80092a0:	4413      	add	r3, r2
 80092a2:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 80092a4:	69bb      	ldr	r3, [r7, #24]
 80092a6:	f003 0307 	and.w	r3, r3, #7
 80092aa:	2b00      	cmp	r3, #0
 80092ac:	d00a      	beq.n	80092c4 <pvPortMalloc+0xf8>
	__asm volatile
 80092ae:	f04f 0350 	mov.w	r3, #80	; 0x50
 80092b2:	f383 8811 	msr	BASEPRI, r3
 80092b6:	f3bf 8f6f 	isb	sy
 80092ba:	f3bf 8f4f 	dsb	sy
 80092be:	613b      	str	r3, [r7, #16]
}
 80092c0:	bf00      	nop
 80092c2:	e7fe      	b.n	80092c2 <pvPortMalloc+0xf6>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 80092c4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80092c6:	685a      	ldr	r2, [r3, #4]
 80092c8:	687b      	ldr	r3, [r7, #4]
 80092ca:	1ad2      	subs	r2, r2, r3
 80092cc:	69bb      	ldr	r3, [r7, #24]
 80092ce:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 80092d0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80092d2:	687a      	ldr	r2, [r7, #4]
 80092d4:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 80092d6:	69b8      	ldr	r0, [r7, #24]
 80092d8:	f000 f8f8 	bl	80094cc <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 80092dc:	4b1a      	ldr	r3, [pc, #104]	; (8009348 <pvPortMalloc+0x17c>)
 80092de:	681a      	ldr	r2, [r3, #0]
 80092e0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80092e2:	685b      	ldr	r3, [r3, #4]
 80092e4:	1ad3      	subs	r3, r2, r3
 80092e6:	4a18      	ldr	r2, [pc, #96]	; (8009348 <pvPortMalloc+0x17c>)
 80092e8:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 80092ea:	4b17      	ldr	r3, [pc, #92]	; (8009348 <pvPortMalloc+0x17c>)
 80092ec:	681a      	ldr	r2, [r3, #0]
 80092ee:	4b18      	ldr	r3, [pc, #96]	; (8009350 <pvPortMalloc+0x184>)
 80092f0:	681b      	ldr	r3, [r3, #0]
 80092f2:	429a      	cmp	r2, r3
 80092f4:	d203      	bcs.n	80092fe <pvPortMalloc+0x132>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 80092f6:	4b14      	ldr	r3, [pc, #80]	; (8009348 <pvPortMalloc+0x17c>)
 80092f8:	681b      	ldr	r3, [r3, #0]
 80092fa:	4a15      	ldr	r2, [pc, #84]	; (8009350 <pvPortMalloc+0x184>)
 80092fc:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 80092fe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009300:	685a      	ldr	r2, [r3, #4]
 8009302:	4b10      	ldr	r3, [pc, #64]	; (8009344 <pvPortMalloc+0x178>)
 8009304:	681b      	ldr	r3, [r3, #0]
 8009306:	431a      	orrs	r2, r3
 8009308:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800930a:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 800930c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800930e:	2200      	movs	r2, #0
 8009310:	601a      	str	r2, [r3, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 8009312:	f7fe fa7b 	bl	800780c <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 8009316:	69fb      	ldr	r3, [r7, #28]
 8009318:	f003 0307 	and.w	r3, r3, #7
 800931c:	2b00      	cmp	r3, #0
 800931e:	d00a      	beq.n	8009336 <pvPortMalloc+0x16a>
	__asm volatile
 8009320:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009324:	f383 8811 	msr	BASEPRI, r3
 8009328:	f3bf 8f6f 	isb	sy
 800932c:	f3bf 8f4f 	dsb	sy
 8009330:	60fb      	str	r3, [r7, #12]
}
 8009332:	bf00      	nop
 8009334:	e7fe      	b.n	8009334 <pvPortMalloc+0x168>
	return pvReturn;
 8009336:	69fb      	ldr	r3, [r7, #28]
}
 8009338:	4618      	mov	r0, r3
 800933a:	3728      	adds	r7, #40	; 0x28
 800933c:	46bd      	mov	sp, r7
 800933e:	bd80      	pop	{r7, pc}
 8009340:	20001c04 	.word	0x20001c04
 8009344:	20001c10 	.word	0x20001c10
 8009348:	20001c08 	.word	0x20001c08
 800934c:	20001bfc 	.word	0x20001bfc
 8009350:	20001c0c 	.word	0x20001c0c

08009354 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 8009354:	b580      	push	{r7, lr}
 8009356:	b086      	sub	sp, #24
 8009358:	af00      	add	r7, sp, #0
 800935a:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 800935c:	687b      	ldr	r3, [r7, #4]
 800935e:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 8009360:	687b      	ldr	r3, [r7, #4]
 8009362:	2b00      	cmp	r3, #0
 8009364:	d048      	beq.n	80093f8 <vPortFree+0xa4>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 8009366:	2308      	movs	r3, #8
 8009368:	425b      	negs	r3, r3
 800936a:	697a      	ldr	r2, [r7, #20]
 800936c:	4413      	add	r3, r2
 800936e:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 8009370:	697b      	ldr	r3, [r7, #20]
 8009372:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 8009374:	693b      	ldr	r3, [r7, #16]
 8009376:	685a      	ldr	r2, [r3, #4]
 8009378:	4b21      	ldr	r3, [pc, #132]	; (8009400 <vPortFree+0xac>)
 800937a:	681b      	ldr	r3, [r3, #0]
 800937c:	4013      	ands	r3, r2
 800937e:	2b00      	cmp	r3, #0
 8009380:	d10a      	bne.n	8009398 <vPortFree+0x44>
	__asm volatile
 8009382:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009386:	f383 8811 	msr	BASEPRI, r3
 800938a:	f3bf 8f6f 	isb	sy
 800938e:	f3bf 8f4f 	dsb	sy
 8009392:	60fb      	str	r3, [r7, #12]
}
 8009394:	bf00      	nop
 8009396:	e7fe      	b.n	8009396 <vPortFree+0x42>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 8009398:	693b      	ldr	r3, [r7, #16]
 800939a:	681b      	ldr	r3, [r3, #0]
 800939c:	2b00      	cmp	r3, #0
 800939e:	d00a      	beq.n	80093b6 <vPortFree+0x62>
	__asm volatile
 80093a0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80093a4:	f383 8811 	msr	BASEPRI, r3
 80093a8:	f3bf 8f6f 	isb	sy
 80093ac:	f3bf 8f4f 	dsb	sy
 80093b0:	60bb      	str	r3, [r7, #8]
}
 80093b2:	bf00      	nop
 80093b4:	e7fe      	b.n	80093b4 <vPortFree+0x60>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 80093b6:	693b      	ldr	r3, [r7, #16]
 80093b8:	685a      	ldr	r2, [r3, #4]
 80093ba:	4b11      	ldr	r3, [pc, #68]	; (8009400 <vPortFree+0xac>)
 80093bc:	681b      	ldr	r3, [r3, #0]
 80093be:	4013      	ands	r3, r2
 80093c0:	2b00      	cmp	r3, #0
 80093c2:	d019      	beq.n	80093f8 <vPortFree+0xa4>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 80093c4:	693b      	ldr	r3, [r7, #16]
 80093c6:	681b      	ldr	r3, [r3, #0]
 80093c8:	2b00      	cmp	r3, #0
 80093ca:	d115      	bne.n	80093f8 <vPortFree+0xa4>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 80093cc:	693b      	ldr	r3, [r7, #16]
 80093ce:	685a      	ldr	r2, [r3, #4]
 80093d0:	4b0b      	ldr	r3, [pc, #44]	; (8009400 <vPortFree+0xac>)
 80093d2:	681b      	ldr	r3, [r3, #0]
 80093d4:	43db      	mvns	r3, r3
 80093d6:	401a      	ands	r2, r3
 80093d8:	693b      	ldr	r3, [r7, #16]
 80093da:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 80093dc:	f7fe fa08 	bl	80077f0 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 80093e0:	693b      	ldr	r3, [r7, #16]
 80093e2:	685a      	ldr	r2, [r3, #4]
 80093e4:	4b07      	ldr	r3, [pc, #28]	; (8009404 <vPortFree+0xb0>)
 80093e6:	681b      	ldr	r3, [r3, #0]
 80093e8:	4413      	add	r3, r2
 80093ea:	4a06      	ldr	r2, [pc, #24]	; (8009404 <vPortFree+0xb0>)
 80093ec:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 80093ee:	6938      	ldr	r0, [r7, #16]
 80093f0:	f000 f86c 	bl	80094cc <prvInsertBlockIntoFreeList>
				}
				( void ) xTaskResumeAll();
 80093f4:	f7fe fa0a 	bl	800780c <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 80093f8:	bf00      	nop
 80093fa:	3718      	adds	r7, #24
 80093fc:	46bd      	mov	sp, r7
 80093fe:	bd80      	pop	{r7, pc}
 8009400:	20001c10 	.word	0x20001c10
 8009404:	20001c08 	.word	0x20001c08

08009408 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 8009408:	b480      	push	{r7}
 800940a:	b085      	sub	sp, #20
 800940c:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 800940e:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 8009412:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 8009414:	4b27      	ldr	r3, [pc, #156]	; (80094b4 <prvHeapInit+0xac>)
 8009416:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 8009418:	68fb      	ldr	r3, [r7, #12]
 800941a:	f003 0307 	and.w	r3, r3, #7
 800941e:	2b00      	cmp	r3, #0
 8009420:	d00c      	beq.n	800943c <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 8009422:	68fb      	ldr	r3, [r7, #12]
 8009424:	3307      	adds	r3, #7
 8009426:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8009428:	68fb      	ldr	r3, [r7, #12]
 800942a:	f023 0307 	bic.w	r3, r3, #7
 800942e:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 8009430:	68ba      	ldr	r2, [r7, #8]
 8009432:	68fb      	ldr	r3, [r7, #12]
 8009434:	1ad3      	subs	r3, r2, r3
 8009436:	4a1f      	ldr	r2, [pc, #124]	; (80094b4 <prvHeapInit+0xac>)
 8009438:	4413      	add	r3, r2
 800943a:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 800943c:	68fb      	ldr	r3, [r7, #12]
 800943e:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 8009440:	4a1d      	ldr	r2, [pc, #116]	; (80094b8 <prvHeapInit+0xb0>)
 8009442:	687b      	ldr	r3, [r7, #4]
 8009444:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 8009446:	4b1c      	ldr	r3, [pc, #112]	; (80094b8 <prvHeapInit+0xb0>)
 8009448:	2200      	movs	r2, #0
 800944a:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 800944c:	687b      	ldr	r3, [r7, #4]
 800944e:	68ba      	ldr	r2, [r7, #8]
 8009450:	4413      	add	r3, r2
 8009452:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 8009454:	2208      	movs	r2, #8
 8009456:	68fb      	ldr	r3, [r7, #12]
 8009458:	1a9b      	subs	r3, r3, r2
 800945a:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 800945c:	68fb      	ldr	r3, [r7, #12]
 800945e:	f023 0307 	bic.w	r3, r3, #7
 8009462:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 8009464:	68fb      	ldr	r3, [r7, #12]
 8009466:	4a15      	ldr	r2, [pc, #84]	; (80094bc <prvHeapInit+0xb4>)
 8009468:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 800946a:	4b14      	ldr	r3, [pc, #80]	; (80094bc <prvHeapInit+0xb4>)
 800946c:	681b      	ldr	r3, [r3, #0]
 800946e:	2200      	movs	r2, #0
 8009470:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 8009472:	4b12      	ldr	r3, [pc, #72]	; (80094bc <prvHeapInit+0xb4>)
 8009474:	681b      	ldr	r3, [r3, #0]
 8009476:	2200      	movs	r2, #0
 8009478:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 800947a:	687b      	ldr	r3, [r7, #4]
 800947c:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 800947e:	683b      	ldr	r3, [r7, #0]
 8009480:	68fa      	ldr	r2, [r7, #12]
 8009482:	1ad2      	subs	r2, r2, r3
 8009484:	683b      	ldr	r3, [r7, #0]
 8009486:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 8009488:	4b0c      	ldr	r3, [pc, #48]	; (80094bc <prvHeapInit+0xb4>)
 800948a:	681a      	ldr	r2, [r3, #0]
 800948c:	683b      	ldr	r3, [r7, #0]
 800948e:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8009490:	683b      	ldr	r3, [r7, #0]
 8009492:	685b      	ldr	r3, [r3, #4]
 8009494:	4a0a      	ldr	r2, [pc, #40]	; (80094c0 <prvHeapInit+0xb8>)
 8009496:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8009498:	683b      	ldr	r3, [r7, #0]
 800949a:	685b      	ldr	r3, [r3, #4]
 800949c:	4a09      	ldr	r2, [pc, #36]	; (80094c4 <prvHeapInit+0xbc>)
 800949e:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 80094a0:	4b09      	ldr	r3, [pc, #36]	; (80094c8 <prvHeapInit+0xc0>)
 80094a2:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 80094a6:	601a      	str	r2, [r3, #0]
}
 80094a8:	bf00      	nop
 80094aa:	3714      	adds	r7, #20
 80094ac:	46bd      	mov	sp, r7
 80094ae:	bc80      	pop	{r7}
 80094b0:	4770      	bx	lr
 80094b2:	bf00      	nop
 80094b4:	20000ffc 	.word	0x20000ffc
 80094b8:	20001bfc 	.word	0x20001bfc
 80094bc:	20001c04 	.word	0x20001c04
 80094c0:	20001c0c 	.word	0x20001c0c
 80094c4:	20001c08 	.word	0x20001c08
 80094c8:	20001c10 	.word	0x20001c10

080094cc <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 80094cc:	b480      	push	{r7}
 80094ce:	b085      	sub	sp, #20
 80094d0:	af00      	add	r7, sp, #0
 80094d2:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 80094d4:	4b27      	ldr	r3, [pc, #156]	; (8009574 <prvInsertBlockIntoFreeList+0xa8>)
 80094d6:	60fb      	str	r3, [r7, #12]
 80094d8:	e002      	b.n	80094e0 <prvInsertBlockIntoFreeList+0x14>
 80094da:	68fb      	ldr	r3, [r7, #12]
 80094dc:	681b      	ldr	r3, [r3, #0]
 80094de:	60fb      	str	r3, [r7, #12]
 80094e0:	68fb      	ldr	r3, [r7, #12]
 80094e2:	681b      	ldr	r3, [r3, #0]
 80094e4:	687a      	ldr	r2, [r7, #4]
 80094e6:	429a      	cmp	r2, r3
 80094e8:	d8f7      	bhi.n	80094da <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 80094ea:	68fb      	ldr	r3, [r7, #12]
 80094ec:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 80094ee:	68fb      	ldr	r3, [r7, #12]
 80094f0:	685b      	ldr	r3, [r3, #4]
 80094f2:	68ba      	ldr	r2, [r7, #8]
 80094f4:	4413      	add	r3, r2
 80094f6:	687a      	ldr	r2, [r7, #4]
 80094f8:	429a      	cmp	r2, r3
 80094fa:	d108      	bne.n	800950e <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 80094fc:	68fb      	ldr	r3, [r7, #12]
 80094fe:	685a      	ldr	r2, [r3, #4]
 8009500:	687b      	ldr	r3, [r7, #4]
 8009502:	685b      	ldr	r3, [r3, #4]
 8009504:	441a      	add	r2, r3
 8009506:	68fb      	ldr	r3, [r7, #12]
 8009508:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 800950a:	68fb      	ldr	r3, [r7, #12]
 800950c:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 800950e:	687b      	ldr	r3, [r7, #4]
 8009510:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 8009512:	687b      	ldr	r3, [r7, #4]
 8009514:	685b      	ldr	r3, [r3, #4]
 8009516:	68ba      	ldr	r2, [r7, #8]
 8009518:	441a      	add	r2, r3
 800951a:	68fb      	ldr	r3, [r7, #12]
 800951c:	681b      	ldr	r3, [r3, #0]
 800951e:	429a      	cmp	r2, r3
 8009520:	d118      	bne.n	8009554 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 8009522:	68fb      	ldr	r3, [r7, #12]
 8009524:	681a      	ldr	r2, [r3, #0]
 8009526:	4b14      	ldr	r3, [pc, #80]	; (8009578 <prvInsertBlockIntoFreeList+0xac>)
 8009528:	681b      	ldr	r3, [r3, #0]
 800952a:	429a      	cmp	r2, r3
 800952c:	d00d      	beq.n	800954a <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 800952e:	687b      	ldr	r3, [r7, #4]
 8009530:	685a      	ldr	r2, [r3, #4]
 8009532:	68fb      	ldr	r3, [r7, #12]
 8009534:	681b      	ldr	r3, [r3, #0]
 8009536:	685b      	ldr	r3, [r3, #4]
 8009538:	441a      	add	r2, r3
 800953a:	687b      	ldr	r3, [r7, #4]
 800953c:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 800953e:	68fb      	ldr	r3, [r7, #12]
 8009540:	681b      	ldr	r3, [r3, #0]
 8009542:	681a      	ldr	r2, [r3, #0]
 8009544:	687b      	ldr	r3, [r7, #4]
 8009546:	601a      	str	r2, [r3, #0]
 8009548:	e008      	b.n	800955c <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 800954a:	4b0b      	ldr	r3, [pc, #44]	; (8009578 <prvInsertBlockIntoFreeList+0xac>)
 800954c:	681a      	ldr	r2, [r3, #0]
 800954e:	687b      	ldr	r3, [r7, #4]
 8009550:	601a      	str	r2, [r3, #0]
 8009552:	e003      	b.n	800955c <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 8009554:	68fb      	ldr	r3, [r7, #12]
 8009556:	681a      	ldr	r2, [r3, #0]
 8009558:	687b      	ldr	r3, [r7, #4]
 800955a:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 800955c:	68fa      	ldr	r2, [r7, #12]
 800955e:	687b      	ldr	r3, [r7, #4]
 8009560:	429a      	cmp	r2, r3
 8009562:	d002      	beq.n	800956a <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 8009564:	68fb      	ldr	r3, [r7, #12]
 8009566:	687a      	ldr	r2, [r7, #4]
 8009568:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800956a:	bf00      	nop
 800956c:	3714      	adds	r7, #20
 800956e:	46bd      	mov	sp, r7
 8009570:	bc80      	pop	{r7}
 8009572:	4770      	bx	lr
 8009574:	20001bfc 	.word	0x20001bfc
 8009578:	20001c04 	.word	0x20001c04

0800957c <__libc_init_array>:
 800957c:	b570      	push	{r4, r5, r6, lr}
 800957e:	2600      	movs	r6, #0
 8009580:	4d0c      	ldr	r5, [pc, #48]	; (80095b4 <__libc_init_array+0x38>)
 8009582:	4c0d      	ldr	r4, [pc, #52]	; (80095b8 <__libc_init_array+0x3c>)
 8009584:	1b64      	subs	r4, r4, r5
 8009586:	10a4      	asrs	r4, r4, #2
 8009588:	42a6      	cmp	r6, r4
 800958a:	d109      	bne.n	80095a0 <__libc_init_array+0x24>
 800958c:	f000 f830 	bl	80095f0 <_init>
 8009590:	2600      	movs	r6, #0
 8009592:	4d0a      	ldr	r5, [pc, #40]	; (80095bc <__libc_init_array+0x40>)
 8009594:	4c0a      	ldr	r4, [pc, #40]	; (80095c0 <__libc_init_array+0x44>)
 8009596:	1b64      	subs	r4, r4, r5
 8009598:	10a4      	asrs	r4, r4, #2
 800959a:	42a6      	cmp	r6, r4
 800959c:	d105      	bne.n	80095aa <__libc_init_array+0x2e>
 800959e:	bd70      	pop	{r4, r5, r6, pc}
 80095a0:	f855 3b04 	ldr.w	r3, [r5], #4
 80095a4:	4798      	blx	r3
 80095a6:	3601      	adds	r6, #1
 80095a8:	e7ee      	b.n	8009588 <__libc_init_array+0xc>
 80095aa:	f855 3b04 	ldr.w	r3, [r5], #4
 80095ae:	4798      	blx	r3
 80095b0:	3601      	adds	r6, #1
 80095b2:	e7f2      	b.n	800959a <__libc_init_array+0x1e>
 80095b4:	08009750 	.word	0x08009750
 80095b8:	08009750 	.word	0x08009750
 80095bc:	08009750 	.word	0x08009750
 80095c0:	08009754 	.word	0x08009754

080095c4 <memcpy>:
 80095c4:	440a      	add	r2, r1
 80095c6:	4291      	cmp	r1, r2
 80095c8:	f100 33ff 	add.w	r3, r0, #4294967295
 80095cc:	d100      	bne.n	80095d0 <memcpy+0xc>
 80095ce:	4770      	bx	lr
 80095d0:	b510      	push	{r4, lr}
 80095d2:	f811 4b01 	ldrb.w	r4, [r1], #1
 80095d6:	4291      	cmp	r1, r2
 80095d8:	f803 4f01 	strb.w	r4, [r3, #1]!
 80095dc:	d1f9      	bne.n	80095d2 <memcpy+0xe>
 80095de:	bd10      	pop	{r4, pc}

080095e0 <memset>:
 80095e0:	4603      	mov	r3, r0
 80095e2:	4402      	add	r2, r0
 80095e4:	4293      	cmp	r3, r2
 80095e6:	d100      	bne.n	80095ea <memset+0xa>
 80095e8:	4770      	bx	lr
 80095ea:	f803 1b01 	strb.w	r1, [r3], #1
 80095ee:	e7f9      	b.n	80095e4 <memset+0x4>

080095f0 <_init>:
 80095f0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80095f2:	bf00      	nop
 80095f4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80095f6:	bc08      	pop	{r3}
 80095f8:	469e      	mov	lr, r3
 80095fa:	4770      	bx	lr

080095fc <_fini>:
 80095fc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80095fe:	bf00      	nop
 8009600:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8009602:	bc08      	pop	{r3}
 8009604:	469e      	mov	lr, r3
 8009606:	4770      	bx	lr
